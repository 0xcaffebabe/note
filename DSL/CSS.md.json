{"name":"CSS","id":"DSL-CSS","content":"# CSS\n\n> 层叠样式表（英语：Cascading Style Sheets，缩写：CSS；又称串样式列表、级联样式表、串接样式表、阶层式样式表）是一种用来为结构化文档（如HTML文档或XML应用）添加样式（字体、间距和颜色等）的计算机语言，由W3C定义和维护。当前最新版本是CSS2.1，为W3C的推荐标准。CSS3现在已被大部分现代浏览器支持，而下一版的CSS4仍在开发中。\n\n## 语法规则\n\n### At规则\n\n- @charset ：<https://www.w3.org/TR/css-syntax-3/>\n- @import ：<https://www.w3.org/TR/css-cascade-4/>\n- @media ：<https://www.w3.org/TR/css3-conditional/>\n- @page ：<https://www.w3.org/TR/css-page-3/>\n- @counter-style ：<https://www.w3.org/TR/css-counter-styles-3>\n- @keyframes ：<https://www.w3.org/TR/css-animations-1/>\n- @fontface ：<https://www.w3.org/TR/css-fonts-3/>\n- @supports ：<https://www.w3.org/TR/css3-conditional/>\n- @namespace ：<https://www.w3.org/TR/css-namespaces-3/>\n\n### 选择器\n\n- <https://www.w3.org/TR/selectors-4/>\n\n![2022630152944](/assets/2022630152944.webp)\n\n选择器的作用：找到特定的HTML页面元素\n\n#### namespace\n\nsvg 和 HTML 中都有 a 元素，我们若要想区分选择 svg 中的 a 和 HTML 中的 a，就必须用带命名空间的类型选择器\n\n```css\n@namespace svg url(http://www.w3.org/2000/svg);\n@namespace html url(http://www.w3.org/1999/xhtml);\nsvg|a {\n  stroke:blue;\n  stroke-width:1;\n}\n\nhtml|a {\n  font-size:40px\n}\n```\n\n#### 基础选择器\n\n选择器    | 作用              | 缺点           | 使用情况  | 用法\n------ | --------------- | ------------ | ----- | --------------------\n标签选择器  | 可以选出所有相同的标签，比如p | 不能差异化选择      | 较多    | p { color：red;}\n类选择器   | 可以选出1个或者多个标签    | 可以根据需求选择     | 非常多   | .nav { color: red; }\nid选择器  | 一次只能选择器1个标签     | 只能使用一次       | 不推荐使用 | #nav {color: red;}\n通配符选择器 | 选择所有的标签         | 选择的太多，有部分不需要 | 不推荐使用 | * {color: red;}\n\n##### 标签选择器\n\n```css\n标签名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }\n```\n\n```css\np {\n    font-size:14px;\n}\n```\n\n##### 类选择器\n\n```css\n.类名  {   \n    属性1:属性值1; \n    属性2:属性值2; \n    属性3:属性值3;     \n}\n```\n\n```html\n<p class='类名'></p>\n```\n\n- 多类名\n\n```html\n<p class='class1 class2'></p>\n```\n\n##### ID选择器\n\n```css\n#id名 {属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }\n```\n\n```html\n<p id=\"id名\"></p>\n```\n\n- ID选择器与类选择器\n\n  - 类选择器我们在修改样式中，用的最多。\n  - id选择器一般用于页面唯一性的元素身上，经常和我们后面学习的javascript 搭配使用。\n\n##### 通配符选择器\n\n```css\n* { 属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }\n```\n\n```css\n* {\n  margin: 0;                    /* 定义外边距*/\n  padding: 0;                   /* 定义内边距*/\n}\n```\n\n## 复合选择器\n\n### 后代选择器\n\n- 后代选择器又称为包含选择器\n\n```css\n父级 子级{属性:属性值;属性:属性值;}\n```\n\n```css\n.class h3{color:red;font-size:16px;}\n```\n\n### 子元素选择器\n\n- 子元素选择器只能选择作为某元素**子元素(直接子元素)**的元素\n\n```css\n.class>h3{color:red;font-size:14px;}\n```\n\n### 交集选择器\n\n```css\n/* 选择标签是p且类名是one的元素 */\np.one{color:red}\n```\n\n### 并集选择器\n\n```css\n/*  .one 和 p  和 #test 这三个选择器都会执行颜色为红色。   */\n.one, p , #test {color: #F00;}\n```\n\n### 链接伪类选择器\n\n```css\na:link      /* 未访问的链接 */\na:visited   /* 已访问的链接 */\na:hover     /* 鼠标移动到链接上 */\na:active    /* 选定的链接 */\n```\n\n- 写的时候，他们的顺序尽量不要颠倒 按照 lvha 的顺序。否则可能引起错误\n\n### 符合选择器总结\n\n选择器     | 作用           | 特征         | 使用情况 | 隔开符号及用法\n------- | ------------ | ---------- | ---- | --------------------------\n后代选择器   | 用来选择元素后代     | 是选择所有的子孙后代 | 较多   | 符号是**空格** .nav a\n子代选择器   | 选择 最近一级元素    | 只选亲儿子      | 较少   | 符号是 **>** .nav>p\n交集选择器   | 选择两个标签交集的部分  | 既是 又是      | 较少   | **没有符号** p.one\n并集选择器   | 选择某些相同样式的选择器 | 可以用于集体声明   | 较多   | 符号是**逗号** .nav, .header\n链接伪类选择器 | 给链接更改状态      |            | 较多   | 重点记住 a{} 和 a:hover 实际开发的写法\n\n### 属性和值\n\n属性不允许使用连续的两个中划线开头，这样的属性会被认为是 CSS 变量\n\n值可能是以下类型：\n\n- CSS 范围的关键字：initial，unset，inherit，任何属性都可以的关键字。\n- 字符串：比如 content 属性。\n- URL：使用 url() 函数的 URL 值。\n- 整数 / 实数：比如 flex 属性。\n- 维度：单位的整数 / 实数，比如 width 属性。\n- 百分比：大部分维度都支持。颜色：比如 background-color 属性。\n- 图片：比如 background-image 属性。\n- 2D 位置：比如 background-position 属性。\n- 函数：来自函数的值，比如 transform 属性。\n\n## 书写规范\n\n[BEM规范](https://juejin.cn/post/6844903672162304013)\n\n- 空格规范\n\n```css\n/*  选择器 与 { 之间必须包含空格。 */\n.selector {\n  /* 属性名 与之后的 : 之间不允许包含空格， : 与 属性值 之间必须包含空格 */\n  font-size: 12px;\n}\n```\n\n- 选择器规范\n\n```css\n/*  并集选择器，每个选择器声明必须独占一行 */\n.post,\n.page,\n.comment {\n    line-height: 1.5;\n}\n```\n一般情况情况下，选择器的嵌套层级应不大于 3 级，位置靠后的限定条件应尽可能精确\n\n- 属性规范\n\n```css\n/* 属性定义必须另起一行。 */\n.selector {\n    margin: 0;\n    padding: 0;\n    /* 属性定义后必须以分号结尾。 */\n}\n```\n\n## 使用方式\n\n- 内联\n\n```html\n<标签名 style=\"属性1:属性值1; 属性2:属性值2; 属性3:属性值3;\"> 内容 </标签名>\n```\n\n- 内嵌\n\n```html\n<head>\n<style type=\"text/CSS\">\n    选择器（选择的标签） { \n      属性1: 属性值1;\n      属性2: 属性值2; \n      属性3: 属性值3;\n    }\n</style>\n</head>\n```\n\n- 外联\n\n```html\n<head>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"css文件路径\">\n</head>\n```\n\n属性   | 作用\n---- | :-------------------------------------------------------\nrel  | 定义当前文档与被链接文档之间的关系，在这里需要指定为\"stylesheet\"，表示被链接的文档是一个样式表文件。\ntype | 定义所链接文档的类型，在这里需要指定为\"text/CSS\"，表示链接的外部文件为CSS样式表。我们都可以省略\nhref | 定义所链接外部样式表文件的URL，可以是相对路径，也可以是绝对路径。\n\n- 比较\n\n样式表   | 优点           | 缺点           | 使用情况    | 控制范围\n----- | ------------ | ------------ | ------- | ---------\n行内样式表 | 书写方便，权重高     | 没有实现样式和结构相分离 | 较少      | 控制一个标签（少）\n内部样式表 | 部分结构和样式相分离   | 没有彻底分离       | 较多      | 控制一个页面（中）\n外部样式表 | 完全实现结构和样式相分离 | 需要引入         | 最多，强烈推荐 | 控制整个站点（多）\n\n## 三大特性\n\n### 层叠性\n\n所谓层叠性是指多种CSS样式的叠加。\n\n样式冲突，遵循的原则是**就近原则。** 那个样式离着结构近，就执行那个样式。\n\n### 继承性\n\n子元素可以继承父元素的样式（**text-，font-，line-这些元素开头的可以继承，以及color属性**）\n\n### 优先级\n\n选择器列表是用逗号分隔的复杂选择器序列；复杂选择器则是用空格、大于号、波浪线等符号连接的复合选择器；复合选择器则是连写的简单选择器组合\n\n- 第一优先级：无连接符号\n- 第二优先级\n  - “空格”\n  - “~”\n  - “+”\n  - “>”\n  - “||”\n- 第三优先级：“,”\n\n| 标签选择器             | 计算权重公式 |\n| ---------------------- | ------------ |\n| 继承或者 *             | 0,0,0,0      |\n| 每个元素（标签选择器） | 0,0,0,1      |\n| 每个类，伪类           | 0,0,1,0      |\n| 每个ID                 | 0,1,0,0      |\n| 每个行内样式 style=\"\"  | 1,0,0,0      |\n| 每个!important  重要的 | ∞ 无穷大     |\n\n- 权重叠加\n  - div ul  li   ------>      0,0,0,3\n  - .nav ul li   ------>      0,0,1,2\n  - a:hover      -----—>   0,0,1,1\n  - .nav a       ------>      0,0,1,1\n\n## 排版\n\n### 标签显式模式\n\n> 标签以什么方式进行显示，比如div 自己占一行， 比如span 一行可以放很多个\n\n元素模式  | 元素排列        | 设置样式        | 默认宽度     | 包含\n----- | ----------- | ----------- | -------- | ------------\n块级元素  | 一行只能放一个块级元素 | 可以设置宽度高度    | 容器的100%  | 容器级可以包含任何标签\n行内元素  | 一行可以放多个行内元素 | 不可以直接设置宽度高度 | 它本身内容的宽度 | 容纳文本或则其他行内元素\n行内块元素 | 一行放多个行内块元素  | 可以设置宽度和高度   | 它本身内容的宽度\n\n#### 块级元素(block-level)\n\n```\n常见的块元素有<h1>~<h6>、<p>、<div>、<ul>、<ol>、<li>等，其中<div>标签是最典型的块元素。\n```\n\n（1）比较霸道，自己独占一行\n\n（2）高度，宽度、外边距以及内边距都可以控制。\n\n（3）宽度默认是容器（父级宽度）的100%\n\n（4）是一个容器及盒子，里面可以放行内或者块级元素。\n\n- 文字类块标签里面不能放其他块元素\n\n#### 行内元素(inline-level)\n\n```\n常见的行内元素有<a>、<strong>、<b>、<em>、<i>、<del>、<s>、<ins>、<u>、<span>等，其中<span>标签最典型的行内元素。有的地方也成内联元素\n```\n\n（1）相邻行内元素在一行上，一行可以显示多个。\n\n（2）高、宽直接设置是无效的。\n\n（3）默认宽度就是它本身内容的宽度。\n\n（4）**行内元素只能容纳文本或则其他行内元素。**\n\n#### 行内块元素（inline-block）\n\n```\n在行内元素中有几个特殊的标签——<img />、<input />、<td>，可以对它们设置宽高和对齐属性，有些资料可能会称它们为行内块元素。\n```\n\n（1）和相邻行内元素（行内块）在一行上,但是之间会有空白缝隙。一行可以显示多个 （2）默认宽度就是它本身内容的宽度。 （3）高度，行高、外边距以及内边距都可以控制。\n\n#### 标签显示模式转换 display\n\n- 块转行内：display:inline;\n- 行内转块：display:block;\n- 块、行内元素转换为行内块： display: inline-block;\n\n### 行高\n\n![行高的测量](/assets/202339153741.png)\n\n实现文本垂直居中：\n\n- 如果 行高 等 高度  文字会 垂直居中\n- 如果行高 大于 高度   文字会 偏下 \n- 如果行高小于高度   文字会  偏上\n\n### 正常流\n\n- 依次排列，排不下了换行\n\n正常流基础上，有 float 相关规则，使得一些盒占据了正常流需要的空间，可以把 float 理解为“文字环绕”\n\n还有 vertical-align 相关规则规定了如何在垂直方向对齐盒\n\n#### 原理\n\n- 当遇到块级盒：排入块级格式化上下文（也就是会换行）\n- 当遇到行内级盒或者文字：首先尝试排入行内级格式化上下文，如果排不下，那么创建一个行盒，先将行盒排版（行盒是块级，所以到第一种情况），行盒会创建一个行内级格式化上下文\n- 遇到 float 盒：把盒的顶部跟当前行内级上下文上边缘对齐，然后根据 float 的方向把盒的对应边缘对到块级格式化上下文的边缘，之后重排当前行盒\n\n#### 文字排版\n\n![横向文字](/assets/20227516362.webp)\n\n![纵向文字](/assets/202275163637.webp)\n\n多数元素被当作长方形盒来排版，而只有 display 为 inline 的元素，是被拆成文本来排版的\n\n#### 盒子模型\n\n一个盒具有 margin、border、padding、width/height 等属性，它在主轴方向占据的空间是由对应方向的这几个属性之和决定的，而 vertical-align 属性决定了盒在交叉轴方向的位置，同时也会影响实际行高\n\n![盒子模型](/assets/202339153612.gif)\n\n##### 盒子边框（border）\n\n```css\nborder : border-width || border-style || border-color\n```\n\n属性           |      作用\n------------ | :----------:\nborder-width | 定义边框粗细，单位是px\nborder-style |    边框的样式\nborder-color |     边框颜色\n\n边框写法总结：\n\n上边框                  | 下边框                      | 左边框                   | 右边框\n:------------------- | :----------------------- | :-------------------- | :---------------------\nborder-top-style:样式; | border-bottom-style:样式;  | border-left-style:样式; | border-right-style:样式;\nborder-top-width:宽度; | border- bottom-width:宽度; | border-left-width:宽度; | border-right-width:宽度;\nborder-top-color:颜色; | border- bottom-color:颜色; | border-left-color:颜色; | border-right-color:颜色;\nborder-top:宽度 样式 颜色; | border-bottom:宽度 样式 颜色;  | border-left:宽度 样式 颜色; | border-right:宽度 样式 颜色;\n\n- 边框合并\n\n```css\nborder-collapse:collapse;\n```\n\n##### 内边距（padding）\n\n- padding属性用于设置内边距。 **是指 边框与内容之间的距离。**\n\n属性             | 作用\n-------------- | :---\npadding-left   | 左内边距\npadding-right  | 右内边距\npadding-top    | 上内边距\npadding-bottom | 下内边距\n\n- 盒子会变大\n\n简写：\n\n值的个数 | 表达意思\n---- | ------------------------------\n1个值  | padding：上下左右内边距;\n2个值  | padding: 上下内边距 左右内边距 ；\n3个值  | padding：上内边距 左右内边距 下内边距；\n4个值  | padding: 上内边距 右内边距 下内边距 左内边距 ；\n\n内盒尺寸计算（元素实际大小）：\n\n- 盒子的实际的大小 =  内容的宽度和高度 +  内边距   +  边框   \n- Element Width = content width + padding + border \n- Element Height = content height + padding + border \n\n内边距产生的问题：\n\n- 会撑大原来的盒子\n  - 通过给设置了宽高的盒子，减去相应的内边距的值，维持盒子原有的大小\n- 如果没有给一个盒子指定宽度， 此时，如果给这个盒子指定padding， 则不会撑开盒子。\n\n##### 外边距（margin）\n\n- margin属性用于设置外边距。  margin就是控制**盒子和盒子之间的距离**\n\n| 属性          | 作用     |\n| ------------- | :------- |\n| margin-left   | 左外边距 |\n| margin-right  | 右外边距 |\n| margin-top    | 上外边距 |\n| margin-bottom | 下外边距 |\n\nmargin值的简写 （复合写法）代表意思  跟 padding 完全相同。\n\n块级盒子水平居中：\n\n- 盒子必须指定了宽度（width）\n- 然后就给**左右的外边距都设置为auto**\n\n```css\ndiv {\n          width:600px;\n          height: 500px;\n          background-color: skyblue;\n          margin: 0 auto;\n} \n```\n\n文字居中和盒子居中区别：\n\n```css\ntext-align: center; /*  文字 行内元素 行内块元素水平居中 */\nmargin: 10px auto;  /* 块级盒子水平居中  左右margin 改为 auto 就可以了 上下margin都可以 */\n```\n\n插入图片和背景图片区别：\n\n1. 插入图片 我们用的最多 比如产品展示类  移动位置只能靠盒模型 padding margin\n2. 背景图片我们一般用于小图标背景 或者 超大背景图片  背景图片 只能通过  background-position\n\n清除元素的默认内外边距：\n\n```css\n* {\n   padding:0;         /* 清除内边距 */\n   margin:0;          /* 清除外边距 */\n}\n```\n\n外边距合并：\n\n- 使用margin定义块元素的**垂直外边距**时，可能会出现外边距的合并。\n-  嵌套块元素垂直外边距的合并（塌陷）\n   - 可以为父元素定义上边框。\n   - 可以为父元素定义上内边距\n   - 可以为父元素添加overflow:hidden。\n\n子元素将父元素拉了下来：\n\n当为子元素指定margin-top时，父元素也被带下来了\n\n解决这个问题的方式可以为父元素指定`overflow:auto`\n\n##### 盒子模型布局稳定性\n\n使用优先级：width >  padding  >   margin   \n\n##### 圆角边框(CSS3)\n\n```css\nborder-radius:length;  \n```\n\n##### 盒子阴影(CSS3)\n\n```css\nbox-shadow:水平阴影 垂直阴影 模糊距离（虚实）  阴影尺寸（影子大小）  阴影颜色  内/外阴影；\n```\n\n### 定位\n\n将盒子**定**在某一个**位**置 自由的漂浮在其他盒子(包括标准流和浮动)的上面\n\n> 定位 = 定位模式 + 边偏移\n\n#### 边偏移\n\n边偏移属性    | 示例             | 描述\n-------- | :------------- | --------------------------------\n`top`    | `top: 80px`    | **顶端**偏移量，定义元素相对于其父元素**上边线的距离**。\n`bottom` | `bottom: 80px` | **底部**偏移量，定义元素相对于其父元素**下边线的距离**。\n`left`   | `left: 80px`   | **左侧**偏移量，定义元素相对于其父元素**左边线的距离**。\n`right`  | `right: 80px`  | **右侧**偏移量，定义元素相对于其父元素**右边线的距离**\n\n#### 定位模式\n\n```css\n选择器 { position: 属性值; }\n```\n\n值          |    语义\n---------- | :------:\n`static`   | **静态**定位\n`relative` | **相对**定位\n`absolute` | **绝对**定位\n`fixed`    | **固定**定位\n\n- 静态定位(static)：元素的默认定位方式\n- 相对定位(relative)：是元素**相对**于它原来在标准流中的位置来说的，原来**在标准流的区域继续占有**，后面的盒子仍然以标准流的方式对待它\n- 绝对定位(absolute)\n  - **绝对定位**是元素以带有定位的父级元素来移动位置\n  - **完全脱标** ---- 完全不占位置\n  - **父元素没有定位**，则元素依据最近的已经定位（绝对、固定或相对定位）的父元素（祖先）进行定位\n\n> **子绝父相** ---- **子级**是**绝对**定位，**父级**要用**相对**定位。\n\n- 固定定位(fixed)\n  - **完全脱标** ---- 完全不占位置\n  - 只认**浏览器的可视窗口** ---- `浏览器可视窗口 + 边偏移属性` 来设置元素的位置\n  - 不随滚动条滚动\n\n#### 居中\n\n> **绝对定位/固定定位的盒子**不能通过设置 `margin: auto` 设置**水平居中**。\n\n1. `left: 50%;`：让**盒子的左侧**移动到**父级元素的水平中心位置**；\n2. `margin-left: -100px;`：让盒子**向左**移动**自身宽度的一半**。\n\n#### 堆叠顺序（z-index）\n\n加了定位的盒子，默认**后来者居上**， 后面的盒子会压住前面的盒子\n\n```css\nselector {\n    z-index: value;\n}\n```\n\n**属性值**：**正整数**、**负整数**或 **0**，默认值是 0，数值越大，盒子越靠上\n\n`z-index` 只能应用于**相对定位**、**绝对定位**和**固定定位**的元素，其他**标准流**、**浮动**和**静态定位**无效\n\n#### 定位改变display属性\n\n一个行内的盒子，如果加了**浮动**、**固定定位**和**绝对定位**，不用转换，就可以给这个盒子直接设置宽度和高度等\n\n给盒子改为了浮动或者定位，就不会有垂直外边距合并的问题了\n\n## 总结\n\n定位模式         | 是否脱标占有位置   | 移动位置基准      | 模式转换（行内块） | 使用情况\n------------ | ---------- | :---------- | --------- | ------------\n静态static     | 不脱标，正常模式   | 正常模式        | 不能        | 几乎不用\n相对定位relative | 不脱标，占有位置   | 相对自身位置移动    | 不能        | 基本单独使用\n绝对定位absolute | 完全脱标，不占有位置 | 相对于定位父级移动位置 | 能         | 要和定位父级元素搭配使用\n固定定位fixed    | 完全脱标，不占有位置 | 相对于浏览器移动位置  | 能         | 单独使用，不需要父级\n\n\n\n### 浮动元素排版\n\n对 float 的处理是先排入正常流，再移动到排版宽度的最左 / 最右（这里实际上是主轴的最前和最后）\n\n元素的浮动是指**设置了浮动属性的元素**会\n\n- 脱离标准普通流的控制\n- 移动到指定位置\n\n作用：\n\n- **让多个盒子(div)水平排列成一行**，使得浮动成为布局的重要手段。\n- 可以实现盒子的左右对齐等等..\n- 浮动最早是用来**控制图片**，实现**文字环绕图片的效果**。\n\n语法：\n\n```css\n选择器 { float: 属性值; }\n```\n\n属性值       | 描述\n--------- | --------------\n**none**  | 元素不浮动（**默认值**）\n**left**  | 元素向**左**浮动\n**right** | 元素向**右**浮动\n\n特性：\n\n`float` 属性会让盒子漂浮在标准流的上面,并且不占有原来位置\n\n任何元素都可以浮动。浮动元素会生成一个块级框，生成的块级框和我们前面的行内块极其相似\n\n使用浮动的核心目的----让多个块级盒子在同一行显示\n\n特点 | 说明\n-- | -------------------------------------------------\n浮  | 加了浮动的盒子**是浮起来**的，漂浮在其他标准流盒子的上面。\n漏  | 加了浮动的盒子**是不占位置的**，它原来的位置**漏给了标准流的盒子**。\n特  | **特别注意**：浮动元素会改变display属性， 类似转换为了行内块，但是元素之间没有空白缝隙\n\n扩展：\n\n- 子盒子的浮动参照父盒子对齐\n- 不会与父盒子的边框重叠，也不会超过父盒子的内边距\n- 浮动只会影响当前的或者是后面的标准流盒子，不会影响前面的标准流\n\n清除浮动：\n\n父级盒子很多情况下，不方便给高度，但是子盒子浮动就不占有位置，最后父级盒子高度为0，导致排版出现问题\n\n**清除浮动主要为了解决父级元素因为子级浮动引起内部高度为0 的问题。清除浮动之后， 父级就会根据浮动的子盒子自动检测高度。父级有了高度，就不会影响下面的标准流了**\n\n```css\n选择器{clear:属性值;}\n```\n\n属性值   | 描述\n----- | ---------------------\nleft  | 不允许左侧有浮动元素（清除左侧浮动的影响）\nright | 不允许右侧有浮动元素（清除右侧浮动的影响）\nboth  | 同时清除左右两侧浮动的影响\n\n- 额外标签法\n\n```html\n<div class=\"left\"></div>\n<div class=\"right\"></div>\n<div style=\"clear: both;\"></div>\n```\n\n- 父级添加overflow\n\n- after伪元素\n\n```css\n .clearfix:after {  content: \"\"; display: block; height: 0; clear: both; visibility: hidden;  }   \n\n .clearfix {*zoom: 1;}   /* IE6、7 专有 */\n```\n\n- 双伪元素\n\n```css\n.clearfix:before,.clearfix:after { \n  content:\"\";\n  display:table; \n}\n.clearfix:after {\n clear:both;\n}\n.clearfix {\n  *zoom:1;\n}\n```\n\n| 清除浮动的方式       | 优点               | 缺点                               |\n| -------------------- | :----------------- | :--------------------------------- |\n| 额外标签法（隔墙法） | 通俗易懂，书写方便 | 添加许多无意义的标签，结构化较差。 |\n| 父级overflow:hidden; | 书写简单           | 溢出隐藏                           |\n| 父级after伪元素      | 结构语义化正确     | 由于IE6-7不支持:after，兼容性问题  |\n| 父级双伪元素         | 结构语义化正确     | 由于IE6-7不支持:after，兼容性问题  |\n\n## 颜色\n\n- RGB，符合光谱三原色理论：红、绿、蓝三种颜色的光可以构成所有的颜色，使用三个整数来表示\n- RGBA： 是代表 Red（红色）、Green（绿色）、Blue（蓝色）和 Alpha 的色彩空间\n- CMYK：在印刷行业，使用的就是这样的三原色（品红、黄、青）来调配油墨，这种颜色的表示法叫做 CMYK，它用一个四元组来表示颜色，三原色调配黑色，经济上是不划算的，所以印刷时会单独指定黑色\n- HSL：用一个值来表示人类认知中的颜色，我们用专业的术语叫做色相（H）。加上颜色的纯度（S）和明度（L），就构成了一种颜色的表示\n\n### 渐变\n\n```css\n/* 线性渐变 */\nlinear-gradient(direction, color-stop1, color-stop2, ...);\n/* 放射性渐变 */\nradial-gradient(shape size at position, start-color, ..., last-color);\n```\n\n## 字体样式\n\n### 单位\n\n- 绝对长度\n\n单位 | 描述\n-- | ------------------------\ncm | 厘米\nmm | 毫米\nin | 英寸 (1in = 96px = 2.54cm)\npx | 像素 (1px = 1/96th of 1in)\npt | 点 (1pt = 1/72 of 1in)\npc | 派卡 (1pc = 12 pt)\n\n- 相对长度\n\n单位   | 描述\n---- | ----------------------------------------\nem   | 相对于元素的字体大小（font-size）（2em 表示当前字体大小的 2 倍）\nex   | 相对于当前字体的 x-height(极少使用)\nch   | 相对于 \"0\"（零）的宽度\nrem  | 相对于根元素的字体大小（font-size）\nvw   | 相对于视口*宽度的 1%\nvh   | 相对于视口*高度的 1%\nvmin | 相对于视口*较小尺寸的 1％\nvmax | 相对于视口*较大尺寸的 1％\n%    | 相对于父元素\n\n### 字体样式相关属性\n\n属性          | 表示   | 注意点\n:---------- | :--- | :----------------------------------------------\nfont-size   | 字号   | 我们通常用的单位是px 像素，一定要跟上单位\nfont-family | 字体   | 实际工作中按照团队约定来写字体\nfont-weight | 字体粗细 | 记住加粗是 700 或者 bold 不加粗 是 normal 或者 400 记住数字不要跟单位\nfont-style  | 字体样式 | 记住倾斜是 italic 不倾斜 是 normal 工作中我们最常用 normal\nfont        | 字体连写 | 1\\. 字体连写是有顺序的 不能随意换位置 2\\. 其中字号 和 字体 必须同时出现\n\n- font-size:大小\n\n```css\np {  \n    font-size:20px; \n}\n```\n\n- font-family:字体\n\n```css\np{ font-family:\"微软雅黑\";}\n/* 可以同时指定多个字体，按从左到右选择 */\np{font-family: Arial,\"Microsoft Yahei\", \"微软雅黑\";}\n```\n\nCSS Unicode字体\n\n```css\n/* 表示设置字体为“微软雅黑”。 */\nfont-family: \"\\5FAE\\8F6F\\96C5\\9ED1\";\n```\n\n- font-weight:字体粗细\n\n属性值     | 描述\n------- | :--------------------------------------\nnormal  | 默认值（不加粗的）\nbold    | 定义粗体（加粗的）\n100~900 | 400 等同于 normal，而 700 等同于 bold 我们重点记住这句话\n\n- font-style:字体风格\n\n属性     | 作用\n------ | :------------------------------------\nnormal | 默认值，浏览器会显示标准的字体样式 font-style: normal;\nitalic | 浏览器会显示斜体的字体样式。\n\n- font:综合设置字体样式\n\n```css\nfont: 加粗 字号/行高/ 字体\n```\n\n```css\nfont: 400 14px/24px \"宋体\";\n```\n\n### 字体外观相关属性\n\n- 颜色\n\n表示表示    | 属性值\n:------ | :---------------------------\n预定义的颜色值 | red，green，blue，还有我们的御用色 pink\n十六进制    | #FF0000，#FF6600，#29D794\nRGB代码   | rgb(255,0,0)或rgb(100%,0%,0%)\n\n- color:文本颜色\n\n- text-align:文本水平对齐方式\n\n属性     |    解释\n------ | :------:\nleft   | 左对齐（默认值）\nright  |   右对齐\ncenter |   居中对齐\n\n- line-height:行间距\n\n```css\n/* 一般情况下，行距比字号大7.8像素左右就可以了。 */\nline-height: 24px;\n```\n\n- text-indent:首行缩进\n\n```css\n/*首行缩进2个字  em  1个em 就是1个字的大小*/\ntext-indent: 2em;\n```\n\n- text-decoration 文本的装饰\n\n值            | 描述\n------------ | ---------------------------\nnone         | 默认。定义标准的文本。 取消下划线（最常用）\nunderline    | 定义文本下的一条线。下划线 也是我们链接自带的（常用）\noverline     | 定义文本上的一条线。（不用）\nline-through | 定义穿过文本下的一条线。（不常用）\n\n## 背景\n\n| 属性                  | 作用             | 值                                                           |\n| --------------------- | :--------------- | :----------------------------------------------------------- |\n| background-color      | 背景颜色         | 预定义的颜色值/十六进制/RGB代码                              |\n| background-image      | 背景图片         | url(图片路径)                                                |\n| background-repeat     | 是否平铺         | repeat/no-repeat/repeat-x/repeat-y                           |\n| background-position   | 背景位置         | length/position    分别是x  和 y坐标， 切记 如果有 精确数值单位，则必须按照先X 后Y 的写法 |\n| background-attachment | 背景固定还是滚动 | scroll/fixed                                                 |\n| 背景简写              | 更简单           | 背景颜色 背景图片地址 背景平铺 背景滚动 背景位置;  他们没有顺序 |\n| 背景透明              | 让盒子半透明     | background: rgba(0,0,0,0.3);   后面必须是 4个值              |\n\n### 背景颜色\n\n```css\n/* 默认的值是 transparent  透明的 */\nbackground-color:颜色值;\n```\n\n### 背景图片(image)\n\n参数   | 作用\n---- | ---------------\nnone | 无背景图（默认的）\nurl  | 使用绝对或相对地址指定背景图像\n\n```css\nbackground-image : url(images/demo.png);\n```\n\n### 背景平铺（repeat）\n\n参数        | 作用\n--------- | :-----------------\nrepeat    | 背景图像在纵向和横向上平铺（默认的）\nno-repeat | 背景图像不平铺\nrepeat-x  | 背景图像在横向上平铺\nrepeat-y  | 背景图像在纵向平铺\n\n### 背景位置(position)\n\n```css\nbackground-position : length || length\nbackground-position : position || position\n```\n\n| 参数     | 值                                                           |\n| -------- | :----------------------------------------------------------- |\n| length   | 百分数 \\| 由浮点数字和单位标识符组成的长度值                 |\n| position | top \\| center \\| bottom \\| left \\| center \\| right   方位名词 |\n\n- 必须先指定background-image属性\n- position 后面是x坐标和y坐标。 可以使用方位名词或者 精确单位。\n- 如果指定两个值，两个值都是方位名字，则两个值前后顺序无关，比如left  top和top  left效果一致\n- 如果只指定了一个方位名词，另一个值默认居中对齐。\n- 如果position 后面是精确坐标， 那么第一个，肯定是 x  第二的一定是y\n- 如果只指定一个数值,那该数值一定是x坐标，另一个默认垂直居中\n- 如果指定的两个值是 精确单位和方位名字混合使用，则第一个值是x坐标，第二个值是y坐标\n\n### 背景附着\n\n```css\nbackground-attachment : scroll | fixed \n```\n\n| 参数   |           作用           |\n| ------ | :----------------------: |\n| scroll | 背景图像是随对象内容滚动 |\n| fixed  |       背景图像固定       |\n\n### 背景简写\n\n```css\nbackground: 背景颜色 背景图片地址 背景平铺 背景滚动 背景位置;\n```\n\n### 背景透明(CSS3)\n\n```css\nbackground: rgba(0, 0, 0, 0.3);\n```\n\n## 高级技巧\n\n### 元素的显示与隐藏\n\n#### display 显示\n\n```css\n/* 隐藏对象 */\ndisplay: none\n```\n\n- 特点： 隐藏之后，不再保留位置。\n\n> 配合后面js做特效，比如下拉菜单，原先没有，鼠标经过，显示下拉菜单， 应用极为广泛\n\n#### visibility 可见性\n\n```css\n/* 对象可视 */\nvisibility：visible ; 　\n/* 对象隐藏 */\nvisibility：hidden;\n```\n\n- 特点： 隐藏之后，继续保留原有位置。\n\n#### overflow 溢出\n\n- 检索或设置当对象的内容超过其指定高度及宽度时如何管理内容\n\n属性值         | 描述\n----------- | ---------------------\n**visible** | 不剪切内容也不添加滚动条\n**hidden**  | 不显示超过对象尺寸的内容，超出的部分隐藏掉\n**scroll**  | 不管超出内容否，总是显示滚动条\n**auto**    | 超出自动显示滚动条，不超出不显示滚动条\n\n应用：\n\n1. 清除浮动\n2. 隐藏超出内容，隐藏掉, 不允许内容超过父盒子。\n\n### 总结\n\n属性             | 区别          | 用途\n-------------- | ----------- | -----------------------------------------\n**display**    | 隐藏对象，不保留位置  | 配合后面js做特效，比如下拉菜单，原先没有，鼠标经过，显示下拉菜单， 应用极为广泛\n**visibility** | 隐藏对象，保留位置   | 使用较少\n**overflow**   | 只是隐藏超出大小的部分 | 1\\. 可以清除浮动 2\\. 保证盒子里面的内容不会超出该盒子范围\n\n###  CSS用户界面样式\n\n####  鼠标样式cursor\n\n设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状\n\n```css\na:hover {\n    cursor: value;\n}\n```\n\n | 属性值          | 描述       |\n| --------------- | ---------- |\n| **default**     | 小白  默认 |\n| **pointer**     | 小手       |\n| **move**        | 移动       |\n| **text**        | 文本       |\n| **not-allowed** | 禁止       |\n\n#### 轮廓线 outline\n\n```css\noutline : outline-color ||outline-style || outline-width \n```\n\n```css\noutline : outline-color ||outline-style || outline-width \n```\n\n一般都直接去掉:\n\n```css\noutline: 0;\noutline: none;\n```\n\n#### 防止拖拽文本域resize\n\n```html\n<textarea  style=\"resize: none;\"></textarea>\n```\n\n### vertical-align 垂直对齐\n\n```css\nvertical-align : baseline |top |middle |bottom \n```\n\nvertical-align 不影响块级元素中的内容对齐，它只针对于**行内元素**或者**行内块元素**\n\n行内块元素， **通常用来控制图片/表单与文字的对齐**\n\n#### 图片、表单和文字对齐\n\n![1498467742995](/assets/1498467742995.png)\n\n#### 去除图片底侧空白缝隙\n\n图片或者表单等行内块元素，他的底线会和父级盒子的基线对齐\n\n- 给img vertical-align:middle | top| bottom等等。  让图片不要和基线对齐\n- 给img 添加 display：block; 转换为块级元素就不会存在问题了\n\n### 溢出的文字省略号显示\n\n```css\n/*1. 先强制一行内显示文本*/\n    white-space: nowrap;\n/*2. 超出的部分隐藏*/\n    overflow: hidden;\n/*3. 文字用省略号替代超出的部分*/\n    text-overflow: ellipsis;\n```\n\n### CSS精灵技术（sprite) \n\nCSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图）\n\n### 滑动门\n\n![](/assets/202339153948.png)\n\n### 扩展\n\n#### margin负值\n\n- 负边距+定位：水平垂直居中\n- 压住盒子相邻边框\n  - 需要添加浮动 \n\n#### CSS三角\n\n- 将盒子宽高设置为0，然后设置四个边框\n\n```css\ndiv {\n            width: 0;\n            height: 0;\n            border-style: solid;\n            border-width: 20px;\n            border-color: pink skyblue deepskyblue darkcyan;\n}\n```\n\n---\ntags: ['DSL', 'CSS']\n---\n\n## CSS3\n\n### 选择器\n\n#### 属性选择器\n\n选择器                 | 描述\n------------------- | ------------------\n[attribute ]        | 用于选取带有指定属性的元素。\n[attribute=value]   | 用于选取带有指定属性和值的元素。\n[attribute~=value]  | 用于选取属性值中包含指定词汇的元素。\n[attribute          | =value]            | 用于选取带有以指定值开头的属性值的元素，该值必须是整个单词。\n[attribute^=valuel  | 匹配属性值以指定值开头的每个元素。\n[attribute$ =value] | 匹配属性值以指定值结尾的每个元素。\n[attribute* =value] | 匹配属性值中包含指定值的每个元素。\n\n```css\ninput[type=search] {\n  color: skyblue;\n}\n``` \n\n#### 结构伪类选择器\n\n伪类元素选择器               | 说明\n--------------------- | ----------------------------------------------------------------------\nE:first-line          | 选择某标签中第一行的元素\nE:first-letter        | 伪类选择器将某标签中第一行的元素首字符\nE:before              | 伪类选择器:将某标签之前加入内容\nE:after               | 伪类选择器将某标签之后加入内容\nE:root                | 将样式绑定到页面根元素中\nE:not                 | 对某个结构元素使用样式但想排除结构下的子结构元素\nE:empty               | 指定当元素样式为空白时使用的样式\nE.target              | 对页面中target元素指定样式此样式只在用户点击了页面中的链接，并且跳转到target元素后才生效\nE:first-child         | 选择同级别此元素的第一个元素\nE:last-child          | 选择同级别此元素的最后一个元素\nE:nth-child           | 对元素中指定序号的子元素设置样式(正数)，:nth-child(n)/nth-child(odd/even) -奇/偶数\nE:nth-last-child      | 对元素中指定序号的子元素设置样式(倒数)，nth-last- child(n)- nth-last-child(odd/even)-奇/偶数\nE:nth-of-type(n)      | 与nth-childO作用类似，但是仅匹配使用同种标签的元素:\nE:nth-last-of-type(n) | 与nth-last-child作用类似但是仅匹配使用同种标签的元素\nE:nth-child(an+b)     | a表示每次循环中包括几张样式b表示指定的样式在循环中的所在位置\nE:only-child          | 匹配父元素下仅有的一个子元素\nE:only-of-type        | 匹配父元素 下使用同种标签的唯一个子元素\nE:enable              | 匹配表单中激活的元素\nE:disabled            | 匹配表单中禁用的元素\nE:checked             | 匹配表单中被选中的radio(单选)或checkbox(复选)元素\nE:selection           | 匹配用户当前选中的元素\n\n\n\nnth-child 详解\n\n- n 可以是数字、关键字、公式\n- n 如果是数字，就是选中第几个\n- 常见的关键字有 `even` 偶数、`odd` 奇数\n- 常见的公式如下(如果 n 是公式，则从 0 开始计算)\n- 但如果是第 0 个元素或者超出了元素的个数会被忽略\n\n`nth-child` 和  `nt-of-type` 的区别\n\n- `nth-child`  选择父元素里面的第几个子元素，不管是第几个类型\n- `nt-of-type`  选择指定类型的元素\n\n#### 伪元素选择器\n\n- ::before 在元素内部的前面插入内容\n- ::after 在元素内部的后面插入内容\n\n注意事项\n\n- `before` 和 `after` 必须有 `content` 属性\n- `before` 在内容前面，after 在内容后面\n- `before` 和 `after` 创建的是一个元素，但是属于行内元素\n- 创建出来的元素在 `Dom` 中查找不到，所以称为伪元素\n- 伪元素和标签选择器一样，权重为 1\n\n### 2D转换\n\n#### 2D转换translate\n\n- x 就是 x 轴上水平移动\n- y 就是 y 轴上水平移动\n\n```css\ntransform: translate(x, y)\ntransform: translateX(n)\ntransfrom: translateY(n)\n```\n\n- `2D` 的移动主要是指 水平、垂直方向上的移动\n- `translate` 最大的优点就是不影响其他元素的位置\n- `translate` 中的100%单位，是相对于本身的宽度和高度来进行计算的\n- 行内标签没有效果\n\n#### 2D旋转rotate\n\n`2D` 旋转指的是让元素在二维平面内顺时针或者逆时针旋转\n\n```css\ntransform: rotate(度数) \n```\n\n- rotate` 里面跟度数，单位是 `deg`\n- 角度为正时，顺时针，角度为负时，逆时针\n- 默认旋转的中心点是元素的中心点\n\n#### 设置元素旋转中心点(transform-origin)\n\n```css\ntransform-origin: x y;\n```\n\n- 注意后面的参数 x 和 y 用空格隔开\n- x y 默认旋转的中心点是元素的中心 (50% 50%)，等价于 `center`  `center`\n- 还可以给 x y 设置像素或者方位名词(`top`、`bottom`、`left`、`right`、`center`)\n\n#### `2D` 转换之 `scale`\n\n用来控制元素的放大与缩小\n\n```css\ntransform: scale(x, y)\n```\n\n- 注意，x 与 y 之间使用逗号进行分隔\n- `transform: scale(1, 1)`: 宽高都放大一倍，相当于没有放大\n- `transform: scale(2, 2)`: 宽和高都放大了二倍\n- `transform: scale(2)`: 如果只写了一个参数，第二个参数就和第一个参数一致\n- `transform:scale(0.5, 0.5)`: 缩小\n- `scale` 最大的优势：可以设置转换中心点缩放，默认以中心点缩放，而且不影响其他盒子\n\n#### 综合写法\n\n- 同时使用多个转换，其格式为 `transform: translate() rotate() scale()`\n- 顺序会影响到转换的效果(先旋转会改变坐标轴方向)\n- 但我们同时有位置或者其他属性的时候，要将位移放到最前面\n\n### 动画\n\n动画是 `CSS3` 中最具颠覆性的特征之一，可通过设置多个节点来精确的控制一个或者一组动画，从而实现复杂的动画效果\n\n- 定义动画\n\n```css\n@keyframes motion {\n    0% {\n        transform: translateX(0);\n    }\n    100% {\n        transform: translateX(1000px);\n    }\n}\n```\n\n- 使用动画\n\n```css\ndiv {\n    width: 200px;\n    height: 200px;\n    background-color: skyblue;\n    animation: motion 5s;\n}\n```\n\n- 0% 是动画的开始，100 % 是动画的完成，这样的规则就是动画序列\n- 在 @keyframs 中规定某项 CSS 样式，就由创建当前样式逐渐改为新样式的动画效果\n- 动画是使元素从一个样式逐渐变化为另一个样式的效果，可以改变任意多的样式任意多的次数\n- 用百分比来规定变化发生的时间，或用 `from` 和 `to`，等同于 0% 和 100%\n\n#### 场景属性\n\n```css\ndiv {\n  width: 100px;\n  height: 100px;\n  background-color: aquamarine;\n  /* 动画名称 */\n  animation-name: move;\n  /* 动画花费时长 */\n  animation-duration: 2s;\n  /* 动画速度曲线 */\n  animation-timing-function: ease-in-out;\n  /* 动画等待多长时间执行 */\n  animation-delay: 2s;\n  /* 规定动画播放次数 infinite: 无限循环 */\n  animation-iteration-count: infinite;\n  /* 是否逆行播放 */\n  animation-direction: alternate;\n  /* 动画结束之后的状态 */\n  animation-fill-mode: forwards;\n}\n```\n\n- 简写\n\n```css\nanimation: name duration timing-function delay iteration-count direction fill-mode\n```\n\n- 简写属性里面不包含 `animation-paly-state`\n- 暂停动画 `animation-paly-state: paused`; 经常和鼠标经过等其他配合使用\n- 要想动画走回来，而不是直接调回来：`animation-direction: alternate`\n- 盒子动画结束后，停在结束位置：`animation-fill-mode: forwards` \n\n#### 贝塞尔曲线\n\n- 一种针对两个点之间变化的插值方法 k次贝塞尔曲线需要k+1个控制点\n\n**牛顿积分**\n\n### 3D转换\n\n#### 三维坐标系\n\n![202001170927](/assets/202001170927.gif)\n\n#### 3D 移动 translate3d\n\n```css\n/* 注意：x, y, z 对应的值不能省略，不需要填写用 0 进行填充 */\ntransform: translate3d(x, y, z)\n```\n\n#### 透视 perspective\n\n![202001170939](/assets/202001170939.png)\n\n**透视需要写在被视察元素的父盒子上面**\n\n```css\nbody {\n  perspective: 1000px;\n}\n```\n\n#### 3D 旋转rotate\n\n>3D 旋转指可以让元素在三维平面内沿着 x 轴、y 轴、z 轴 或者自定义轴进行旋转\n\n```css\ntransform: rotate3d(x, y, z, deg)\n```\n\n```css\nrotateY\nrotateX\nrotateZ\n/* 沿着对角线旋转 */\ntransform: rotate3d(1, 1, 0, 180deg)\n```\n\n#### 3D 呈现 transform-style\n\n- 控制子元素是否开启三维立体环境\n- `transform-style: flat`  代表子元素不开启 `3D` 立体空间，默认的\n- `transform-style: preserve-3d` 子元素开启立体空间\n\n### 浏览器私有前缀\n\n- 火狐-moz-\n- ie-ms-\n- -webkit-\n- -o-\n\n## Less\n\nLess 是一门 CSS 预处理语言，它扩展了 CSS 语言，增加了变量、Mixin、函数等特性，使 CSS 更易维护和扩展\n\n### CSS弊端\n\n- 冗余度高\n- 没有计算能力\n- 不方便维护扩展，不利于复用\n\n### 安装\n\n```shell\nnpm install -g less\n```\n\n### 使用\n\n- 变量定义与使用\n\n```less\n// 必须有@为前缀\n// 不能包含特殊字符\n// 不能以数字开头\n// 大小写敏感\n@color: pink;\n\ndiv {\n    background-color: @color;\n}\n```\n\n- 样式嵌套\n\n```less\n.header {\n    width: 200px;\n    a {\n        color: white;\n    }\n}\n// 如果遇见 （交集|伪类|伪元素选择器） ，利用&进行连接\n.header {\n    width: 200px;\n    &:hover {\n        color: white;\n    }\n}\n```\n\n- 运算\n\n任何数字、颜色或者变量都可以参与运算。就是Less提供了加（+）、减（-）、乘（*）、除（/）算术运算\n\n```less\n@width: 10px + 5;\n// 对颜色进行运算\ndiv {\n    border: @width solid red+2;\n}\n// 对宽度运算\ndiv {\n    width: (@width + 5) * 2;\n}\n```\n\n对于两个不同的单位的值之间的运算，运算结果的值取第一个值的单位\n\n## Bootstrap\n\n响应式布局：\n\n响应式需要一个父级做为布局容器，来配合子级元素来实现变化效果。\n\n原理就是在不同屏幕下，通过媒体查询来改变这个布局容器的大小，再改变里面子元素的排列方式和大小，从而实现不同屏幕下，看到不同的页面布局和样式变化\n\n### 布局容器\n\n- container：两边留白\n\n  - 响应式布局的容器 固定宽度\n  - 大屏 ( >=1200px) 宽度定为 1170px\n  - 中屏 ( >=992px) 宽度定为 970px\n  - 小屏 ( >=768px) 宽度定为 750px\n  - 超小屏 (100%)\n\n- container-fluid\n\n  - 百分百宽度\n  - 占据全部视口（viewport）的容器\n\n### 栅格系统\n\n- 按照不同屏幕划分为1~12 等份\n- 行（row） 可以去除父容器作用15px的边距\n- xs-extra small：超小； sm-small：小； md-medium：中等； lg-large：大；\n- 列（column）大于 12，多余的\"列（column）\"所在的元素将被作为一个整体另起一行排列\n- 每一列默认有左右15像素的 padding\n- 可以同时为一列指定多个设备的类名，以便划分不同份数 例如 class=\"col-md-4 col-sm-6\"\n\n栅格嵌套\n\n```html\n<!-- 列嵌套\n简单理解就是一个列内再分成若干份小列\n -->\n <div class=\"col-sm-4\">\n    <div class=\"row\">\n         <div class=\"col-sm-6\">小列</div>\n         <div class=\"col-sm-6\">小列</div>\n    </div>\n</div>\n```\n\n列偏移\n\n```html\n<div class=\"row\">\n    <div class=\"col-lg-4\">1</div>\n    <!-- 向右偏移四个列 -->\n    <div class=\"col-lg-4 col-lg-offset-4\">2</div>\n</div>\n```\n\n列排序\n\n```html\n<!-- 列排序 -->\n<div class=\"row\">\n    <!-- 向右移动8个单位 -->\n    <div class=\"col-lg-4 col-lg-push-8\">左侧</div>\n    <!-- 向左移动4个单位 -->\n    <div class=\"col-lg-8 col-lg-pull-4\">右侧</div>\n</div>\n```\n\n响应式工具\n\n使用这些工具类可以方便的针对不同设备展示或隐藏页面内容\n\n![202001220830](/assets/202001220830.jpg)\n\nvisible-* 可达到相反的效果\n\n### [文档](https://v3.bootcss.com/)\n\n","metadata":"","hasMoreCommit":false,"totalCommits":1,"commitList":[{"date":"2023-04-19T17:41:22+08:00","author":"MY","message":"📦CSS","hash":"b6dfb34c16576960933c9f8d4ccc646b5e6e7805"}],"createTime":"2023-04-19T17:41:22+08:00"}