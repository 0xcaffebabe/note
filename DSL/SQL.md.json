{"name":"SQL","id":"DSL-SQL","content":"# SQL\n\n## SQL查询语言概览\n\n- 数据定义语言（DDL）\n- 数据操纵语言（DML）\n- 完整性\n- 视图定义\n- 事务控制\n- 嵌入式SQL和动态SQL\n- 授权\n\n## SQL数据定义\n\n### 基本类型\n\n- char(n):固定长度的字符串（会追加空格）\n- varchar(n):可变长度的字符串\n- int：整数类型\n- smallint：小整数类型（和机器相关）\n- numeric(p,d):定点数，p位数，d位小数\n- real，double，precision：浮点数与双精度浮点数，精度与机器相关\n- float(n)：精度至少为n位的浮点数\n\n### 表定义\n\ncreate table 命令的通用形式\n\n```sql\nCREATE TABLE r\n(\n    A1 D1,\n    A2 D2,\n    AN DN,\n    <完整性约束1>,\n    <完整性约束K>\n);\n```\n\n示例：\n\n```sql\nCREATE TABLE department(\n    dept_name VARCHAR(20) NOT NULL,\n    building VARCHAR(15), -- 如果不指定 默认为NULL\n    budget NUMERIC(12,2) DEFAULT 999, -- 指定默认值\n    PRIMARY KEY(dept_name)\n);\n```\n\n### 表更新\n\nDBMS对表更新的约束既复杂又不统一\n\n```sql\nALTER TABLE vendors ADD vend_phone CHAR(20); -- 增加字段\nALTER TABLE vendors DROP COLUMN vend_phone; -- 删除字段\n```\n\nSQLite不支持使用ALTER TABLE 语句定义主键跟外键。在使用ALTER TABLE语句应极为小心，使用前应对表进行备份\n\n### 删除表\n\n```sql\nDROP TABLE cust_copy;\n```\n\n### 重命名表\n\nRENAME/sp_rename/ALTER TABLE\n\n#### 完整性约束\n\n- PRIMARY KEY：取值唯一\n- FOREIGN KEY:外键约束\n- NOT NULL :非空约束\n\n## SQL查询\n\n```sql\nSELECT prod_name FROM products; -- 查询单列\nSELECT prod_name, prod_price FROM products; -- 查询多列\nSELECT * FROM products; -- 检索所有列\nSELECT DISTINCT vend_id FROM products; -- 结果去重（DISTINCT作用在整行上，不针对某个具体列）\n```\n\nSQL关键字不区分大小写，但对象名区分，在不同的DBMS跟操作系统区分大小写可能会有不同。\n\n*通配符通常会降低检索性能，但好处就是能匹配未知列。\n\n- SELECT子句还可进行加减乘除运算\n- WHERE子句选出满足条件的元组\n\n### 分页\n\n不同的数据库分页不尽相同\n\n```sql\nSELECT TOP 5 * FROM products; -- SQL Server\nSELECT * FROM products FETCH FIRST 5 ROWS ONLY; -- DB2\nSELECT * FROM products WHERE ROWNUM <= 5; -- Oracle\nSELECT * FROM products LIMIT 0,5; -- MySQL\n```\n\n### 排序\n\n```sql\nSELECT * FROM products ORDER BY prod_name; -- 单列排序\nSELECT * FROM products ORDER BY prod_price, prod_name; -- 多列排序\nSELECT * FROM products ORDER BY 1,2; -- 使用列的相对位置指定排序 使用这种方式只能针对出现在SELECT中的列进行排序\nSELECT * FROM products ORDER BY prod_price DESC; -- 降序排序 默认为ASC升序排序\nSELECT * FROM products ORDER BY prod_price DESC, prod_name DESC; -- 多列降序排序需要每列都指定DESC\n```\n\n使用ORDER BY 子句时，应该保证其实SELECT 语句的最后一条子句。\n\n### 数据过滤\n\n```sql\nSELECT * FROM products WHERE prod_price=3.49;\n```\n\nWHERE子句操作符\n\n操作符      | 说明\n-------- | ------\n= or ==  | 等于\n<> or != | 不等于\n<        | 小于\n<=       | 小于等于\n!<       | 不小于\n>        | 大于\n>=       | 大于等于\n!>       | 不大于\nBETWEEN  | 在两个值之间\nIS NULL  | 为NULL值\n\n#### 高级数据过滤\n\n```sql\nSELECT * FROM products WHERE prod_price=3.49 OR prod_price = 5.99; -- 逻辑OR\nSELECT * FROM products WHERE prod_price=3.49 AND prod_price < 5.99; -- 逻辑AND\nSELECT * FROM products WHERE prod_price IN (3.49, 5.99); -- IN操作符 相比OR更清晰同时有更好的性能 也可以动态包含SELECT语句\nSELECT * FROM products WHERE NOT prod_price IN (3.49, 5.99); -- 逻辑NOT\n```\n\nSQL处理AND的优先级比OR高，所以同时使用OR和AND有必要使用括号来明确求值顺序。\n\n#### 通配符过滤\n\nLIKE 关键字：\n\n- %表示匹配任何字符（包括什么都没有，但不匹配NULL）,在ACCESS中使用*\n- _表示匹配一个字符，DB2不支持，ACCESS使用?\n\n示例：\n\n```sql\nSELECT name FROM user WHERE name LIKE 'user%'; --查找用户名以user开头的用户\n```\n\nescape :用来标志逃逸字符\n\n```sql\nLIKE 'ab\\\\cd%' escape '\\' #匹配所有以ab\\cd开头的字符串\n```\n\nSQL1999 中提供了similar to操作，语法类似于正则表达式。\n\n这些通配符匹配在一定程度上会影响性能，这点需要注意。\n\n### 计算字段\n\n```sql\n-- 字符串连接\nSELECT vend_name + '(' + vend_country + ')' AS name FROM vendors; -- Access SqlServer\nSELECT vend_name || '(' || vend_country || ')' AS name FROM vendors; -- DB2 Oracle...\nSELECT CONCAT(vend_name,'(',vend_country,')') AS name FROM vendors; -- MySQL\n```\n\n使用AS关键字被视为最佳实践。别名也被称为导出列，Oracle不支持AS关键字\n\n```sql\n-- 数值计算\nSELECT prod_id, quantity * item_price AS total FROM orderitems;\nSELECT 2 * 6; -- 当省略子句时，就代表计算这个表达式并展现\n```\n\n### 函数\n\n- 文本处理函数\n\n```sql\nSELECT SOUNDEX(\"meet\"), SOUNDEX(\"meat\"); -- SOUNDEX函数将字母描述为字母数字模式 Access和PostgreSQL不支持\n```\n\n函数                           | 作用\n---------------------------- | ----------\nLEFT ( 或使用子字符串函数)            | 返回字符串左边的字符\nLENGTH (也使用DATALENGTH或LEN) ) | 返回字符串的长度\nLOWER ( Access使用LCASE )      | 将字符串转换为小写\nLTRIM                        | 去掉字符串左边的空格\nRICHT (或使用子字符串函数)            | 返回字符串右边的字符\nRTRIM                        | 去掉字符串右边的空格\nUPPER ( Access使用UCASE )      | 将字符串转换为大写\n\n- 日期和时间处理函数\n\n不同DBMS很不一致 可移植性最差\n\n```sql\nSELECT YEAR(NOW()); -- MySQL\nSELECT to_char(CURRENT_DATE,'YYYY') FROM dual; -- Oracle\n```\n\n- 数值计算函数\n\n函数   | 作用\n---- | ---------\nABS  | 返回一个数的绝对值\nCOS  | 返回一个角度的余弦\nEXP  | 返回一个数的指数值\nPI   | 返回圆周率\nSIN  | 返回一个角度的正弦\nSQRT | 返回一个数的平方根\nTAN  | 返回一个角度的正切\n\n### 聚合数据\n\n- 聚合函数\n\n```sql\nSELECT AVG(prod_price) FROM products; -- 求平均值，AVG函数忽略NULL\n\nSELECT COUNT(cust_email) FROM customers; -- 对列计算，忽略NULL\nSELECT COUNT(*) FROM customers; -- 对列计算，不忽略NULL\n\nSELECT MAX(prod_price) FROM products; -- 求最大值 忽略NULL\nSELECT MIN(prod_price) FROM products; -- 求最小值 忽略NULL\n\nSELECT SUM(item_price * quantity) FROM orderitems; -- 求和，忽略NULL\n\nSELECT SUM(DISTINCT item_price) FROM orderitems; -- 只对不同的结果进行求和\n```\n\n### 分组查询\n\n- GROUP BY 子句\n\n根据后面的列进行分组\n\n```sql\nSELECT TO_DAYS(create_time),COUNT(1) FROM web_log GROUP BY TO_DAYS(create_time)\n-- 查询每天的访问次数\n```\n\nGROUP BY子句的一些规则：\n\n可以包含任意数目的列\n\n子句的每一列都必须是检索列或者有效的表达式（但不能使聚集函数），除了聚集函数，SELECT 中的每一列，GROUP BY子句中都必须有\n\nNULL会被分为一组\n\nGROUP BY必须在WHERE之后 ORDER BY之前\n\nHAVING子句：\n\nWHERE在分组前过滤 HAVING在分组后过滤行，满足HAVING后的条件的分组才会被选择\n\n```sql\nSELECT TO_DAYS(create_time),COUNT(1) \nFROM web_log GROUP BY TO_DAYS(create_time) HAVING COUNT(1)>1000\n-- 查询访问次数1000的那些天\n```\n\n### 子查询\n\n*MySQL4.1后才支持子查询*\n\n```sql\nSELECT username FROM user WHERE user_id IN \n(SELECT user FROM state);\n-- 查询发表过动态的用户\n```\n\n作为子查询的SQL只能查询单个列\n\n```sql\nSELECT cust_name,\n  (SELECT COUNT(*) FROM orders WHERE orders.cust_id = customers.cust_id)\nFROM customers;\n-- 将子查询作为计算字段\n```\n\n### 联结\n\n联结是一种机制，用来在一条SELECT语句中关联表\n\n```sql\nSELECT name,instructor.dept_name,building\nFROM instructor , department\nWHERE instructor.dept_name = department.dept_name; -- 在联结中，特别需要注意列的全限定名\n```\n\n上面的这种联结叫做等值联结，等值联结等同于内联结：\n\n```sql\nSELECT name,instructor.dept_name,building\nFROM instructor INNER JOIN department\nON instructor.dept_name = department.dept_name;\n```\n\n笛卡尔积：\n\n表1：\n\nname | age\n---- | ---\n小明   | 15\n小红   | 16\n\n\n表2：\n\ngrade | school\n----- | ------\n5     | 中心小学\n6     | 中心小学\n\n\n两张表的笛卡尔积是：\n\nname | age | grade | school\n---- | --- | ----- | ------\n小明   | 15  | 5     | 中心小学\n小红   | 16  | 6     | 中心小学\n小明   | 15  | 6     | 中心小学\n小红   | 16  | 5     | 中心小学\n\n笛卡尔积也被称为叉联结(cross join)\n\n联结可以跨多张表：\n\n```sql\nSELECT * FROM orderitems, products, vendors;\n```\n\n但联结表越多，性能下降越厉害，基于此，许多DBMS都对联结的表数量做了限制，[阿里的p3c中也规定联结表的数量不得超过3张](编程语言/JAVA/p3c.md#索引规约)\n\n#### 自连接\n\n```sql\nSELECT * FROM customers AS c1, customers AS c2\nWHERE C1.cust_name = c2.cust_name\nAND c2.cust_contact = 'Jim Jones'; -- 查出与Jim Jones同公司的顾客\n```\n\n许多DBMS处理自联结往往比子查询快得多\n\n#### 自然连接\n\n```sql\nSELECT name,instructor.dept_name,building\nFROM instructor , department\nWHERE instructor.dept_name = department.dept_name\n```\n\n上面那条SQL可以简化成下列形式：\n\n```sql\nSELECT name,instructor.dept_name,building\nFROM instructor NATURAL JOIN department\n```\n\n#### 外连接\n\n- 左外连接：只保留出现在左外连接左边的关系中的元组（如果没有符合连接条件的元组，左表的元组还是会被展示出来）\n- 右外连接：只保留出现在右外连接运算右边关系中的元组\n- 全外连接：保留出现在两个关系中的元组\n\n左外连接：\n\n```sql\nselect * from user  \nleft outer join state on user.user_id = state.user;\n-- 把user和state进行连接，如果用户没有发表state，则仍保留用户，只是state相关列为NULL\n```\n\n右外连接如上取反\n\n全外连接可以包含两个表中不关联的行，许多DBMS不支持\n\nnatural join等价于natural inner join\n\n### 集合运算\n\n- 并运算\n\n```sql\nSELECT name FROM student WHERE age = 15\nUNION\nSELECT name FROM student WHERE age = 16\n```\n\n每个UNION SELECT语句的列都必须相同，类型必须兼容\n\nUNION会自动去除重复行，如果需要保留重复行，则使用UNION ALL\n\n如果UNION语句需要排序，则在最后一条SELECT语句加上ORDER BY子句，ORDER BY作用于所有UNION语句\n\n- 交运算\n\nINTERSECT关键字 用法同上\n\n- 差运算\n\nEXCEPT 关键字\n同上\n\n## 空值\n\n- IS NULL 判断是空值\n- IS NOT NULL 判断非空\n\n### 集合比较\n\n- some:某一些满足即可\n- all：全部满足\n\n```sql\nSELECT username FROM user\nWHERE age > all \n(SELECT age FROM user WHERE sex = '女')\n# 查询出年龄大于全部女性年龄的用户\n```\n\n### 空关系测试\n\nEXIST 关键字：\n当改关键字后面的关系非空时返回true，反之返回false\n相关子查询：\n\n```sql\nSELECT user_id FROM user \nWHERE EXISTS (SELECT * FROM state WHERE user = user_id);\n# 查询发表过动态的用户ID\n```\n\n### 重复元组存在性测试\n\nUNIQUE 关键字：\n查询是否存在重复的元组\n\n### FROM子句中的子查询\n\n```sql\nSELECT * FROM (SELECT username FROM user) AS T;\n# 使用FROM子句子查询，有些数据库要求FROM后面的子查询需要指定一个别名\n```\n\n### WITH子句\n\n提供定义临时关系的方法\n\n### 标量子查询\n\n如果一个子查询的结果只有一个元组，那么可以放在单个值能出现的任何地方：\n\n```sql\nSELECT username,(SELECT COUNT(1) \nFROM state WHERE state.user = user.user_id) FROM user;\n-- 查询每个用户的用户名及其发表的动态条数\n```\n\n## 数据库的修改\n\n### 删除\n```sql\nDELETE FROM r\nWHERE p\n```\n\n示例:\n\n```sql\nDELETE FROM user\nWHERE username = 'root'\n# 删除用户名为root的用户\n```\n\n### 插入\n\n```sql\nINSERT INTO user VALUES(1,'username',15);-- 这种方式需要指定全部列，每次插入数据，应尽可能提供所有列名\nINSERT INTO user(username,age) VALUES('username',15);-- 这种方式不需要指定全部列，允许为NULL值或者表定义有默认值的列可以被省略\nINSERT INTO user SELECT * FROM user;-- 插入查询出来的数据，根据列的位置进行插入，列名可以不匹配\n-- 某些SQL实现INTO是可选的\nSELECT * INTO cust_copy FROM customers; -- 复制数据到新表\nCREATE TABLE cust_copy AS  SELECT * FROM customers; -- MySQL Oracle PostgreSQL的语法\n```\n\n### 更新\n\n```sql\nUPDATE r\nSET k1=v1,k2=v2,...,kn=vn\nWHERE p\n```\n```sql\nUPDATE user\nSET username = 'abc'\nWHERE username = 'root'\n```\n\n## 视图\n\n定义：不是逻辑模型的一部分，但是作为虚关系对用户可见\n\nAccess 不支持视图 MySQL从5之后才支持视图 SQLite只支持只读视图\n\n### 视图定义\n\n```sql\nCREATE VIEW v AS <查询表达式>\n```\n\n创建一个部分用户视图：\n\n```sql\nCREATE VIEW user_part \nAS\nSELECT * FROM user LIMIT 10\n```\n\n如果视图使用了复杂的联结或者对视图进行了嵌套，性能会下降的很厉害,同时视图也不支持创建索引\n\n### SQL查询中使用视图\n\n再查询中，视图能出现在关系名可以出现的任何地方\n\n```sql\nSELECT * FROM user_part\n```\n\n对于视图的使用：\n\n1. 使用视图隐藏复杂的联结\n2. 使用视图格式化查询的数据\n3. 过滤掉不想要的数据\n\n可以极大简化复杂数据的处理\n\n### 物化视图\n\n如果用于定义视图的实际关系改变，视图也跟着修改。这样的视图称为物化视图\n\n### 视图更新\n\n一般来说，满足下列所有条件，则视图是可更新的\n- FROM子句中只有一个数据库关系\n- SELECT子句只包含关系的属性名，不包含任何表达式聚集或DISTINCT声明\n- 没有出现在SELECT子句中的属性可以去空值，也不是主码的一部分\n- 查询中没有GROUP BY 和HAVING子句\n\n## 事务\n\n定义：事务内的所有语句要么全部执行，要么全部不执行\n\n- Commit work:提交当前事务\n- Rollback work：回滚当前事务\n\nMySQL：\n\n```sql\nSTART TRANSACTION; -- 开始一个事务\nDELETE FROM orderitems; -- 执行事务操作\nROLLBACK; -- 回滚事务\nCOMMIT; -- 提交事务\n```\n\nOracle:\n\n```sql\nSET TRANSACTION;\n...\nCOMMIT;\n```\n\n对于没有明确标志事务结束的语句，事务将一直存在。\n\n默认没有开启的事务的执行语句都是隐式提交\n\n为了实现部分回滚的功能，这里引入一个叫做保存点的东西，回滚可以回滚到保存点，放弃回滚点后的所有更改\n\n```sql\nSTART TRANSACTION;\nSAVEPOINT p1;\nDELETE FROM orderitems;\nROLLBACK TO p1;\nCOMMIT;\n```\n\n## 游标\n\n在检索出来的行中前进或者后退。\n\nAccess不支持 MySQL5之后才支持 SQLite的游标称为步骤。\n\n相较而言，游标对对于Web应用用处不大\n\n## 完整性约束\n\n完整性约束防止的是对数据的意外破坏。\n\n### 单个关系上的约束\n\n### NOT NULL约束\n\n```sql\n CREATE TABLE `user` (\n  `user_id` int(11) NOT NULL AUTO_INCREMENT,\n  `username` varchar(20) NOT NULL,\n  `password` varchar(32) NOT NULL,\n  `user_info` int(11) NOT NULL,\n  `permission` int(11) NOT NULL,\n  `create_time` datetime NOT NULL,\n  `update_time` datetime NOT NULL,\n  `last_login` datetime DEFAULT NULL,\n  PRIMARY KEY (`user_id`),\n  UNIQUE KEY `username` (`username`)\n) ENGINE=InnoDB AUTO_INCREMENT=293 DEFAULT CHARSET=utf8\n```\n\n表示禁止在该属性上插入NULL值\n\n### UNIQUE 约束\n\n被该约束修饰的属性在单个关系上是唯一的，由于NULL != NULL ，所以一个关系上允许存在多个NULL值\n\n### CHECK 子句\n\ncheck(p) 指定一个谓词P，只有当该谓词满足时，数据库才允许插入\n\n### 参照完整性\n\n一个关系中给定属性集上的取值在另一关系的特定属性集的取值中出现，这种情况称为参照完整性\n\n```sql\nCREATE TABLE test(\nuser_id INT,\nFOREIGN KEY (user_id) REFERENCES user(user_id)\n);\n```\n\ntest表中的user_id参照user表的user_id\n\n### 事务中对完整性约束的违反\n\n如果事务中的某条SQL语句违反了完整性约束，则会马上进行检查。有些DBS支持将initially deferred加入到约束中，这样完整性约束检查就会在事务结束的时候进行。\n\n### 复杂CHECK条件与断言\n\n比如CHECK后面的谓词可以使用子查询：\n\n```sql\nCREATE TABLE test(\nuser_id INT \nCHECK(user_id IN( SELECT user.user_id FROM user))\n)\n```\n这样在插入test表时，只有在user表中出现的user_id才被允许插入，但是大多数数据库还不支持\n断言：\n```sql\nCREATE ASSERTION <name> CHECK <p>\n```\n任何在断言中涉及到的关系发生变动，都会触发断言。\n\n## SQL中的数据类型与模式\n\n### SQL中的日期和时间类型\n\n- DATE:日历日期，包括年月日\n- TIME :一天中的时间\n- TIMESTAMP ：DATE+TIME\n\n#### 与时间相关的函数：\n\n- CURRENT_DATE：返回当前日期\n- CURRENT_TIME：返回当前时间\n\n### 默认值\n\n如\n```sql\nCREATE TABLE test(\n  user_id INT DEFAULT 0\n);\n```\n当user_id未指定时，默认为0\n\n### 创建索引\n\n```sql\nCREATE INDEX index_1 ON test(id)\n```\n\n### 大对象类型\n\n- BLOB\n- CLOB\n\n### 用户定义的类型\n\n### CREATE TABLE 的扩展\n\n创建两个模式相同的表：\n\n```sql\nCREATE TABLE test1 LIKE test\n```\n\n从查询中创建表：\n\n```sql\nCREATE TABLE test2 AS \n(\nSELECT * FROM test\n)\nWITH DATA;\n# mysql不支持\n```\n\n### 模式、目录与环境\n\n当代数据库提供了三层结构的关系命名机制，最顶层由**目录**构成，每个目录当中可以包含**模式**，目录 == 数据库。\n默认目录和模式是为每个连接建立的SQL环境的一部分。\n\n## 授权\n\n- 授权读取\n- 授权插入\n- 授权更新\n- 授权删除\n\n### 权限的授予与收回\n\n```sql\nGRANT <权限列表>\nON <关系或视图>\nTO <用户或角色列表>\n```\n\n```sql\nGRANT SELECT ON department TO user1\n# 授予user1查询department表的权限\n```\n\npublic:代表当前系统的所有用户以及未来用户\n\n```sql\nREVOKE <权限列表>\nON <关系名或视图名>\nFROM <用户/角色列表>\n```\n\n```sql\nREVOKE SELECT ON department FROM user1\n# 收回user1的查询权限\n```\n\n### 角色\n\n创建角色：\n\n```sql\nCREATE ROLE <角色名>\n```\n\n```sql\nGRANT admin to user1;\n# 将admin角色授予user1\n```\n\n### 视图的授权\n\n同上\n\n### 模式的授权\n\n```sql\nGRANT REFERENCES (dept_name) ON department TO user1\n# 允许user1创建这样的关系：它能参照department的dept_name\n```\n\n### 权限的转移\n\n在授权语句最后加上 WITH GRANT OPTION\n即允许用户可将权限授予给其他用户\n\n### 权限的收回\n\n默认情况下，多数DBS都会级联收回用户的权限\n如果在收回语句最后加上 RESTRICT关键字，可以防止级联收回\n\n## 存储过程\n\n存储过程可以看成是对一系列 SQL 操作的批处理\n\nAccess 与 SQLite 不支持，MySQL5之后才支持\n\n- 代码复用\n- 比较安全\n- 性能较高\n\n不同DBMS存储和调用存储过程的方式都很不一致\n\n## 使用程序设计语言访问数据库\n\n- 动态SQL:运行时构建SQL语句字符串与数据库进行交互\n- 嵌入式SQL:SQL语句必须在编译时全部确定，由预处理器来连接宿主语言与数据库\n\n### JDBC\n\n一段经典的JDBC代码：\n\n```java\n// 加载驱动\n Class.forName(\"com.mysql.jdbc.Driver\");\n // 获取连接\n Connection connection =\n         DriverManager.getConnection(\"jdbc:mysql:///test\",\"root\",\"Root@@715711877\");\n // 执行SQL\n\nResultSet resultSet = connection.prepareStatement(\"SELECT * FROM test\").executeQuery();\n\n//取回结果集\nwhile (resultSet.next()){\n    System.out.println(resultSet.getInt(\"id\")+\"|\"\n            +resultSet.getString(\"name\"));\n}\nconnection.close();\n```","metadata":"","hasMoreCommit":true,"totalCommits":14,"commitList":[{"date":"2021-02-26T15:26:56+08:00","author":"cjiping","message":"✏更新SQL","hash":"9953bf12b17f16bcd61c0117965a197419393e71"},{"date":"2021-02-25T18:53:27+08:00","author":"cjiping","message":"✏更新SQL","hash":"c6ca5f90754d2fe96339f3e4cbd3a8dd85181ab5"},{"date":"2021-02-24T17:54:17+08:00","author":"cjiping","message":"✏更新SQL","hash":"945faea6bc661a954adf949fa61f7c005538a20b"},{"date":"2021-02-24T11:59:57+08:00","author":"cjiping","message":"✏更新SQL","hash":"16df1e55dfaae811d49c7dff02f7fb851233980c"},{"date":"2021-02-23T18:05:18+08:00","author":"cjiping","message":"✏更新SQL","hash":"2d089c35cf3198de51d0737d13ad7cdd35826831"},{"date":"2021-02-22T17:22:27+08:00","author":"cjiping","message":"✏更新SQL","hash":"e6ab1f35d5c95e68dac2be5447824ad4b90911bd"},{"date":"2021-02-21T14:59:20+08:00","author":"MY","message":"✏更新SQL","hash":"d01748e3f9568c15fabf86e9565241f4e58588cc"},{"date":"2021-02-20T16:17:48+08:00","author":"cjiping","message":"✏更新SQL","hash":"d74db7d879f7e33c5ea1552ece47633614d75e16"},{"date":"2021-02-10T17:33:42+08:00","author":"MY","message":"✏更新SQL","hash":"4dea9b47f51c07af9fc104ba55526b07c365edc0"},{"date":"2021-02-04T09:43:40+08:00","author":"cjiping","message":"✏更新SQL","hash":"6d27c3e65ac5733eef7e012962533462a3bdb5d6"}],"createTime":"2020-03-10T19:15:54+08:00"}