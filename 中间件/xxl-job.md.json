{"name":"xxl-job","id":"中间件-xxl@@job","content":"# xxl-job\n\n## 传统定时任务\n\n- 单机（无集群）\n\n## 定时任务的问题\n\n- 高并发下\n\n请求量大的情况下，独立的job服务器宕机之后如何处理未完成的任务\n\n- 分布式下\n\n分布式集群的情况下，怎么保证定时任务不被重复执行\n\n## 分布式定时任务解决方案\n\n- 集群节点读入一个全局共享变量来决定是否运行任务\n  - 分布式锁\n  - 数据库\n  - 配置文件\n- 分布式任务调度平台\n\n## 架构\n\n![202031144254](/assets/202031144254.png)\n\n## 工作原理\n\n![批注 2020-03-01 153716](/assets/批注%202020-03-01%20153716.png)\n\n## 执行器\n\n- 依赖\n\n```xml\n<dependency>\n    <groupId>com.xuxueli</groupId>\n    <artifactId>xxl-job-core</artifactId>\n    <version>2.1.2</version>\n</dependency>\n```\n\n- 配置\n\n```properties\nxxl.job.admin.addresses=http://127.0.0.1:8080/xxl-job-admin\n\nxxl.job.executor.appname=xxl-job-executor-sample\nxxl.job.executor.ip=\nxxl.job.executor.port=7777\n\n### xxl-job, access token\nxxl.job.accessToken=\n\n### xxl-job log path\nxxl.job.executor.logpath=/data/applogs/xxl-job/jobhandler\n### xxl-job log retention days\nxxl.job.executor.logretentiondays=30\n```\n\n```java\n@Configuration\npublic class XxlJobConfig {\n    private Logger logger = LoggerFactory.getLogger(XxlJobConfig.class);\n\n    @Value(\"${xxl.job.admin.addresses}\")\n    private String adminAddresses;\n\n    @Value(\"${xxl.job.executor.appname}\")\n    private String appName;\n\n    @Value(\"${xxl.job.executor.ip}\")\n    private String ip;\n\n    @Value(\"${xxl.job.executor.port}\")\n    private int port;\n\n    @Value(\"${xxl.job.accessToken}\")\n    private String accessToken;\n\n    @Value(\"${xxl.job.executor.logpath}\")\n    private String logPath;\n\n    @Value(\"${xxl.job.executor.logretentiondays}\")\n    private int logRetentionDays;\n\n\n    @Bean\n    public XxlJobSpringExecutor xxlJobExecutor() {\n        logger.info(\">>>>>>>>>>> xxl-job config init.\");\n        XxlJobSpringExecutor xxlJobSpringExecutor = new XxlJobSpringExecutor();\n        xxlJobSpringExecutor.setAdminAddresses(adminAddresses);\n        xxlJobSpringExecutor.setAppName(appName);\n        xxlJobSpringExecutor.setIp(ip);\n        xxlJobSpringExecutor.setPort(port);\n        xxlJobSpringExecutor.setAccessToken(accessToken);\n        xxlJobSpringExecutor.setLogPath(logPath);\n        xxlJobSpringExecutor.setLogRetentionDays(logRetentionDays);\n\n        return xxlJobSpringExecutor;\n    }\n}\n```\n\n- 编写处理器\n\n```java\n@XxlJob(\"demoJobHandler\")\npublic ReturnT<String> demoJobHandler(String param) throws Exception {\n    XxlJobLogger.log(\"XXL-JOB, Hello World.\");\n\n    for (int i = 0; i < 5; i++) {\n        XxlJobLogger.log(\"beat at:\" + i);\n        TimeUnit.SECONDS.sleep(2);\n    }\n    return ReturnT.SUCCESS;\n}\n```\n\n- 执行器集群\n\n可以配置多个同appname的执行器，来实现定时任务执行器负载均衡\n\n## 路由策略\n\n- 分片广播\n  - 集群多台机器同时进行\n\n## 调度中心集群\n\n需要注意的是，调度中心是一主多备的关系，只有一台调度中心进行调度任务\n\n- 启动多台调度中心\n- 执行器配置多个调度中心地址\n\n```properties\nxxl.job.admin.addresses=http://127.0.0.1:8080/xxl-job-admin,http://127.0.0.1:8079/xxl-job-admin\n```","metadata":"","hasMoreCommit":false,"totalCommits":3,"commitList":[{"date":"2021-10-27T17:52:41+08:00","author":"cjiping","message":"📦整理分布式&相关中间件","hash":"8a3a93852876a8a4292c23656ad8025d2871cf44"},{"date":"2020-03-02T15:41:55+08:00","author":"MY","message":"更新完xxl-job","hash":"8b6a89c15f6ae58c537c961fdc5bcee8793e05c4"},{"date":"2020-03-01T15:54:50+08:00","author":"MY","message":"增加 xxl-job","hash":"c36b28c03db067efe0945a13eefd0abe5be90acb"}],"createTime":"2020-03-01T15:54:50+08:00"}