{"name":"EhCache","id":"中间件-数据库-EhCache","content":"# EhCache\n\n>Ehcache是​​一个标准的开源缓存，可提高性能，减轻数据库负载并简化可伸缩性。\n因为它健壮，可靠，功能齐全并可以与其他流行的库和框架集成,所以是最广泛使用的基于Java的缓存。\nEhcache可以从进程内缓存扩展到具有TB级缓存的混合进程内/进程外部署\n\n## 基本架构\n\nEhcache是用来管理缓存的一个工具，其缓存的数据可以是存放在内存里面的，也可以是存放在硬盘上的。\n\n其核心是CacheManager，一切Ehcache的应用都是从CacheManager开始的。它是用来管理Cache（缓存）的，一个应用可以有多个CacheManager，而一个CacheManager下又可以有多个Cache。\n\nCache内部保存的是一个个的Element，而一个Element中保存的是一个key和value的配对，相当于Map里面的一个Entry\n\n## 缓存过期策略\n\n当缓存需要被清理时（比如空间占用已经接近临界值了），需要使用某种淘汰算法来决定清理掉哪些数据\n\n- FIFO：First In First Out，先进先出。判断被存储的时间，离目前最远的数据优先被淘汰。\n- LRU：Least Recently Used，最近最少使用。判断最近被使用的时间，目前最远的数据优先被淘汰。\n- LFU：Least Frequently Used，最不经常使用。在一段时间内，数据被使用次数最少的，优先被淘汰。\n\n## Spring Boot整合EhCache\n\n- 引入依赖\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-cache</artifactId>\n</dependency>\n<dependency>\n    <groupId>net.sf.ehcache</groupId>\n    <artifactId>ehcache</artifactId>\n    <version>2.10.6</version>\n</dependency>\n```\n\n- 配置\n\n```yml\nspring:\n  cache:\n    type: ehcache # 配置缓存类型\n    ehcache:\n      config: classpath:ehcache.xml # ehcache的配置文件\n```\n\n- 编写ehcache配置文件\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ehcache xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"http://ehcache.org/ehcache.xsd\">\n\n    <!-- 默认缓存 -->\n    <defaultCache maxElementsInMemory=\"1000\" eternal=\"true\"\n                  timeToIdleSeconds=\"120\" timeToLiveSeconds=\"120\" overflowToDisk=\"true\"\n                  diskSpoolBufferSizeMB=\"30\" maxElementsOnDisk=\"10000000\"\n                  diskPersistent=\"true\" diskExpiryThreadIntervalSeconds=\"120\"\n                  memoryStoreEvictionPolicy=\"LRU\">\n    </defaultCache>\n\n    <!-- userCache详细配置 -->\n    <cache name=\"userCache\" maxElementsInMemory=\"1000\" eternal=\"false\"\n           timeToIdleSeconds=\"120\" timeToLiveSeconds=\"120\" overflowToDisk=\"true\"\n           diskSpoolBufferSizeMB=\"30\" maxElementsOnDisk=\"10000000\"\n           diskPersistent=\"false\" diskExpiryThreadIntervalSeconds=\"120\"\n           memoryStoreEvictionPolicy=\"LRU\">\n\n    </cache>\n        <!--\n        一、以下属性是必须的：\n       1、name： Cache的名称，必须是唯一的(ehcache会把这个cache放到HashMap里)。\n    　　2、maxElementsInMemory：在内存中缓存的element的最大数目。\n    　　3、maxElementsOnDisk：在磁盘上缓存的element的最大数目，默认值为0，表示不限制。\n    　　４、eternal：设定缓存的elements是否永远不过期。如果为true，则缓存的数据始终有效，如果为false那么还要根据timeToIdleSeconds，timeToLiveSeconds判断。\n    　　５、overflowToDisk： 如果内存中数据超过内存限制，是否要缓存到磁盘上。\n        二、以下属性是可选的：\n    　　１、timeToIdleSeconds： 对象空闲时间，指对象在多长时间没有被访问就会失效。只对eternal为false的有效。默认值0，表示一直可以访问。\n    　　２、timeToLiveSeconds： 对象存活时间，指对象从创建到失效所需要的时间。只对eternal为false的有效。默认值0，表示一直可以访问。\n    　　３、diskPersistent： 是否在磁盘上持久化。指重启jvm后，数据是否有效。默认为false。\n    　　４、diskExpiryThreadIntervalSeconds： 对象检测线程运行时间间隔。标识对象状态的线程多长时间运行一次。\n    　　５、diskSpoolBufferSizeMB： DiskStore使用的磁盘大小，默认值30MB。每个cache使用各自的DiskStore。\n       ６、memoryStoreEvictionPolicy： 如果内存中数据超过内存限制，向磁盘缓存时的策略。默认值LRU，可选FIFO、LFU。   \n    -->\n</ehcache>\n```\n\n- 缓存注解配置\n\n```java\n@CacheConfig(cacheNames ={\"userCache\"}) // 设置缓存的标志\n@Service\npublic class UserService {\n\n    // 这个方法的返回值会被缓存\n    @Cacheable\n    public String username(){\n        return UUID.randomUUID().toString();\n    }\n    \n    // 这个方法会清除缓存\n    @CacheEvict\n    public void update(){ }\n}\n```\n\n- 开启缓存\n\n```java\n@SpringBootApplication\n@EnableCaching\npublic class EhcacheApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(EhcacheApplication.class, args);\n    }\n}\n```\n\n## Redis+EhCache分布式缓存架构\n\n![批注 2020-02-25 083538](/assets/批注%202020-02-25%20083538.png)\n\n这里要注意的是以及缓存的过期时间要比二级缓存早\n\n同时，由于查询redis要走网络，所以可以把ehcahe作为一级缓存，redis作为二级缓存","metadata":"","hasMoreCommit":false,"totalCommits":3,"commitList":[{"date":"2023-01-16T14:42:20+08:00","author":"cjiping","message":"📦数据库","hash":"28000b081b4f987f0343c41be793307aedb6addf"},{"date":"2020-02-25T09:04:34+08:00","author":"MY","message":"更新二级缓存架构","hash":"8e1394ddce99f456a0634fcbdc7d5bd1e4ebce6a"},{"date":"2020-02-23T10:54:09+08:00","author":"MY","message":"增加缓存中间件及ehcache","hash":"81456f6f782eda74ac525489b2f9d754d57397d0"}],"createTime":"2020-02-23T10:54:09+08:00"}