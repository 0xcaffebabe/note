{"name":"Memcached","id":"中间件-数据库-Memcached","content":"# Memcached\n\n> 免费 开源 高性能 分布式内存对象缓存系统\n\n## 设计理念\n\n- 简单KV存储\n\n服务器不关心数据结构 需要程序前序列化再存储到服务器\n\n- 一半一半\n\n缓存逻辑一半在客户端 一半在服务器\n\n客户端知道找哪台服务器读写 服务器知道如何存储item 如何淘汰内存\n\n- 简单的集群\n\n集群服务器之间无法通信 没有同步 没有广播 没有复制\n\n- O(1)\n\n所有命令操作很快 并且是锁友好的\n\n- 过期是常态\n\nmemcached 是一种LRU缓存\n\n- 缓存失效\n\n客户端对集群服务器的操作时按需访问 而非直接向所有服务器广播\n\n## 硬件需求\n\n低CPU需求：默认使用4条工作线程 大多时候只需要一条缓存线程\n\n内存需求：内存越多越好 集群节点内存大小最好一致 方便扩容缩容时不考虑权重问题\n\n- 避免内存交换\n- 是否为高速内存不重要\n\n网络需求：\n\n取决于实际使用情况 如果具有非常高的带宽 使用多个memcached比较好\n\n### 硬件布局\n\n- 缓存web服务器\n- 缓存数据库 不是好主意 应该将内存留给数据库的索引优化\n- 使用专用的服务器 好处是专用 扩展方便\n\n### 容量规划\n\n搭建集群前容量规划好 运行期扩展十分困难\n\n## 服务器配置\n\n- -m 参数告诉memcached可以使用多少内存 这个并非限制memcached实际内存使用 而是memcached存储缓存的最大限制\n- -d 参数 后台启动\n- -v 控制标准输入输出的打印\n- -p 指定端口号 可以指定不同的端口号启动多个实例\n- -l 绑定指定网卡或者IP\n- -U UDP端口\n- -s 使用unix socket\n\n连接限制：默认连接数量限制为1024 查过这个限制的连接会被挂起 每个连接的内存开销很低\n\n线程：memcached默认使用4个线程 采取了类似nginx的线程模型\n\n打印memcached状态：\n\n```sh\necho \"stats settings\" | nc localhost 11211\n```\n\n## 客户端配置\n\n哈希算法：根据key来选择服务器\n\n一致性哈希：减少服务器数量变动带来的重哈希问题\n\n服务器配置要一致 避免在不同的服务器上哈希得到不同的结果\n\n权重：有时候 一些机器资源更多 我们就给他更多的权重 处理更多的请求\n\n失败还是故障转移：转移的一个问题在于可能会使请求返回旧数据 更多的情况下 对于缓存 直接让其失败就好\n\n压缩：客户端都支持压缩大数据 小数据压缩得不偿失\n\n管理连接对象：注意连接的管理 如果不注意 每次操作都打开一个连接 会造成连接泄漏\n\n## Java 客户端\n\n```xml\n<dependency>\n    <groupId>com.googlecode.xmemcached</groupId>\n    <artifactId>xmemcached</artifactId>\n    <version>2.4.6</version>\n</dependency>\n```\n```java\nMemcachedClient client = new XMemcachedClient(\"192.168.1.101\", 11211);\n\n//同步存储value到memcached，缓存超时为1小时，3600秒。\nclient.set(\"key\", 3600, \"jntm\");\n//从memcached获取key对应的value\nObject someObject = client.get(\"key\");\nSystem.out.println(someObject);\n//从memcached获取key对应的value,操作超时2秒\nsomeObject = client.get(\"key\", 2000);\n//更新缓存的超时时间为10秒。\nboolean success = client.touch(\"key\", 10);\nSystem.out.println(success);\n//删除value\nclient.delete(\"key\");\n```","metadata":"","hasMoreCommit":false,"totalCommits":5,"commitList":[{"date":"2023-01-16T14:42:20+08:00","author":"cjiping","message":"📦数据库","hash":"28000b081b4f987f0343c41be793307aedb6addf"},{"date":"2020-10-11T15:36:40+08:00","author":"MY","message":"✏更新 memcached","hash":"d809a8aa7a197b39c2854f639f26fe05659c9227"},{"date":"2020-10-08T15:23:59+08:00","author":"MY","message":"✏更新 memcached","hash":"67cd49c205f6871532c62e565aaaf495ec70bd3c"},{"date":"2020-10-06T16:23:54+08:00","author":"MY","message":"✏更新 memcached","hash":"ceca73d3aa0d76fd4d8a250d8b0665ec5d59fb59"},{"date":"2020-10-04T15:28:11+08:00","author":"MY","message":"➕增加 memcached","hash":"86734c0dba2dd1c2fd90003be72f81686cca0fcd"}],"createTime":"2020-10-04T15:28:11+08:00"}