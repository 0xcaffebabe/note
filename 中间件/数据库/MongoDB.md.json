{"name":"MongoDB","id":"中间件-数据库-MongoDB","content":"# mongodb\n\n> MongoDB 是一个跨平台的，面向文档的数据库，是当前 NoSQL 数据库产品中最热 门的一种。它介于关系数据库和非关系数据库之间，是非关系数据库当中功能最丰富，最 像关系数据库的产品。它支持的数据结构非常松散，是类似 JSON 的 BSON 格式，因此可以 存储比较复杂的数据类型。\n\n## 基础概念\n\nSQL术语/概念    | MongoDB术语/概念 | 解释/说明\n----------- | ------------ | --------------------------\ndatabase    | database     | 数据库\ntable       | collection   | 数据库表/集合\nrow         | document     | 数据记录行/文档\ncolumn      | ﬁeld         | 数据字段/域\nindex       | index        | 索引\ntable joins |              | 表连接（MongoDB不支持）\nprimary key | primary key  | 主键,MongoDB自动在每个集合中添加_id的主键\n\n## 数据类型\n\n- null：用于表示空值或者不存在的字段，{“x”:null}\n- 布尔型：布尔类型有两个值true和false，{“x”:true}\n- 数值：shell默认使用64为浮点型数值。{“x”：3.14}或{“x”：3}\n  - 对于整型值，可以使用 NumberInt（4字节符号整数）或NumberLong（8字节符号整数）， {“x”:NumberInt(“3”)}{“x”:NumberLong(“3”)}\n- 字符串：UTF-8字符串都可以表示为字符串类型的数据，{“x”：“呵呵”}\n- 日期：日期被存储为自新纪元依赖经过的毫秒数，不存储时区，{“x”:new Date()}\n- 正则表达式：查询时，使用正则表达式作为限定条件，语法与JavaScript的正则表达式相 同，`{“x”:/[abc]/}`\n- 数组：数据列表或数据集可以表示为数组，{“x”： [“a“，“b”,”c”]}\n- 内嵌文档：文档可以嵌套其他文档，被嵌套的文档作为值来处理，{“x”:{“y”:3 }}\n- 对象Id：对象id是一个12字节的字符串，是文档的唯一标识，{“x”: objectId() }\n- 二进制数据：二进制数据是一个任意字节的字符串。它不能直接在shell中使用。如果要 将非utf-字符保存到数据库中，二进制数据是唯一的方式。\n- 代码：查询和文档中可以包括任何JavaScript代码，{“x”:function(){/…/}}\n\n## 操作\n\n```shell\nshow dbs #列出所有数据库\nuse test #使用数据库（不存在会自动创建，新创建的数据库不显示（至少包含一个集合））\ndb.dropDatabase() #删除当前数据库\n```\n\n```shell\n db.createCollection(\"student\")  # 创建集合\n db.collection.drop() #删除集合\n```\n\n```shell\ndb.student.insert({\"name\":\"cxk\",\"age\":25}) # 插入文档\ndb.student.update({\"name\":\"cxk\"},{\"name\":\"xkc\"}) #更新文档（替换文档）\n```\n\n```shell\ndb.student.find() # 查询全部\ndb.student.find({\"name\":\"cxk\"}) # 按条件查询\ndb.student.find({\"name\":\"cxk\"},{name:1,age:1,_id:0}) # 投影\n```\n\n```shell\n# 创建用户\ndb.createUser(      {       \n     user:\"root\",        \n      pwd:\"root\",        \n      roles:[\n          {role:\"root\",db:\"admin\"}\n          ]     \n       }   \n)\n```\n\n## JAVA操作\n\n- 依赖\n\n```xml\n<dependency>\n    <groupId>org.mongodb</groupId>\n    <artifactId>mongo-java-driver</artifactId>\n    <version>3.11.0</version>\n</dependency>\n```\n\n- 使用\n\n```java\nMongoClient client = new MongoClient(\"my-pc\");\nMongoDatabase db = client.getDatabase(\"db\");\n\nMongoCollection<Document> spit = db.getCollection(\"spit\");\nDocument d = new Document();\nd.append(\"name\",\"jntm\");\nspit.insertOne(d);\nfor (Document document : spit.find()) {\n    System.out.println(document.getString(\"name\"));\n}\nclient.close();\n```\n\n### Spring data mongodb\n\n## node操作\n\n- 连接\n\n```js\nconst mongoose = require('mongoose')\n\nmongoose.connect('mongodb://localhost/db1', { useNewUrlParser: true, useUnifiedTopology: true })\n    .then(() => {\n       console.log('连接成功')\n    })\n    .catch(e => console.log(e))\n```\n\n- 创建集合\n\n```js\nconst userSchema = new mongoose.Schema({\n    name: String,\n    age: Number\n})\n// 返回一个构造函数\nconst User = mongoose.model('User',userSchema)\n```\n\n- 插入文档\n\n```js\nconst user = new User({\n    name:'cxk',age:18\n})\nuser.save()\n```\n\n```js\nUser.create({name:'gdf',age:15},(err,doc)=>{\n    if (!err){\n        console.log('插入成功',doc)\n    }\n})\n```\n\n- 查询\n\n```js\n// 查询全部\nUser.find().then(result=>console.log(result))\n// 根据ID查询\nUser.findById('5c09f236aeb04b22f8460967').then(result=>console.log(result))\n// 根据条件查询\nUser.find({password:'123456'}).then(result=>console.log(result))\nUser.find({ age: { $gt: 20, $lt: 40 } }).then(result => console.log(result))\nUser.find({ hobbies: { $in: ['打豆豆'] } }).then(result => console.log(result))\n// 投影\nUser.find().select('name password -_id').then(result => console.log(result))\n// 排序\nUser.find().sort('age').then(result => console.log(result))\nUser.find().sort('-age').then(result => console.log(result)) // 降序\n// 分页\nUser.find().skip(2).limit(5).then(result => console.log(result))\n```\n\n- 删除\n\n```js\n// 删除符合条件的第一个文档\nUser.findOneAndDelete({name:'cxk'}).then(res=>console.log(res))\n// 删除符合条件的全部文档\nUser.deleteMany({name:'gdf'}).then(res=>console.log(res))\n```\n\n- 更新\n\n```js\n// 更新符合条件中的第一个\nUser.updateOne({ name: 'gdf' }, { name: 'cxk' }).then(res => console.log(res))\n// 更新全部符合调价你的\nUser.updateMany({ password: '123456' }, { name: 'cxk' }).then(res => console.log(res))\n```\n\n### 验证\n\n```js\nconst userSchema = new mongoose.Schema({\n    // name必传，否则会报错\n    name: {\n        type: String,\n        required: true\n    },\n    age: Number\n})\n```\n其他的验证规则\n```\nrequired: true 必传字段\nminlength：3 字符串最小长度\nmaxlength: 20 字符串最大长度\nmin: 2 数值最小为2\nmax: 100 数值最大为100\nenum: ['html', 'css', 'javascript', 'node.js']\ntrim: true 去除字符串两边的空格\nvalidate: 自定义验证器\ndefault: 默认值\n```\n\n### 集合关联\n\n```js\n// 用户集合\nconst User = mongoose.model('User', new mongoose.Schema({ name: { type: String } }));\n// 文章集合\nconst Post = mongoose.model('Post', new mongoose.Schema({\n    title: { type: String },\n    // 使用ID将文章集合和作者集合进行关联\n    author: { type: mongoose.Schema.Types.ObjectId, ref: 'User' }\n}));\n```\n\n```js\nPost.find().populate('author').then(r => console.log(r))\n```\n\n## GridFS\n\n","metadata":"","hasMoreCommit":false,"totalCommits":7,"commitList":[{"date":"2020-08-11T09:30:14+08:00","author":"MY","message":"✏更新 redis mongodb 位置","hash":"8073c9f9e11e533852d6c92ccc22f66c16feb0aa"},{"date":"2020-03-06T16:16:09+08:00","author":"MY","message":"增加 mongodb node操作","hash":"7e9cf30bf4419947d957a2115c95b814916f0600"},{"date":"2019-11-13T22:30:58+08:00","author":"MY","message":"新增rabbit mq核心概念说明","hash":"46f3d5435accbcdcf41b86e29d135ca24d73d3c3"},{"date":"2019-11-11T14:08:01+08:00","author":"MY","message":"新增mongodb java 客户端","hash":"35f43fc99a44e19771a16ad6fdcdc6621df95312"},{"date":"2019-11-10T22:59:06+08:00","author":"MY","message":"新增mongodb-数据类型","hash":"d1a9aed43e9822fe216104c8f6f144c87ba8fbba"},{"date":"2019-10-11T17:19:05+08:00","author":"MY","message":"nothing","hash":"fdcb3a9879c4484c7c023cdf0c0907bc662f8aa3"},{"date":"2019-10-07T22:20:48+08:00","author":"MY","message":"新增MongoDB","hash":"3340075e60ba839d15b1352746efb17366269d62"}],"createTime":"2019-10-07T22:20:48+08:00"}