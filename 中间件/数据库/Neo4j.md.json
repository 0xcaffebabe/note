{"name":"Neo4j","id":"中间件-数据库-Neo4j","content":"# Neo4j\n\n![202292172629](/assets/202292172629.jpg)\n\n- 节点：用来描述领域实体，可以有一个或多个标签（类型化）来标识节点的类型\n- 关系：用来描述源节点与目标节点，总是有向的，并且必须要有一个类型\n\n节点与关系都可以有属性，也就是KV对\n\n创建关系的同时需要列出源节点与目标节点\n\n```cypher\nCREATE ()-[:ACTED_IN {roles: ['Forrest'], performance: 5}]->()\n```\n\nneo4j 不强制要求schema\n\n## 命名公约\n\n- 节点标签：大写驼峰，:ProjectConsumer\n- 关系类型：大写驼峰，:CompanyEmploye\n- 属性：小写驼峰，:userAge\n\n## Cypher\n\n- neo4j的声明式图查询语言\n\n```cypher\n// 一个标签为Movie叫matrix的节点 有title released两个属性\n(matrix:Movie {title: 'The Matrix', released: 1997})\n// 一个类型为ACTED_IN叫role的关系 有 roles一个属性\n-[role:ACTED_IN {roles: ['Neo']}]->\n```\n\n### 语法\n\n#### MATCH\n\n```cypher\n// 创建一个节点\nCREATE (:Movie {title: 'The Matrix', released: 1997})\n// 创建节点与关系\nCREATE (cxk:Person {name: \"蔡徐坤\", playAge: \"两年半\"})-[:PLAYED_IN {name: \"打\"}]->(ball:Basketball {name: \"篮球\"})\nCREATE (cxk)-[:SING_IN {name: \"rap\"}]->(song:Song {name: \"鸡你太美\"})\nRETURN cxk,ball,song\n```\n\n```cypher\n// 查询所有标签为Person的节点\nMATCH (p:Person) RETURN p\n// 查询指定属性满足的节点\nMATCH (p:Person {name: \"蔡徐坤\"}) RETURN p\n// 查询指定节点关系\nMATCH (p:Person)-[:SING_IN]->(s:Song) RETURN p,s\n```\n\n```cypher\n// 创建新关系\nMATCH (p: Person)\nCREATE (p)-[:LIVE_IN]->(:Earth)\n// 不存在就创建 存在就更新 在大图里，这种操作需要扫描大量节点，即使加上索引或约束，仍有一定开销\nMERGE (p: Person {name: \"蔡徐坤2号\"})\nON CREATE SET p.age = 18\nRETURN p\n// MERGE 关系\nMATCH (p: Person {name: \"蔡徐坤2号\"})\nMATCH (b: Basketball)\nMERGE (p)-[:PLAYED_IN]->(b)\n```\n\n```cypher\n// 查询身份证为xxx 的 PERSON 与 PERSON、THING拥有rytcx、yysj最多二度关系的图\nMATCH (p:PERSON  {fq_gmsfhm: \"350500196306111518\"})<-[:rytcx|yysj*..2]->(n) WHERE (n: PERSON OR n: THING)\nRETURN p,n\n// 查询身份证为xxx 的 PERSON到手机号为17750052235的THING之间的路径\nMATCH p=(n: PERSON {fq_gmsfhm: \"350521195607060010\"})-[*]->(m: THING {sjhm: \"17750052235\"})\nRETURN p\n```\n\n#### UNION\n\n- 合并两个查询，结果名称必须都一致\n\n```cypher\nMATCH (p: Person)\nRETURN p as a\nUNION\nMATCH (b: Basketball)\nRETURN b as a\n```\n\n#### WITH\n\n在WITH中定义变量，只有这些变量，才会被传递到下一个查询中\n\n```cypher\nMATCH (p: Person)\nWITH DISTINCT p.name AS name\n// RETURN p 找不到p\nRETURN name\n```\n\n#### CASE\n\n```cypher\nMATCH (p: Person {name: \"蔡徐坤\"})\nRETURN \nCASE p.age\n    WHEN 18 THEN \"两年半\"\n    WHEN 20 THEN \"四年半\"\n    ELSE \"UNKNOW\"\nEND\n\nMATCH (p: Person {name: \"蔡徐坤\"})\nWITH p,\nCASE p.age\n    WHEN p.age IS NULL THEN \"UNKNOW\"\n    WHEN p.age = 18 THEN \"两年半\"\nEND AS a\nRETURN a\n```\n\n#### 子查询\n\n```cypher\n// 存在子查询\nMATCH (p: Person)\nWHERE exists((p)-[:PLAYED_IN]->(:Basketball))\nRETURN p\n// 结果返回子查询\nCALL {\n    MATCH (p: Person)\n    RETURN p as a\n    UNION\n    MATCH (b: Basketball)\n    RETURN b as a\n}\nRETURN a.name\n```\n\n#### 索引\n\n为提升图的遍历性能，某些情况下使用索引是有必要的\n\n```cypher\n// 根据姓名创建索引\nCREATE INDEX cxk_index FOR (p: Person) ON (p.name)\n// 查看有哪些索引\nSHOW INDEXES\n```\n\n#### 约束\n\n```cypher\n// 强制要求字段唯一\nCREATE CONSTRAINT constraint_example_1 FOR (movie:Movie) REQUIRE movie.title IS UNIQUE\n// 查看有哪些约束\nSHOW CONSTRAINTS\n```\n\n#### 参数\n\n```cypher\nMATCH (p: Person {name: $name})\n```\n\n#### 操作符\n\n##### 聚合操作符\n\n```cypher\n// 去重\nMATCH (p: Person)\nRETURN DISTINCT p.name\n```\n\n##### 属性操作符\n\n```cypher\nRETURN p[\"name\"] // 等同于p.name\n\n// 添加属性\nMATCH (p:Person {name: \"蔡徐坤2号\"})\nSET p+= {gender: \"female\"}\n```\n\n##### 比较运算符\n\n```cypher\n// between\nMATCH (n) WHERE 21 < n.age <= 30 RETURN n\n// 排序\nMATCH (p:Person)\nRETURN p ORDER BY p.name\n```\n\n##### 使用正则表达式\n\n```cypher\nMATCH (p:Person) WHERE p.name =~ '.徐.'\nRETURN p\n```\n\n##### 日期时间操作\n\n```cypher\nWITH date({year: 2022, month:9, day: 21}) AS a,duration({days: 9}) AS b\nRETURN a-b\n```\n\n##### 列表操作\n\n```cypher\n// 连接\nRETURN [1,2,3,4,5] + [6,7]\n// 包含\nRETURN 1 IN [1,2,3]\n// 切片\nRETURN [1,2,3,4,5][1..3]\n```\n\n#### 空间数据类型\n\n```cypher\n// 84坐标系\nWITH point({latitude: 24, longitude: 118}) AS p1,point({latitude: 25, longitude: 117}) AS p2\nRETURN point.distance(p1,p2)/1000 + 'km'\n// 笛卡尔坐标系\nWITH point({x:1,y:2}) AS p1, point({x:3,y:4}) AS p2\nRETURN point.distance(p1,p2)\n```\n","metadata":"","hasMoreCommit":false,"totalCommits":7,"commitList":[{"date":"2024-09-09T19:58:03+08:00","author":"MY","message":"➕图数据库","hash":"15b24a9fc4f67cc5e7dff2aa1abb44331bcb9574"},{"date":"2022-09-22T19:54:23+08:00","author":"cjiping","message":"✏️neo4j","hash":"4294a1420e9c973816978e3d120664e4a3c44ea9"},{"date":"2022-09-21T17:45:51+08:00","author":"cjiping","message":"✏️neo4j","hash":"335209026c78b716f87f638013dcb135a09438cb"},{"date":"2022-09-20T20:59:20+08:00","author":"cjiping","message":"✏️neo4j","hash":"ddcffa71bee0d9ef48a821b072f1bbe6d7ac0b96"},{"date":"2022-09-07T16:05:15+08:00","author":"cjiping","message":"✏️neo4j","hash":"3f77ec244f46f7f8a5472b7e017750b019c808c7"},{"date":"2022-09-02T18:01:31+08:00","author":"cjiping","message":"✏️neo4j","hash":"061835818101d32f7f6fd2482fb6a6eb902c0fa9"},{"date":"2022-09-01T18:08:22+08:00","author":"cjiping","message":"➕neo4j","hash":"5086c9411bf67e84c8f777c7d79b097f32a2a54e"}],"createTime":"2022-09-01T18:08:22+08:00"}