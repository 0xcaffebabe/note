{"name":"schema与数据类型优化","id":"中间件-数据库-mysql-schema与数据类型优化","content":"# schema与数据类型优化\n\n## 数据类型\n\n- 更小的通常更好（保证范围够用的情况下）\n- 简单就好\n  - 整型比字符串操作代价更低\n- 尽量避免使用null\n  - 对mysql来说很难优化，因为可为null的列使得索引、索引统计和值比较都更加复杂\n\n### 实际细则\n\n- 字符串\n  - 按照查询速度：char>varchar>text\n  - varchar根据实际内容长度保存数据\n  - char固定长度的字符串\n    - 最大长度：255\n    - 会自动删除末尾的空格\n- BLOB与TEXT\n  - 两者都是为了存储很大数据而设计的字符串类型，分别采用二进制和字符方式存储。\n- 日期时间\n  - datetime\n    - 与时区无关，数据库底层时区配置，对datetime无效\n    - 可保存到毫秒\n  - timestamp\n    - 时间范围：1970-01-01到2038-01-19\n  - date\n    - date类型用于保存1000-01-01到9999-12-31之间的日期\n- 使用枚举替代字符串\n- 特殊数据类型\n  - IP使用整数表示\n- 输出MySQL对数据类型的建议\n  - `SELECT * FROM tb PROCEDURE ANALYSE()`\n- 整理表碎片\n  - `OPTIMIZE TABLE tb`\n  - 某些存储引擎不支持 使用mysqldump导出再导入来整理\n- 使用BLOB TEXT存储非结构化数据\n  - 注意删除更新时留下的碎片\n  - 避免过大\n  - 抽离到一张独立的表\n- 合成索引\n  - 计算一个散列值存放到一个列\n\n## 范式与反范式\n\n范式化的更新通常比反范式要快 好的范式可以减少冗余 通常需要进行关联\n\n而反范式所有的数据都在同一张表中，可以避免关联 可以设计有效的索引 表格内的冗余较多，删除数据时候会造成表有些有用的信息丢失\n\n```\n反范式化前：\n用户表 |用户ID|姓名|电话|地址|邮编\n订单表 |订单ID|用户ID|下单时间|支付类型|订单状态\n订单商品表 |订单ID|商品ID|商品价格|商品数量\n商品表 |商品ID|名称|描述|过期时间\nSELECT b.用户名，b.电话，b.地址，a.订单ID\n        ,SUM(c.商品价价*c.商品数量)as订单价格\nFROM`订单表`a\nJOIN`用户表` b ON a.用户ID=b.用户D\nJOIN`订单商品表` c ON c.订单ID=b.订单ID\nGROUP BY b.用户名, b.电话, b.地址, a.订单ID\n\n反范式化后：\n用户表 |用户ID|姓名|电话|地址|邮编\n订单表 |订单ID|用户ID|下单时间|订单状态|订单价格|支付类型|用户名|电话|地址\n订单商品表 |订单ID|商品ID|商品价格|商品数量\n商品表 |商品ID|名称|描述|过期时间\nSELECT a.用户名,a.电话,a.地址, a.订单ID, a.订单价格 FROM`订单表` a\n```\n\n在实际中，一般都是两种混用，一种很常见的情况就是缓存。\n\n## 主键\n\n- 代理主键：与业务无关的，无意义的数字序列\n  - 不与业务耦合，因此更容易维护\n  - 通用的键策略能够减少需要编写的源码数量，减少系统的总体拥有成本\n- 自然主键：事物属性中的自然唯一标识\n\n对于主键的选择，最好的选择是使用数字。特别是，要注意外键定义的两个列数据类型最好一致，在InnoDB中，如果不一致，创建表将失败。\n\n使用字符串作为主键通常比数字类型慢，且对于诸如MD5,unid这些随机的字符串，将会导致INSERT及SELECT语句变得很慢。这是因为随机分布的数据导致局部性原理失效，每次写入的位置不可预测，逻辑相邻的数据物理不相邻。\n\n## 字符集\n\n纯拉丁字符能表示的内容，没必要选择 latin1 之外的其他字符编码，因为这会节省大量的存储空间\n\n如果我们可以确定不需要存放多种语言，就没必要非得使用UTF8或者其他UNICODE字符类型\n\nMySQL的数据类型可以精确到字段，可以通过对不同表不同字段使用不同的数据类型来较大程度减小数据存储量\n\n## 数据冗余\n\n### 汇总表\n\n某些诸如实时统计的操作很耗费资源，那么就可以定期进行计算，放到一张缓存表来提高性能。\n\n### 物化视图\n\n被频繁引用且只能通过 Join 2张(或者更多)大表的方式才能得到的独立小字段 可以将这些字段独立出一张表\n\n冗余的同时需要确保数据的一致性不会遭到破坏，确保更新的同时冗余字段也被更新\n\n### 计数器表\n\n为了避免统计各种计数器值的开销，通过维护一个cnt字段来实现高性能。\n\n这种方式会使写性能更差，但会提升读的性能。\n\n## 适当拆分\n\n对于一些如TEXT 大VARCHAR 数据时 可以将这些大数据字段拆分到另一个表 降低IO压力\n\n## Schema设计中的陷阱\n\n- 使用了太多的列：转换代价是非常高的\n- 使用太多的关联会影响性能\n- 不必害怕使用NULL\n\n## 加快ALTER TABLE\n\n大部分ALTER TABLE 语句都会使MySQL停止服务。\n\n为了避免ALTER TABLE过于缓慢的问题，有两种方法：\n\n1. 在另外一台服务器上进行操作，完了之后把流量切换过去\n2. 创建一张新表，对新表重命名 再把旧表删掉\n","metadata":"","hasMoreCommit":false,"totalCommits":6,"commitList":[{"date":"2024-12-11T19:59:57+08:00","author":"MY","message":"📦MySQL","hash":"5c96cf53bb2f2ca8359f5fab16cf12f5ef224bbc"},{"date":"2024-11-05T16:44:30+08:00","author":"MY","message":"✏MySQL 优化","hash":"4879a2b4a5c0087638bb00a896aab401ab857361"},{"date":"2021-03-08T17:32:51+08:00","author":"cjiping","message":"✏更新 MySQL 优化","hash":"ddf80c2d9c0f465cb48dd2521356944eb54699fb"},{"date":"2021-03-02T18:20:39+08:00","author":"cjiping","message":"✏更新 MySQL 优化","hash":"1966127b63a695eadb4f5042ee7cba5981012756"},{"date":"2020-07-30T11:14:22+08:00","author":"MY","message":"✏更新 MYSQL 调优","hash":"6b403f8f505ebe389e127fa87e7d4a5d8fdb172d"},{"date":"2020-07-29T16:41:48+08:00","author":"MY","message":"✏更新 MYSQL 调优","hash":"261a1954262a46e2ed2f302ec4d2d4c0bc8900fa"}],"createTime":"2020-07-29T16:41:48+08:00"}