{"name":"管理","id":"中间件-数据库-mysql-管理","content":"# 管理\n\n## MySQL 组件\n\n- 服务器\n  - mysqld 服务器主程序\n  - mysql_safe 启动和监控\n  - mysql_multi 同一主机管理多台MySQL\n- 客户端和util\n  - mysql 客户端交互式程序\n  - mysqladmin 管理数据库\n  - mysqldump 备份或复制\n  - mysqlcheck 检查分析优化或者修复表 myisamchk只适用于myisam\n\n## 数据目录\n\n位置：指定`datadir`配置项\n\n### 结构\n\n```mermaid\ngraph TD\n    客户1 -->|Unix 域套接字| MySQL服务器\n    客户2 -->|TCP/IP端口| MySQL服务器\n    客户3 -->|命名管道| MySQL服务器\n    MySQL服务器 --> 数据目录\n\n    数据目录 --> 数据库1\n    数据目录 --> 数据库2\n    数据目录 --> 数据库n\n\n    数据库1 --> 表11\n    数据库1 --> 表12\n    数据库1 --> 表13\n\n    数据库2 --> 表21\n    数据库2 --> 表22\n    数据库2 --> 表23\n\n    数据库n --> 表31\n    数据库n --> 表32\n    数据库n --> 表33\n\n```\n\n数据库的表示：文件目录\n\n数据表的表示：\n\n- InnoDB\n  - 系统表空间：只有一个.frm文件\n  - 独立表空间: .frm文件与索引文件.ibd\n- MyISAM\n  - .frm 表结构描述\n  - .MYD 数据文件\n  - .MYI 索引文件\n- Memory\n  - 只有.frm存储表结构\n\n将`lower_case_table_name`环境变量设置为1 MySQL 在操作表时 会将表名自动转换为小写字母\n\n影响表最大长度的因素：操作系统文件大小 存储引擎内部限制 \n\n视图与触发器：\n\n- 视图\n  - .frm \n- 触发器\n  - .TRG 与 .TRN\n\n状态与日志文件：\n\n文件类型|默认名|文件内容\n-|-|-\n进程ID文件|HOSTNAME.pid|服务器进程ID\n错误日志|HOSTNAME.err|启动/关闭事件和错误条件\n一般查询日志|HOSTNAME.log|连接/断开事件和查询信息\n二进制日志|HOSTNAME-bin.nnnnnn|修改数据的语句的二进制表示\n二进制日志索引|HOSINAME-bin.index|当前二进制日志文件名的列表\n中继日志|HOSTNAME-relay-bin.nnnnnn|从服务器自主服务器接收到的数据修改信息\n中继日志索引|HOSTNAME-relay-bin.index|当前中继日志文件名的列表\n主服务器信息文件|master.info|用于连接主服务器的参数\n中继信息文件|relay-log.info|中继日志处理的状态\n慢查询日志|HOSTNAME-slow.log|处理起来比较耗时的语句文本\n\n进程PID文件：写入进程PID 其他应用可以读取mysql的进程ID 从而进行一些操作\n\n### 迁移数据目录\n\n迁移之前需要停止服务器\n\n迁移实体|适用的迁移方法\n-|-\n整个数据目录|启动选项或符号链接\n各个数据库目录|符号链接\n各个数据库表|符号链接\nInnoDB表空间文件|启动选项\n服务器PID文件|启动选项\n日志文件|启动选项\n\n## 常规管理\n\n### 用户系统\n\n```sql\nSELECT Host, User,authentication_string,plugin FROM mysql.user; -- 查看用户信息\nSET PASSWORD FOR root = 'root'; -- 修改密码\n```\n\n### 启动与运行\n\n- 以非root用户运行\n- 每次都以同一个用户身份运行\n\n```sh\nmysqladmin -p -u root shutdown # 关闭\n```\n\n### 设置系统变量\n\n```ini\n# my.ini\n[mysqld]\nmax_connection=200 # 下划线跟-可以互换\ninnodb_buffer_pool_size=16M # 单位不填默认为字节\n```\n\n### 插件\n\n```ini\n# my.ini\n[mysqld]\nplugin-load=xxx,xxx\n```\n\n### 引擎\n\n```sql\nSELECT ENGINE, SUPPORT FROM INFORMATION_SCHEMA.ENGINES; -- 查看引擎\n```\n\n配置默认引擎：`default_storage_engine` 参数\n\n## 访问控制与安全\n\n## 维护 备份 复制\n\n恢复数据比较安全的做法，是恢复出一个备份，或者找一个从库作为临时库，在这个临时库上执行这些操作，然后再将确认过的临时库的数据，恢复回主库\n\n对于误删行：确保 binlog_format=row 和 binlog_row_image=FULL，这样可以通过 binlog 进行反向重放\n\n对于误删表或者库：要求线上有定期的全量备份和实时备份binlog。 1. 取最近一次的全量备份恢复出一个临时库。 2. 取binlog日志中固定时间点之后的日志。 3. 把这些日志除了误删数据的语句外，全部应用到临时库\n\n事前预防：\n\n1. 上线前，必须经过 SQL 审计\n2. sql_safe_updates 参数设置为 on。这样一来，如果我们忘记在 delete 或者 update 语句中写 where 条件，或者 where 条件里面没有包含索引字段的话，这条语句的执行就会报错\n3. 搭建延迟复制的备库：固定设置备库延迟复制主库，这样给数据误删找回预留时间\n4. 控制好权限，制订操作规范，数据更改上线前要做好误删恢复准备\n","metadata":"","hasMoreCommit":false,"totalCommits":4,"commitList":[{"date":"2024-11-07T16:23:04+08:00","author":"MY","message":"📦MySQL","hash":"cc0b244f98955ea55043ef57b13e9fe490a110b1"},{"date":"2023-04-21T15:23:13+08:00","author":"MY","message":"✏mysql","hash":"eeace1472c3784de373dccf858f59abc8eb7651f"},{"date":"2020-09-04T10:31:27+08:00","author":"MY","message":"✏更新 MySQL","hash":"a857b8dad04d2ed056677994c5f268013a6b5841"},{"date":"2020-09-03T11:28:25+08:00","author":"MY","message":"✏更新 MySQL","hash":"0e52e16afdc699b12b5d4d79a24c767374211335"}],"createTime":"2020-09-03T11:28:25+08:00"}