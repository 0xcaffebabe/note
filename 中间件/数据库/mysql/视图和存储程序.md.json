{"name":"视图和存储程序","id":"中间件-数据库-mysql-视图和存储程序","content":"# 视图和存储程序\n\n## 视图\n\n- 虚拟表\n\n使用：\n\n```sql\nCREATE VIEW v AS SELECT ...;\nCREATE VIEW v(c1,c2) AS SELECT ...; -- 对SELECT结果的列重命名\n\nCREATE VIEW v AS SELECT id FROM tb WHERE i>1;\nUPDATE v SET i = i+1; -- 对于单张表的简单视图 是可以进行更新的\n```\n\nMySQL视图的实现：\n\n- 合并算法：将对视图的查询条件合并到原表的查询条件上去\n- 临时表算法：将创建视图时的SELECT语句结果存放到一张临时表 查询视图时查询这张临时表\n\n```mermaid\n---\ntitle: 合并算法\n---\nsequenceDiagram\n    participant Client as 客户端\n    participant Server as 服务器\n    participant SQL1 as SQL查询\n    participant View as 视图\n    participant SQL2 as 合并查询SQL\n    participant Data as 底层表数据\n\n    Client ->> Server: 发起包含视图的查询\n    Server ->> View: 解析查询，找到对应视图\n    View ->> SQL1: 执行视图的SQL\n    SQL1 ->> SQL2: 将视图SQL和查询SQL进行合并\n    SQL2 ->> Data: 在底层表执行查询\n    Data -->> Server: 返回查询结果\n    Server -->> Client: 返回结果给客户端\n```\n\n```mermaid\n---\ntitle: 临时表算法\n---\nsequenceDiagram\n    participant Client as 客户端\n    participant Server as 服务器\n    participant SQL1 as SQL查询\n    participant View as 视图\n    participant TempTable as 临时表\n    participant Data as 底层表数据\n\n    Client ->> Server: 发起包含视图的查询\n    Server ->> View: 解析查询，找到对应视图\n    View ->> TempTable: 生成临时表\n    TempTable ->> Data: 执行临时表中的查询\n    Data -->> TempTable: 将数据存储到临时表中\n    TempTable -->> SQL1: 在临时表中执行查询\n    SQL1 -->> Server: 返回查询结果\n    Server -->> Client: 返回结果给客户端\n\n```\n\n使用EXPLAIN查看视图实现方式，如果视图包含聚合函数、UNION或者子查询，则都会使用临时表实现\n\n### 临时表\n\n1. 建表语法是 create temporary table …\n2. 一个临时表只能被创建它的 session 访问，对其他线程不可见。临时表的命名：进程id_线程id_序列号\n3. 临时表可以与普通表同名。session内有同名的临时表和普通表的时候，show create 语句，以及增删改查语句访问的是临时表\n4. show tables 命令不显示临时表\n\n临时表的应用：用来进行分库分表的聚合\n\n```mermaid\nstateDiagram-v2\n\tdirection LR\n\t客户端 --> 临时表: 创建\n\t库1 --> 客户端: select\n\t库2 --> 客户端: select\n\t库3 --> 客户端: select\n\t临时表 --> 客户端: select\n```\n\n如果临时表在主从复制集群里创建，一个 session 关闭了，主库的临时表就会被自动删除，但从库则需要在主库上再写一个 DROP TEMPORARY TABLE 传给备库执行\n\n### 内部临时表\n\n以下查询会用临时表：\n\n1. union：需要比对去重，所以需要临时表，union all 没有比对去重，则不需要\n2. group by：如果聚合的字段不是有序的，也会用到临时表\n\n临时表分为内存临时表与磁盘临时表，内存临时表的大小是由参数 tmp_table_size 决定的，对于用到临时表的查询，可以通过 SQL_BIG_RESULT 优化提示强制 MySQL 使用磁盘临时表\n\n使用 Memory 引擎的内存表可以被用作内存临时表，内存表相比 InnoDB 表的区别在于：不支持事务、数据按插入顺序排序、只支持表锁、\n\n## 存储程序\n\n### 存储过程\n\n不能用在 sql 表达式中 可以返回多个结果集\n\n```sql\nCREATE PROCEDURE show_tables ()\n  SELECT * FROM information_schema.tables;\nCALL show_tables(); -- 调用存储过程\n\nCREATE PROCEDURE print_2 () -- 复合语句\nBEGIN\n\tSELECT * FROM staff;\n\tSELECT * FROM actor;\nEND;\n\n-- 存储过程参数\nCREATE PROCEDURE count_people_1(OUT ret INT)\nBEGIN\n\tSET ret = (SELECT COUNT(*) FROM staff);\nEND;\nCALL count_people_1(@ret);\nSELECT @ret;\n```\n\n### 存储函数\n\n可以有参数 有返回值\n\n存储函数不能对调用它的那条语句正操作的表进行修改\n\n```sql\nCREATE FUNCTION count_people() RETURNS INT\nBEGIN\n\tRETURN (SELECT COUNT(*) FROM staff);\nEND;\nSELECT count_people();\n```\n\n### 触发器\n\n- 对于每张表的每个事件 只能定义一个触发器\n- MySQL的触发器是基于行的触发\n\n```sql\n-- 插入前检验\nCREATE TRIGGER tri_person BEFORE INSERT ON person\n\tFOR EACH ROW BEGIN\n\t\tIF NEW.name != 'cxk' THEN\n\t\t\tSET NEW.name = 'cxk';\n\t\tEND IF;\nEND;\n```\n\n### 事件\n\n开启事件调度：`SET GLOBAL event_scheduler = ON;`\n\n```sql\n-- 每秒插入一条记录\nCREATE EVENT insert_people\n\tON SCHEDULE EVERY 1 SECOND\n\tDO\n\t\tINSERT INTO person VALUES('cxk');\n```\n\n如果上一个事件的上一次调度没有执行完，时间一到，下一次调度就会开始，这种并发需要用户自己处理\n\n## 安全性\n\n对于视图或者存储程序\n\n默认调用者的身份都是创建者\n\n可以在CREATE 语句后面加上`DEGINER = xxx` 来指定定义者\n","metadata":"","hasMoreCommit":false,"totalCommits":5,"commitList":[{"date":"2024-11-07T10:12:05+08:00","author":"MY","message":"📦MySQL 视图实现","hash":"854a6d1cdc8c13bbaafcd0f31e5b9a17e0627fb8"},{"date":"2023-04-24T16:00:54+08:00","author":"MY","message":"✏MySQL","hash":"a729660d492b45ce9b73695c5d51fb89adae6056"},{"date":"2023-04-23T16:11:33+08:00","author":"MY","message":"✏mysql","hash":"9e9721498f1d0ab6aadb24d379cc0da360cafab8"},{"date":"2021-03-23T16:36:41+08:00","author":"cjiping","message":"✏更新 MySQL 视图和存储程序","hash":"6084d2e8f1cd6af1d39c364011940fe2448fa82e"},{"date":"2020-08-26T11:27:57+08:00","author":"MY","message":"✏更新 MySQL","hash":"753797505768d25387cf9d484d9d7d2a3d718a03"}],"createTime":"2020-08-26T11:27:57+08:00"}