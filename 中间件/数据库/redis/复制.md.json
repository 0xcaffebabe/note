{"name":"复制","id":"中间件-数据库-redis-复制","content":"# 复制\n\n- slaveof命令建立复制（5.0之后改为 replicaof）\n- slaveof no one命令断开复制\n\nredis的复制功能是支持多个数据库之间的数据同步。一类是主数据库（master）一类是从数据库（slave），主数据库可以进行读写操作，当发生写操作的时候自动将数据同步到从数据库，而从数据库一般是只读的，并接收主数据库同步过来的数据，一个主数据库可以有多个从数据库，而一个从数据库只能有一个主数据库\n\n## 拓扑结构\n\n- 一主一从\n\n```mermaid\nstateDiagram-v2\n  redisA --> RedisB\n```\n\n用于主节点出现宕机时从节点提供故障转移支持\n\n- 一主多从\n\n```mermaid\nstateDiagram-v2\n  RedisA --> RedisB\n  RedisA --> RedisC\n  RedisA --> RedisD\n  RedisA --> RedisE\n```\n\n对于读占比较大的场景，可以把读命令发送到从节点来分担主节点压力\n\n或者从节点用来执行一些如keys 等比较耗时的命令\n\n**对于写并发量较高的场景，多个从节点会导致主节点写命令的多次发送从而过度消耗网络带宽**\n\n- 主从链\n\n```mermaid\nstateDiagram-v2\n  RedisMaster --> Slave1\n  RedisMaster --> Slave2\n  RedisMaster --> Slave3\n  Slave1 --> SlaveA\n  Slave1 --> SlaveB\n  Slave1 --> SlaveC\n  Slave2 --> SlaveD\n  Slave2 --> SlaveE\n  Slave2 --> SlaveF\n  Slave3 --> SlaveG\n  Slave3 --> SlaveH\n  Slave3 --> SlaveI\n```\n\n通过引入复制中间层，可以有效降低主节点负载和需要传送给从节点的数据量\n\n## 原理\n\n### 复制过程\n\n1. 执行slaveof后从节点只保存主节点的地址信息便直接返回\n2. 从节点会建立一个socket套接字 门用于接受主节点发送的复制命令\n3. 连接建立成功后从节点发送ping请求进行首次通信用于检测主从之间网络套接字是否可用以及节点当前是否可接受处理命令\n4. 如果主节点设置了requirepass参数，则需要密码验证\n5. 主从复制连接正常通信后，主节点会把持有的数据全部发送给从节点\n6. 接下来主节点会持续地把写命令发送给从节点，保证主从\n数据一致性\n\n### 数据同步\n\nRedis 的复制机制也是使用的[复制状态机](/软件工程/架构/系统设计/分布式/分布式数据.md#复制)这套方法\n\n#### 全量复制\n\n一般用于初次复制场景，会把主节点全部数据一次性发送给从节点\n\n```mermaid\nsequenceDiagram\n  slave ->> master: psync ? -1\n  master ->> slave: +FULLRESYNC {runId} {offset}\n  slave ->> slave: save masterinfo\n  master ->> master: bgsave\n  master ->> slave: send RDB\n  master ->> slave: send buffer\n  slave ->> slave: flush old data\n  slave ->> slave: load RDB\n  opt 开启AOF\n    slave ->> slave: bgrewriteaof\n    slave ->> slave: done\n  end\n  opt 没有开启AOF\n    slave ->> slave: done\n  end\n```\n\n- runId 是每个 Redis 实例启动生成的一个随机id\n- offset 代表复制进度\n\n为了保证主从库的数据一致性，主库会在内存中用专门的 replication buffer，记录 RDB 文件生成后收到的所有写操作\n\n#### 增量复制\n\n- psync命令\n\n主从断网重连后，会通过增量复制的方式继续同步，master内部会维护一个 repl-backlog-buffer，把断连期间收到的写操作命令写入到该 buffer 中，主库会记录自己写到的位置，从库则会记录自己已经读到的位置，在增量同步时，会通过 offset，决定要复制哪些增量数据\n\nrepl_backlog_buffer 是一个环形缓冲区，所以在缓冲区写满后，主库会继续写入，此时，就会覆盖掉之前写入的操作。如果从库的读取速度比较慢，就有可能导致从库还未读取的操作被主库新写的操作覆盖了，这会导致主从库间的数据不一致，可以通过调整 repl_backlog_size 这个参数来调整缓冲区大小\n\n```mermaid\nsequenceDiagram\n  slave ->> master: reconnect\n  slave ->> master: psync {offset} {runId}\n  master ->> slave: CONTINUE\n  master ->> master: read repl-backlog-buffer from offset\n  master ->> slave: send partial data\n```\n\n#### 异步复制\n\n写命令的发送过程是异步完成，也就是说主节点自身处理完写命令后直接返回给客户端，并不等待从节点复制完成\n\n## 问题\n\n读写分离带来的问题：\n\n- 数据延迟 写入master的数据无法马上在slave上读到\n- 读到过期数据  Redis在3.2版本从节点读取数据之前会检查键的过期时间来决定是否返回数据\n- 从节点故障 需要在客户端维护可用从节点列表，当从节点故障时立刻切换到其他从节点或主节点上\n\n主从配置不一致的问题：\n\n如最大限制内存如果不一致 导致从节点部分数据被淘汰 造成从节点数据与主节点不一致\n\n避免全量复制：\n\n- 从节点启动后会进行一次全量复制 这个无法避免\n- 如果主节点重启 会导致运行ID改变 此时从节点也会进行一次全量复制\n- 主从节点网络断开 如果连接后复制挤压缓冲区不足 也会触发全量复制\n\n避免复制风暴：\n\n复制风暴指大量从节点对同一主节点或者对同一台机器的多个主节点短时间内发起全量复制的过程\n\n- 单主节点复制风暴\n\n使用主从链代替一主多从来解决这个问题\n\n```mermaid\nstateDiagram-v2\n  master --> slave1\n  master --> slave2\n  master --> slave3\n```\n\n↓\n\n```mermaid\nstateDiagram-v2\n  master --> slave1\n  slave1 --> slave2\n  slave1 --> slave3\n```\n\n- 单机器复制风暴\n\n避免将所有主节点放在同一台机器，下面的拓扑如果此时机器A网络挂掉 那么重新启动时 就会导致其他机器的流量全部压向机器A\n\n```mermaid\nstateDiagram-v2\n  state maichineA {\n    master1\n    master2\n  }\n  master1 --> slave1\n  master1 --> slave2\n  state machineC {\n    slave1\n    slave2\n  }\n  master2 --> slave3\n  master2 --> slave4\n  state machineD {\n    slave3\n    slave4\n  }\n```\n\n## 配置\n\n主服务配置(6379)\n\n```\n# 设置主服务器密码\nrequirepass 123\n# 或者需要设置master bind address\nbind 0.0.0.0\n```\n\n从服务器配置(6380)\n\n```\n# 设置访问主服务器得我密码\nmasterauth 123\n# 设置主服务器地址端口\nslaveof 127.0.0.1 6379\n# 新版本\nreplicaof 127.0.0.1 6379\n```\n\n只能对主服务器进行写操作，从服务器只能读操作\n\n一些主从配置项\n\n```\nreplica-serve-stale-data yes\nreplica-read-only yes # 从节点的任何修改主节点都无法感知\nrepl-diskless-sync no\n\nrepl-disable-tcp-nodelay #用于控制是否关闭TCP_NODELAY，默认关闭\n\nrepl-backlog-size 1mb \n#增量复制\n\nmin-replicas-to-write 3\nmin-replicas-max-lag 10\n```\n","metadata":"","hasMoreCommit":false,"totalCommits":2,"commitList":[{"date":"2023-11-16T18:57:34+08:00","author":"MY","message":"✏Redis","hash":"7955ae3a5874322931281a113be629782a29c57a"},{"date":"2020-11-05T16:53:44+08:00","author":"MY","message":"📦重构 Redis","hash":"436d256214f45aea37f8659d4758b82fe1709560"}],"createTime":"2020-11-05T16:53:44+08:00"}