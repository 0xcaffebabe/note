{"name":"数据库设计","id":"中间件-数据库-数据库系统-数据库设计","content":"# 数据库设计\n\n- 需求分析\n- 概念设计：进行建模，决定数据库应该要有哪些实体，实体要有哪些属性。比如使用ER模型进行设计。\n- 逻辑设计：将概念设计得到的模型映射到数据所使用的模型上。\n- 物理设计：包括文件组织的形式以及内部的存储结构。\n\n## 设计选择\n\n在设计时，我们必须确保避免两个主要的缺陷：\n\n- 冗余\n- 不完整\n\n更大还是更小：\n\n- 更大的模式 比如department模式与student模式进行合并，得到两个模式的连接结果dept_stu 问题：\n  - 数据冗余\n  - 有些情况无法表示\n- 更小的模式： 如何发现一个模式需要分解成n个更小的模式？ **函数依赖** 定义这样的一条规则：如果存在模式（dept_name,budget）,则dept_name可以作为主码，那么这就叫函数依赖 记作：x → y **有损分解**：分解过后无法表达一些重要的信息。 **无损分解**：上面取反\n\n### 设计异常\n\n不符合范式的关系\n\n- 冗余数据\n- 修改异常\n- 删除异常\n- 插入异常\n\n## ER模型\n\n- 实体：对象\n- 属性：实体通过一组属性来表示，每个属性都有一个值\n  - 每个属性都有一个可取值的集合，称为该属性的域，属性类型的划分：\n    - 简单和复合\n    - 单值和多值\n    - 派生属性\n- 实体集：实体构成的集合\n- 联系：多个实体间的相互关联，实体在联系中扮演的功能称为实体的角色，联系也可以具有描述性属性\n- 联系集：相同类型联系的集合\n\n### 扩展\n\n- ISA\n- Part-Of\n\n## 约束\n\n### 映射基数\n\n- 一对一\n- 一对多\n- 多对一\n- 多对多\n\n### 参与约束\n\n- 全部参与\n  - 如果实体集E中的每个实体都参与到联系集R的至少一个联系中\n  - 那么E在R就是全部参与\n- 部分参与\n\n### 码\n\n实体的码是一个足以分区每个实体的属性集，同样，码也可以用于唯一标识联系\n\n## 从实体集中删除冗余属性\n\n当决定好实体集后，必须挑选合适的属性\n\n## ER图\n\n### 基本结构\n\n- 分割成两部分的矩形：实体集\n- 菱形：联系集\n- 未分割的矩形：联系集的属性\n- 线段：实体集与联系集的连接\n- 虚线：联系集到联系集的连接\n- 双线：实体在联系集中的参与度\n- 双菱形：连接到弱实体集的标志性联系集\n- 带箭头的线：代表箭头所指的那方实体映射基数为1\n- 不带箭头的线：代表箭头所指的那方实体映射基数为多\n\n### 复杂的属性\n\n比如\nAddress\n  - city\n  - street\n\n### 角色\n\n通过在菱形和矩形之间的连线上进行标注来表示角色\n\n### 非二元的联系集\n\n即一个联系连接了两个以上的实体\n\n![批注 2020-03-08 205525](/assets/批注%202020-03-08%20205525.png)\n\n### 继承关系\n\n![批注 2020-03-08 205614](/assets/批注%202020-03-08%20205614.png)\n\n### 弱实体集\n\n- 没有足够的属性以形成主码的实体集称为**弱实体集**\n- 有主码的实体集称为**强实体集**\n\n## 转换为关系模式\n\n- 逻辑结构设计\n\n### 具有简单属性的强实体集表示\n\n比如实体集student，有三个属性：ID、name、credit，可以转换成如下关系模式：\n\n```sql\nstudent(ID,name,credit)\n```\n\n### 具有复杂属性的强实体集的表示\n\n比如student有一个属性address，又有子属性city，street，那么可生成关系模式：\n\n```sql\nstudent(ID,name,credit,city,street)\n```\n\n### 弱实体集的表示\n\n设A为一个弱实体集，B为A所依赖的一个强实体集。那么可以创建一个关系模式：\n\nB(a1,a2,a3,x)，其中a1，a2，a3为B的属性，x为B到A的外键约束\n\n### 联系集的表示\n\n设R为联系集，a1，a2...an为参与R的实体集构成的属性集合，b1，b2...bn为R的属性，则R的属性为：\n\n{a1,a2..an}∪{b1,b2,...bn}\n\n如何选取主码：\n\n- 对于多对多的二元联系：参与实体集的主码属性并集成为主码\n- 对于一对一的联系集：任何一个实体的主码都可以选作为主码\n- 对于多对一或者一对多：多的那一方的实体集可以选取作为主码\n\n#### 模式冗余\n\n一般情况下，连接弱实体集与其所依赖的强实体集的联系集模式是冗余的。\n\n#### 模式的合并\n\n- 在一对一的联系的情况下：联系集的关系模式可以跟参与联系的任何一个实体集的模式进行合并\n\n## ER设计问题\n\n### 用实体集还是用属性\n\n什么构成实体集，什么构成属性？这个问题要根据现实情况进行回答。\n\n- **一个常见的错误是用一个实体集的主码作为另一个实体集的属性，而不是用联系**\n- **另一个错误是将相关实体集的主码属性作为联系集的属性**\n\n### 用实体集还是用联系集\n\n一个原则是：**当描述发生在实体间的行为时采用联系集**\n\n### 二元还是n元联系集\n\n数据库中的联系通常都是二元的。\n\n一些非二元的联系可以通过拆分分为二元联系，但是这样做，有时并不那么自然\n\n### 联系属性的布局\n\n属性放到哪里，是实体集还是联系集？这也是要根据实际情况进行决定\n\n## 扩展的E-R特性\n\n### 特化\n\n自顶向下的，可以看做OOP当中父类转换成子类的这么样一个过程\n\n### 概化\n\n同上，类似于OOP中的向上转型\n\n### 属性继承\n\n高层实体集的属性可以被底层实体集继承\n\n### 概化上的约束\n\n数据库设计者可以决定哪些实体能成为给定低层实体集的成员，条件可以如下：\n\n- 条件定义\n- 用户定义\n\n### 聚集\n\nE-R模型的一个局限性在于它不能表达联系间的联系。聚集是一种抽象，它把联系视为高层实体，这样就可以表达联系之间的联系了\n\n### 转换为关系模式\n\n#### 概化的表示\n\n- 为高层实体集创建一个模式，为每个低层实体集创建一个模式\n- 如果概化是不相交并且完全的，就是说不存在同时属于两个同级的低层实体集的实体\n\n#### 聚集的表示\n\n聚集的主码是定义该聚集的联系集的主码\n\n## 其他建模方式表达\n\n- [UML](/软件工程/理论/UML.md)\n\n## 范式\n\n范式最重要的就是保证数据之间的关联一致性及控制数据冗余，这种保证会影响数据库的性能 所以在大数据量、高并发的场景下提倡反范式以此来提升性能\n\n### 原子域与第一范式\n\n一个域是原子的，如果该域的元素被认为是不可分的单元，我们称一个关系模式R属于第一范式。 简单来说：所有关系模式数据库都符合第一范式\n\n### 第二范式\n\n每个非主属性完全函数依赖于键码，说人话就是数据行的每个属性都可以由主键查询得到\n\n## 函数依赖\n\n### 码和函数依赖\n\n一个关系满足需求定义的现实世界约束，称为关系的合法实例\n\n- 给定R的一个实例，我们说这个实例满足函数依赖x → y 的条件是：对于实例中的所有元组t1，t2 ，若t1[x] = t1[x] ，则t1[y] = t2[y]，说人话就是 一个关系R中有两个属性x和y，如果x能够唯一确定y的值就说y函数依赖于x\n- 如果R中的每个合法实例都满足函数依赖，则我们说该函数依赖在R上成立 有两种方式使用函数依赖：\n  - 判定关系的实例是否满足给定函数依赖集F\n  - 说明合法关系集上的约束 **平凡函数依赖**：如果y ⊆ x，则称 x→y 的函数依赖是平凡的 用F<sup>+</sup>表达F集合的闭包，也就是能够从给定F集合推导出来的函数依赖集合，说人话就是平凡函数依赖是指一个属性集（关系属性的集合）能够决定它的子集，也就是说，当一个属性集的值相同时，它的子集的值也一定相同\n\n### BC范式\n\n属于BC范式的条件是： 对于F<sup>+</sup>中所有形如a→b的函数依赖(a ⊆ R,b⊆R ),下面至少有一项成立：\n\nBC范式就是要求一个表中的每个属性都只跟主键有关，而不跟其他属性有关\n\n- a → b是平凡的函数依赖（b ⊆ a）\n- a是模式R的一个超码 分解不属于BCNF的一般规则： 设R为一个不属于BCNF的一个模式，则存在至少一个非平凡的函数依赖a→b，其中a不是R的超码，我们用两个模式取代R：\n- （a ∪ b）\n- （R - （b - a ）） 进行迭代直到得到一个BCNF模式集合\n\n### BCNF和保持依赖\n\n由于设计使得函数依赖的强制实施在计算很困难，因此称这个设计不是保持依赖的\n\n### 第三范式\n\n属于第三范式的条件，下面至少一项成立：\n\n- a → b是一个平凡的函数依赖\n- a 是R的一个超码\n- b - a的每个属性都包含于R的一个候选码中\n\n满足BC范式的关系模式一定满足第三范式，第三范式与 BC 范式的区别在于，BC 范式的依赖是可以推导的，而第三范式依赖只是直接有关：第三范式就是要求一个表中的每个属性都只跟主键直接有关，而不跟其他属性有关\n\n### 其他范式\n\n#### ER模型和规范化\n\n- 正确定义的 ER 图就不需要太多进一步的规范化\n\n#### 属性和联系的命名\n\n- 数据意义相同上的字段使用相同命名最佳\n- 大部分联系名都是两个实体名之间加下划线\n\n#### 为性能去规范化\n\n有些范式可能需要在修改或者查询数据时进行更多的操作，这会影响性能，常见去范式提高性能的方式：\n\n1. 信息冗余，如在订单表存放购买人信息\n2. 物化视图，虽然还有冗余，但是一致性的维护是由数据库来进行\n\n### 函数依赖理论\n\n#### 函数依赖集的闭包\n\n逻辑蕴含： A → B,B → h 那么 A → H被逻辑蕴含\n\n##### Amstrong 公理\n\n一组关于函数依赖的基本规则，它们可以用来推导出一个关系模式中所有的函数依赖\n\n- 自反律：若a为一属性集且 b ⊆ a，则a → b成立\n- 增补律\n- 传递律\n- 合并律\n- 分解律\n- 伪传递律\n\n#### 属性集的闭包\n\n如果 a → B，我们称属性B被a函数确定\n\n#### 正则覆盖\n\n#### 无损分解\n\nR1,R2是R的分解，如果用R1,R2替代R没有信息损失，则该分解是无损分解\n\n#### 保持依赖\n\n### 分解算法\n\n#### BCNF分解\n\n#### 3NF分解\n\n#### BCNF和3NF的比较\n\n应用函数依赖进行数据库设计的目标：\n\n- BCNF\n- 无损\n- 保持依赖\n\n#### 使用多值依赖的分解\n\n##### 多值依赖\n\n函数依赖有时成为**相等依赖** 多值依赖成为**元组产生依赖** 设R为关系模式，让a ⊆ R 且 b ⊆ R 多值依赖 a -> -> b在R上成立的条件是：\n\n### 4NF分解\n\n## 数据库设计的其他方面\n\n- 数据约束和关系数据库设计\n\n显式声明约束的优点：\n\n- 自动保持数据的一致性\n- 一些约束在数据库模式的设计中非常有用\n- 当然也可以提高访问效率\n\n缺点：\n\n在数据更新时，执行约束会在性能上带来潜在的高代价\n\n### 使用需求：查询、性能\n\n主要的两个度量方法：\n\n- 吞吐量\n- 响应时间\n\n### 时态数据建模\n\n时态数据时具有关联时间段的数据 **快照**快照是指一个特定时间点上该数据的值，除了可以将每行记录关联一个时间段来代表有效性之外，也有专门的时序数据库用来解决这种需求，[金融系统](/软件工程/架构/系统设计/金融系统.md#数据存储)用的很多\n\n### 授权需求\n\n不同的用户与组织能看到数据会受到不同的限制，这块是[认证授权](/计算机网络/网络安全/认证与授权.md)需要干的\n\n### 数据流、工作流\n\n工作流表示一个流程中的数据和任务的组合\n\n当用户在执行工作流中的任务时，工作流会与数据库系统进行交互，除了工作流操作的数据之外，数据库还可以存储工作流自身的数据\n\n### 数据库加密\n\n- 数据库层面的加解密 [MySQL](/中间件/数据库/mysql/mysql.md)的AES_ENCRYPY/AES_DECRYPT HEX/UNHEX\n- 应用层处理\n- 传输层处理 SSL\n\n### 数据库设计的其他问题\n\n数据库设计要求设计者可以预先估计一个组织将来的需求，设计出的模式在需求发生变更时只要做最少的改动即可满足要求。\n\n### 实践中的一些问题\n\n#### 没有唯一键约束\n\n业务上具有唯一特性的字段，即使是多个字段的组合，也必须建成唯一索引\n\n如果没有唯一索引，很容易会被插入重复数据\n\n#### 执行delete没带查询条件\n\n执行删除操作时，要开启事务，同时要先查询核对影响的行数和数据准确性，再执行删除操作 ；执行删除操作后再次核实，如果情况不对立即回滚\n\n#### 表结构修改没有兼容老数据\n\n比如增加了一个非null字段\n\n#### 时效性要求极高的场景查了备库\n\n备库存放的数据可能不是最新的数据\n\n#### 悬停时间较长的事务被kill\n#### 表新增了供查询的字段，却没建索引，导致慢查询\n\n## 数据库技术选型\n\n- 确定数据库类型 [db-engines](https://db-engines.com/en/ranking)\n\n## MySQL 数据库设计\n\n[MySQL 数据库设计规范](https://github.com/Highflyer/MySQL-Design-Specification)\n\n### 命名规范\n\n数据库：\n\n- [a-z ][0-9] _\n- 不超过30字符\n- 备份数据库可以加自然数\n\n表:\n\n- [a-z ][0-9] _\n- 相同关系的表可以加相同的前缀\n\n字段：\n\n- [a-z ][0-9] _\n- 多个单词使用下划线分割\n- 每个表必须有自增主键（默认系统时间）\n- 关联字段名尽可能相同\n\n### 字段类型规范\n\n- 使用较少的空间来存储\n- ip最好使用int\n- 固定长度的类型使用char\n- 最好给默认值\n\n### 索引规范\n\n- 加一个index后缀\n- 为每个表创建主键索引\n- 复合索引慎重\n\n### 范式规范\n\n- 必须满足第二范式\n- 尽量满足第三范式\n\n","metadata":"tags: ['数据库']\nbooks: [\n  {name: '数据库系统概念'}\n]","hasMoreCommit":false,"totalCommits":8,"commitList":[{"date":"2024-11-07T16:23:04+08:00","author":"MY","message":"📦MySQL","hash":"cc0b244f98955ea55043ef57b13e9fe490a110b1"},{"date":"2023-04-12T10:44:17+08:00","author":"MY","message":"📦数据库设计","hash":"725d5fc75d257ebd82a89ad5c8ac035c5bcce782"},{"date":"2023-04-12T10:31:07+08:00","author":"MY","message":"✏数据库设计","hash":"5095dc522f3b527464a37051d72d66ef6dab145c"},{"date":"2023-03-30T21:09:33+08:00","author":"MY","message":"✏️数据库设计","hash":"82708638b5563fdf1320f5f56a47c71392fa5504"},{"date":"2023-03-29T21:26:10+08:00","author":"MY","message":"✏️数据库设计","hash":"6152f02420fc6088ed384d7cd74a940d3fa1ea38"},{"date":"2021-12-23T22:30:24+08:00","author":"MY","message":"✏️更新 数据库相关","hash":"1af8a73d0560274f5e4ada5cb58215285ba80dde"},{"date":"2021-12-23T10:53:50+08:00","author":"cjiping","message":"✏️更新 数据库设计","hash":"441fda99be97f635fd6bc1c08b26924401ca9357"},{"date":"2021-12-23T10:28:14+08:00","author":"cjiping","message":"📦整理 数据库设计","hash":"c6c174f3761328a1bc49048dfaeb4b489e095c6a"}],"createTime":"2021-12-23T10:28:14+08:00"}