{"name":"Kafka","id":"中间件-消息队列-Kafka-Kafka","content":"# kafka\n\nKafka 是一个分布式的基于发布/订阅模式的消息队列（Message Queue），主要应用于大数据实时处理领域\n\n## 特点\n\n- 多生产者 多消费者\n- 基于磁盘的数据存储\n- 伸缩性\n  -  broker可以不断扩展\n- 高性能\n\n## 使用场景\n\n- 活动跟踪\n  - 生产者产生事件 消费者读取事件进行统计\n- 传递消息\n- 度量指标 日志记录\n  - 收集系统度量指标和日志\n- 日志系统\n- 流处理\n- 事件源\n- 消息队列\n\n## 搭建\n\n- 操作系统选用 Linux，可以充分利用 epoll 、零拷贝提升 IO 性能\n- 存储选用磁盘，可以被 Kafka 顺序 IO 充分利用\n- 磁盘容量规划需要计算一下每天处理多少数据，每条数据多大，数据保留多久，在此基础上预留一定额外空间\n- 根据集群节点数，网络带宽，最大只能让 Kafka 使用 70 %的带宽\n\n## 配置\n\nbroker 配置\n\n- broker.id\n  - 在集群中唯一\n  - 需要多少个broker\n    - 需要多少磁盘空间保留数据\n    - 集群处理请求的能力\n- port\n- zookeeper.connect\n- log.dirs\n  - 消息保存在磁盘上的位置\n- num.recovery.threads.per.data.dir\n  - 使用指定的线程池来处理日志\n- auto.create.topics.enable\n  - 自动创建主题\n    - 当一个生产者开始往主题写入消息时\n    - 当一个消费者开始读取\n    - 客户端向主题发送元数据请求\n\n主题配置\n\n- num.partitions\n  - 默认分区数量\n- log.retention.ms\n  - 数据保留多久\n- log.retention.bytes\n  - 主题保留的数据大小\n- log.segment.bytes\n  - 一个日志片段的最大大小\n- log.segment.ms\n  - 日志片段的最长打开时间\n- message.max.bytes\n  - 消息最大大小\n\n## 架构\n\n![屏幕截图 2020-08-12 152955](/assets/屏幕截图%202020-08-12%20152955.png)\n\n- Partition ：为了实现扩展性，一个非常大的 topic 可以分布到多个 broker（即服务器）上，\n一个 topic  可以分为多个 partition，每个 partition 是一个有序的队列；\n- Replica： ：副本，为保证集群中的某个节点发生故障时，该节点上的 partition 数据不丢失，且 kafka 仍然能够继续工作，kafka 提供了副本机制，一个 topic 的每个分区都有若干个副本，\n一个 leader 和若干个 follower。\n- leader ：每个分区多个副本的“主”，生产者发送数据的对象，以及消费者消费数据的对\n象都是 leader。\n  - 生产者和消费者只与 leader 副本交互,当 leader 副本发生故障时会从 follower 中选举出一个 leader,但是 follower 中如果有和 leader 同步程度达不到要求的参加不了 leader 的竞选\n- follower ：每个分区多个副本中的“从”，实时从 leader 中同步数据，保持和 leader 数据\n的同步。leader 发生故障时，某个 follower 会成为新的 follower。\n\nKafka 中消息是以 topic 进行分类的，生产者生产消息，消费者消费消息，都是面向 topic的\n\n每个 partition 对应于一个 log 文件，该 log 文件中存储的就是 producer 生产的数据\n\n消费者组中的每个消费者，都会实时记录自己消费到了哪个 offset，以便出错恢复时，从上次的位置继续消费\n\n### 主题和分区\n\n- 消息通过主题分类\n- 主题被分为若干个分区 通过分区来实现数据冗余和伸缩性\n\n![屏幕截图 2020-08-12 152257](/assets/屏幕截图%202020-08-12%20152257.png)\n\n消息和批次\n  - 消息是kafka的数据单元\n  - 批次是一组消息\n\n对于消息 kafka会保留一段时间或者达到一定大小的字节数 旧的消息会被删除\n\n模式\n  - schema 使用额外的结构定义消息内容\n\n### 日志\n\n消息日志文件（.log）、位移索引文件（.index）、时间戳索引文件（.timeindex）、已中止（Aborted）事务的索引文件（.txnindex）\n\n- .index：K：4字节的相对偏移量，V：4字节的消息物理位置。Kafka 使用了 8 字节的整数表达消息偏移量，但由于每个索引文件额外保存了一个基础偏移量，所以绝对偏移量 = 基础偏移量 + 相对偏移量得到，可以节省不少存储空间\n- .timeindex：K：8字节的时间戳，V：4字节的相对偏移量\n\n```mermaid\nstateDiagram-v2\n  topic --> partition0\n  topic --> partition1\n  topic --> partition2\n  partition1 --> log\n  log --> segment1\n  log --> segment2\n  log --> segment3\n  segment2 --> .log\n  segment2 --> .index\n  segment2 --> .timeindex\n  segment2 --> .txindex\n```\n\n一个非空的日志段 segment 在超过一段时候后，即使还没有写满，也会强制滚动（roll，也就是新建）日志段\n\n#### 日志段写入\n\nProducer 生产的数据会被不断追加到 log 文件的末端，在对该文件进行读写时，Kafka 会充分利用 PageCache 来加速读写，每条数据都有自己的 offset\n\nKafka 在写入消息时，会根据这批写入的最大 offset 、时间戳等来判断要不要追加索引\n\n#### 日志段读取\n\n![index与log文件的作用](/assets/屏幕截图%202020-08-05%20155619.png)\n\n#### 恢复\n\n在启动 broker 时，kafka 会遍历所有日志段。为了从磁盘读取索引数据，对于某一个 segement，恢复操作会从 log 文件重建索引，清除掉之前的索引文件。并删除掉日志文件跟索引文件末尾无效的数据\n\n#### 高水位管理\n\nKafka 使用高水位（HW, Hight WaterMark）来标识分区下的哪些消息是可以被消费者消费以及进行副本间的同步\n\n```java\npublic final class LogOffsetMetadata {\n    ...\n\n    public final long messageOffset; // 消息位移值\n    public final long segmentBaseOffset; // 位移值在日志段的上的位置\n    public final int relativePositionInSegment; // 位移值所在日志段的物理磁盘位置\n\n    ...\n}\n```\n\n消费者只能看到高水位之下的消息\n\n![](/assets/2023113019631.webp)\n\n![屏幕截图 2020-08-21 144435](/assets/屏幕截图%202020-08-21%20144435.png)\n\n#### 日志段管理\n\n```java\npublic class LogSegments {\n  /* the segments of the log with key being LogSegment base offset and value being a LogSegment */\n  private final ConcurrentNavigableMap<Long, LogSegment> segments = new ConcurrentSkipListMap<>();\n}\n```\n\n在写入数据时，Kafka 就是是对最后一个日志段执行的写入操作\n\n```scala\nsegments.activeSegment.append(lastOffset, largestTimestamp, shallowOffsetOfMaxTimestamp, records)\n```\n\n在读取数据时，则是根据起始偏移量、读取多少数据，不断地日志段中读取数据\n\n```scala\nwhile (fetchDataInfo == null && segmentOpt.isPresent) {\n  ...\n  fetchDataInfo = segment.read(startOffset, maxLength, maxPosition, minOneMessage)\n  if (fetchDataInfo != null) {\n    ...\n  } else segmentOpt = segments.higherSegment(baseOffset)\n}\n```\n\n#### 索引文件\n\n```java\npublic abstract class AbstractIndex implements Closeable {\n    ...\n    private final long baseOffset; // 对应日志段对象的起始位移值，如 00000000000000000123.index 123就是起始位移值\n    private final int maxIndexSize; // 控制索引文件的最大长度\n    private final boolean writable;\n\n    private volatile File file;\n\n    // Length of the index file\n    private volatile long length;\n\n    private volatile MappedByteBuffer mmap; // 内存映射磁盘读写\n\n    /**\n     * The maximum number of entries this index can hold\n     */\n    private volatile int maxEntries;\n    /** The number of entries in this index */\n    private volatile int entries;\n    ...\n}\n```\n\nKafka 对 offset 的查找是基于[二分查找](/算法与数据结构/查找.md#二分查找)实现的：\n\n首先通过index文件查找offset所在的大概范围，然后再在这个范围内进行顺序查找，为了使用更少的内存空间，Kafka 采用的是稀疏不连续的索引\n\n其会根据第一条消息的偏移量以及所需读取的大小或者最大能读取的大小，去读取数据\n\nKafka 利用 mmap，将更大的磁盘文件映射到了一个虚拟内存空间，也就是最近读写的数据更有可能在内存中，对于什么读写的冷数据如果进行访问，会触发[缺页中断](/操作系统/内存管理.md#分页)，所以 Kafka 的二分查找会优先查找热区，即最近操作的那部分数据，找到的话就不用去查冷区的数据，以此提升性能\n\n![没有优化：冷区数据触发缺页中断](/assets/20227914738.webp)\n\n优化之后：由于大部分查询集中在索引项尾部，所以把后半部分设置为热区，永远保存在缓存中，如果查询目标偏移量在热区索引项范围，直接查热区，避免页中断\n\n### 主题删除\n\n主题删除过程中，首先会通过复制状态机机制，向 Controller 发送通知，调整主题的所有副本状态，然后移除 zk、controller 关于该主题的所有元数据，最后执行物理磁盘文件的删除操作\n\n### 副本状态机\n\n副本的 7 种状态：\n\n- NewReplica：副本被创建之后所处的状态\n- OnlineReplica：副本正常提供服务时所处的状态\n- OfflineReplica：副本服务下线时所处的状态\n- ReplicaDeletionStarted：副本被删除时所处的状态\n- ReplicaDeletionSuccessful：副本被成功删除后所处的状态\n- ReplicaDeletionIneligible：开启副本删除，但副本暂时无法被删除时所处的状态\n- NonExistentReplica：副本从副本状态机被移除前所处的状态\n\n```mermaid\nstateDiagram-v2\n  NewReplica --> OfflineReplica: broker下线\n  NewReplica --> OnlineReplica: 初始化之后\n  OnlineReplica --> OfflineReplica: broker下线/broker重新上线\n  OfflineReplica --> OnlineReplica: broker下线/broker重新上线\n  OfflineReplica --> OfflineReplica\n  OnlineReplica --> OnlineReplica: leader 副本变更\n  OfflineReplica --> ReplicaDeletionStarted: 删除副本对象\n  ReplicaDeletionStarted --> ReplicaDeletionSuccessful: 删除副本成功\n  ReplicaDeletionStarted --> ReplicaDeletionIneligible: 删除副本失败\n  ReplicaDeletionIneligible --> OnlineReplica\n  ReplicaDeletionIneligible --> OfflineReplica: 重试副本删除\n  ReplicaDeletionSuccessful --> NonExistentReplica: 副本对象被移出副本状态机\n  NonExistentReplica --> NewReplica: 副本对象新创建\n```\n\n当 Controller 接受到状态变更请求时，首先就是判断操作是否有效，无效需要记录一条失败日志，有效则执行对应的操作、变更相关的元数据\n\n### 分区状态机\n\n- NewPartition：分区被创建后被设置成这个状态，表明它是一个全新的分区对象。处于这个状态的分区，被 Kafka 认为是“未初始化”，因此，不能选举 Leader\n- OnlinePartition：分区正式提供服务时所处的状态\n- OfflinePartition：分区下线后所处的状态\n- NonExistentPartition：分区被删除，并且从分区状态机移除后所处的状态\n\n```mermaid\nstateDiagram-v2\n  NewPartition --> OnlinePartition: broker启动或新分区初始化\n  OnlinePartition --> OnlinePartition: 分区选举leader\n  OnlinePartition --> OfflinePartition: broker下线或主题被删除\n  OfflinePartition --> OnlinePartition: 分区选举leader\n  OfflinePartition --> NonExistentPartition: 主题被成功删除\n  NonExistentPartition --> NewPartition: 新分区创建\n```\n\nLeader 选举策略：当由于某种原因，Leader 下线了，需要根据不同情况来选举 Leader\n\n```scala\n// 离线分区Leader选举策略\nfinal case class OfflinePartitionLeaderElectionStrategy(allowUnclean: Boolean) extends PartitionLeaderElectionStrategy\n// 分区副本重分配Leader选举策略  \nfinal case object ReassignPartitionLeaderElectionStrategy extends PartitionLeaderElectionStrategy\n// 分区Preferred副本Leader选举策略\nfinal case object PreferredReplicaPartitionLeaderElectionStrategy extends PartitionLeaderElectionStrategy\n// Broker Controlled关闭时Leader选举策略\nfinal case object ControlledShutdownPartitionLeaderElectionStrategy extends PartitionLeaderElectionStrategy\n```\n\n这几个策略几乎都是选择当前副本有序集合中的、首个处于 ISR 集合中的存活副本作为新的 Leader\n\n当要变更分区状态，就由 Controller 发送相关消息给 broker 们，再由 broker 来执行对每个分区的元数据变更\n\n### zk的作用\n\n主要为 Kafka 提供元数据的管理的功能\n\n- Broker 注册 ：在 Zookeeper 上会有一个专门用来进行 Broker 服务器列表记录的节点\n- Topic 注册：分区信息及与 Broker 的对应关系也都是由 Zookeeper 在维护\n\n## 复制\n\n- leader 副本\n  - 所有生产者请求和消费者请求都会经过这个副本。各个 leader 副本可以分布在不同的 Broker 上, 这样便能提供比较好的并发能力（负载均衡）\n- follower 副本\n  - 从 leader 那里复制消息，保持与 leader 一致的状态。foller 副本极大地提高了消息存储的安全性, 提高了容灾能力，不过也相应的增加了所需要的存储空间\n\n### 副本管理\n\nfollower 会启动一个线程，不断执行以下操作：\n\n- 有必要时，对当前的 follower 副本做截断操作（因为可能发生 leader 切换）\n- 向 leader 发起副本读取请求，接受到数据并进行处理\n\n除了副本同步直接操作分区对象，生产者向 Leader 副本写入消息、消费者组写入组信息、事务管理器写入事务信息（包括事务标记、事务元数据等）这三种操作会通过 ReplaceManager 向副本写入数据\n\n而消费者的读取请求，也会通过 ReplaceManager 来确定读取范围，再从底层的日志读取消息构建结果并返回\n\n### 分区与副本机制\n\nISR：中的副本都是与 leader 同步的副本\n\n为了描述一个副本是否与 leader 副本同步，replica.lag.time.max.ms 用来描述这个最大延迟，如果 follower 副本与 leader 副本的复制延迟超过这个时间，则认为不同步。副本管理还会根据接收到的请求，决定是否将当前副本提升为 leader 副本\n\nLeader epoch：可以用来确定最新的分区副本，由两部分数据组成。一个是Epoch,一个单调增加的版本号。每当副本领导权发生变更时，都会增加该版本号\n\n## 请求处理\n\n```mermaid\nstateDiagram-v2\n  clients --> processor线程\n  processor线程 --> clients\n  state broker {\n    state processor线程 {\n      processor1\n      processor2\n      processor3\n    }\n    processor线程 --> 请求队列\n    请求队列 --> IO线程\n    state IO线程 {\n      IO线程1\n      IO线程2\n      IO线程3\n    }\n    state 响应队列 {\n      processor1响应队列\n      processor2响应队列\n      processor3响应队列\n    }\n    IO线程 --> 响应队列\n    响应队列 --> processor线程\n  }\n```\n\n生产请求：\n\n在消息被写入分区的首领之后，broker 开始检查 acks 配置参数——如果 acks 被设为 0 或 1 ，那么 broker 立即返回响应；如果 acks 被设为 all ，那么请求会被保存在一个叫作炼狱的缓冲区里，直到首领发现所有跟随者副本都复制了消息，响应才会被返回给客户端\n\n获取请求：\n\nbroker 将按照客户端指定的数量上限从分区里读取消息，再把消息返回给客户端。Kafka 使用零复制技术向客户端发送消息(直接从文件系统缓存复制到网卡)，如果应用程序是从文件读出数据后再通过网络发送出去的场景，并且这个过程中不需要对这些数据进行处理，这种场景可以使用[零拷贝](/操作系统/输入输出.md#零拷贝)\n\n```mermaid\nsequenceDiagram\n  消费者 ->> broker: 获取请求\n  alt 积累足够多的消息\n    生产者 ->> broker: 消息\n    生产者 ->> broker: 消息\n    生产者 ->> broker: 消息\n  end\n  broker ->> 消费者: 消息\n```\n\n### 监控指标\n\nKakfa 在 RequestChannel 内保存了一些关于请求的指标：\n\n- RequestsPerSec：每秒处理的 Request 数，用来评估 Broker 的繁忙状态。\n- RequestQueueTimeMs：计算 Request 在 Request 队列中的平均等候时间，单位是毫秒\n- LocalTimeMs：计算 Request 实际被处理的时间。\n- RemoteTimeMs：等待其他 Broker 完成指定逻辑的时间。\n- TotalTimeMs：计算 Request 被处理的完整流程时间\n\n## 可靠数据传递\n\nkafka 的保证：\n\n- 分区消息的顺序\n- 只有当消息被写入分区的所有同步副本时（但不一定要写入磁盘），它才被认为是“已提交”的\n- 只要还有一个副本是活跃的，那么已经提交的消息就不会丢失\n- 消费者只能读取已提交的消息\n\n副本的同步保证：\n\n- 与 Zookeeper 之间有一个活跃的会话，也就是说，它在过去的 6s（可配置）内向Zookeeper 发送过心跳\n- 过去的 10s 内（可配置）从首领那里获取过消息\n- 过去的 10s 内从首领那里获取过最新的消息\n\n### broker\n\n复制系数：\n\n主题级别 replication.factor broker级别  default.replication.factor\n\n如果复制系数为 N，那么在 N-1 个 broker 失效的情况下，仍然能够从主题读取数据或向主题写入数据，同时 它们也会占用N倍的磁盘空间、\n\n不完全首领选举：\n\n如果把 unclean.leader.election.enable 设为 true ，就是允许不同步的副本成为首领 就要承担丢失数据和出现数据不一致的风险\n\n最少同步副本：\n\nmin.insync.replicas 如果要确保已提交的数据被写入不止一个副本，就需要把最少同步副本数量设置为大一点\n\n### 生产者\n\n发送确认：\n\nacks：0  能够通过网络把消息发送出去，那么就认为消息已成功写入\n\n1 ：意味着首领在收到消息并把它写入到分区数据文件（不一定同步到磁盘上）时\n会返回确认或错误响应\n\nall： 首领在返回确认或错误响应之前，会等待所有同步副本都收到消息\n\n重试参数：\n\n对于一些错误 可以通过重试来解决 如： LEADER_NOT_AVAILABLE\n\n### 消费者\n\n显式提交偏移量：\n\n- 处理完事件再提交\n- 批量提交\n- 重试\n- 维护状态\n- 避免对消息处理时间过程 否则会造成无法及时发送心跳\n- 仅一次传递\n  - 暂时支持不了 使用幂等性写入来实现\n\n## 数据管道\n\n需要考虑的问题：\n\n- 及时性\n- 可靠性\n  - 至少一次传递 仅一次传递\n- 吞吐量要求\n  - 高\n  - 动态调整\n- 数据格式与转换问题\n- 安全性\n  - 传输安全\n  - 权限安全\n- 故障处理\n- 数据管道与上下游的耦合\n\n### Connect\n\n启动 connect:\n\n```sh\n./bin/connect-distributed.sh ./config/connect-distributed.properties\n```\n\n文件数据源:\n\n```\nPOST localhost:8083/connectors\n{\"name\":\"load-kafka-config\", \"config\":{\"connector.class\":\"FileStreamSource\",\"file\":\"config/server.properties\",\"topic\":\"kafka-config-topic\"}}\n```\n\n传递文件数据源到主题上\n\n**深入**\n\n- 连接器\n- 任务\n- worker进程\n- 转换器\n- 偏移量管理\n\n## 集群镜像\n\n使用场景：\n\n- 区域集群 中心集群\n- 数据冗余\n- 云迁移\n\n### 集群成员关系\n\n每个集群都有一个broker 充当集群控制器\n\nbroker通过创建临时节点把自己的 ID 注册到 Zookeeper\n\n- 控制器：一个特殊的broker 通过在zk创建临时节点进行选举。控制器负责在节点加入或离开集群时进行分区首领选举，控制器使用epoch 来避免“脑裂”。当临时节点被释放或者内容发生更新，监听临时节点的其他 broker 就会收到通知，进行新一轮的选举。2.8 之后，Kafka 移除了对 zk 的依赖，使用 QuorumController 来实现元数据的管理\n\n```scala\n// 集群元数据\nclass ControllerContext {\n  val stats = new ControllerStats // Controller统计信息类 \n  var offlinePartitionCount = 0   // 离线分区计数器\n  val shuttingDownBrokerIds = mutable.Set.empty[Int]  // 关闭中Broker的Id列表\n  private val liveBrokers = mutable.Set.empty[Broker] // 当前运行中Broker对象列表\n  private val liveBrokerEpochs = mutable.Map.empty[Int, Long]   // 运行中Broker Epoch列表\n  var epoch: Int = KafkaController.InitialControllerEpoch   // Controller当前Epoch值\n  var epochZkVersion: Int = KafkaController.InitialControllerEpochZkVersion  // Controller对应ZooKeeper节点的Epoch值\n  val allTopics = mutable.Set.empty[String]  // 集群主题列表\n  val partitionAssignments = mutable.Map.empty[String, mutable.Map[Int, ReplicaAssignment]]  // 主题分区的副本列表\n  val partitionLeadershipInfo = mutable.Map.empty[TopicPartition, LeaderIsrAndControllerEpoch]  // 主题分区的Leader/ISR副本信息\n  val partitionsBeingReassigned = mutable.Set.empty[TopicPartition]  // 正处于副本重分配过程的主题分区列表\n  val partitionStates = mutable.Map.empty[TopicPartition, PartitionState] // 主题分区状态列表 \n  val replicaStates = mutable.Map.empty[PartitionAndReplica, ReplicaState]  // 主题分区的副本状态列表\n  val replicasOnOfflineDirs = mutable.Map.empty[Int, Set[TopicPartition]]  // 不可用磁盘路径上的副本列表\n  val topicsToBeDeleted = mutable.Set.empty[String]  // 待删除主题列表\n  val topicsWithDeletionStarted = mutable.Set.empty[String]  // 已开启删除的主题列表\n  val topicsIneligibleForDeletion = mutable.Set.empty[String]  // 暂时无法执行删除的主题列表\n  ......\n}\n```\n\nController 是用来管理整个集群的，它会向其他 broker 发送三类请求：\n\n1. LeaderAndIsrRequest：告诉 Broker 相关主题各个分区的 Leader 副本位于哪台 Broker 上、ISR 中的副本都在哪些 Broker\n2. StopReplicaRequest：告知指定 Broker 停止它上面的副本对象，这个请求主要的使用场景是分区副本迁移和删除主题\n3. UpdateMetadataRequest：更新 Broker 上的元数据缓存\n\n### 多集群架构\n\n跨数据中心通信：\n\n- 高延迟\n- 带宽有限\n- 高成本\n\n```mermaid\n---\ntitle: 中心架构\n---\nstateDiagram-v2\n  direction LR\n  北京Kafka集群(部分数据) --> 中心指标Kafka集群(整体数据)\n  上海Kafka集群(部分数据) --> 中心指标Kafka集群(整体数据)\n  广州Kafka集群(部分数据) --> 中心指标Kafka集群(整体数据)\n  厦门Kafka集群(部分数据) --> 中心指标Kafka集群(整体数据)\n```\n\n```mermaid\n---\ntitle: 主从架构\n---\nstateDiagram-v2\n  订单业务Kafka集群 --> 报表统计Kafka集群\n```\n\n```mermaid\n---\ntitle: 双活架构\n---\nstateDiagram-v2\n  北京Kafka集群 --> 广州Kafka集群\n  广州Kafka集群 --> 北京Kafka集群\n```\n\n```mermaid\n---\ntitle: 主备架构\n---\nstateDiagram-v2\n  direction LR\n  主Kafka集群 --> 备Kafka集群\n  用户 --> 主Kafka集群: 正常情况\n  用户 --> 备Kafka集群: 主集群挂掉\n```\n\n### MirrorMaker\n\n```mermaid\n---\ntitle: 多集群架构复制\n---\ngraph LR\n    subgraph 数据中心A\n        A1[生产者] --> A2[Kafka本地集群]\n        A2 --> A3[消费者]\n        A2 --> A4[MirrorMaker]\n    end\n\n    subgraph 数据中心B\n        B1[生产者] --> B2[Kafka本地集群]\n        B2 --> B3[消费者]\n        B2 --> B4[MirrorMaker]\n    end\n\n    subgraph 数据中心C\n        C1[消费者] --> C2\n        C3[MirrorMaker] --> C2[Kafka聚合集群]\n    end\n\n    A4 --> D1[Kafka聚合集群]\n    B4 --> D1\n    D1 --> C3\n```\n\n```mermaid\nstateDiagram-v2\n  state 源Kafka集群 {\n    主题A\n    主题B\n    主题C\n  }\n  主题A --> 消费者1\n  主题B --> 消费者2\n  主题C --> 消费者3\n  state MirrorMaker {\n    消费者1 --> 生产者\n    消费者2 --> 生产者\n    消费者3 --> 生产者\n  }\n  生产者 --> 主题A0\n  生产者 --> 主题B0\n  生产者 --> 主题C0\n  state 目标Kafka集群 {\n    主题A0\n    主题B0\n    主题C0\n  }\n```\n\n如果有可能，尽量让 MirrorMaker 运行在目标数据中心里\n\n## 监控\n\n所有度量指标都可以通过 Java Management Extensions（JMX）接口来访问\n\n### broker\n\n非同步分区数量：\n\n- 如果集群里多个 broker 的非同步分区数量一直保持不变，那说明集群中的某个 broker 已经离线了\n- 如果非同步分区的数量是波动的，或者虽然数量稳定但并没有 broker 离线，说明集群出现了性能问题\n\n关键指标：\n\n- BytesIn/BytesOut：Broker 端每秒入站和出站字节数\n- NetworkProcessorAvgIdlePercent：网络线程池线程平均的空闲比例\n- RequestHandlerAvgIdlePercent：I/O 线程池线程平均的空闲比例\n- UnderReplicatedPartitions：未充分备份的分区数\n- ISRShrink/ISRExpand：ISR 收缩和扩容的频次指标\n- ActiveControllerCount：当前处于激活状态的控制器的数量\n\n其他监控：\n\n- 进程是否启动，端口是否建立，端口能否对外提供服务\n- broker 端日志，服务器日志 server.log，控制器日志 controller.log 以及主题分区状态变更日志 state-change.log\n- broker 端关键线程的运行状态\n  - Log Compaction 线程\n  - 副本拉取消息的线程，通常以 ReplicaFetcherThread 开头\n\n集群问题：\n\n- 不均衡的负载\n- 资源过度消耗\n\n主机问题：\n\n- 硬件\n- 进程冲突\n- 配置问题\n\n### 客户端\n\n- 关注网络RTT\n- 关键线程\n  - 生产者 kafka-producer-network-thread\n  - 消费者 kafka-coordinator-heartbeat-thread\n\n指标：\n\n- 生产者 request-latency，消息生产请求的延时\n- 消费者 lag和lead\n- 消费者组 一个是 join rate，另一个是 sync rate。它们说明了 Rebalance 的频繁程度\n\n## 优化\n\n### 操作系统层优化\n\n- 文件系统挂载优化：禁用 atime（access time）更新以减少文件系统写操作数，提高性能。\n- 文件系统选择：推荐使用ext4或XFS，特别是XFS对于生产服务器具有高性能和高伸缩性。\n- Swap空间设置：设置较小的swappiness值，防止Linux的OOM Killer随意终止进程。\n- 重要系统参数调整：ulimit -n 和 vm.max_map_count的适当调整，确保不出现文件打开过多或内存映射过小的错误。\n- 页缓存大小：重要性关乎Kafka，至少要足够容纳一个日志段的大小，以减少磁盘I/O操作。\n\n### [JVM调优](/编程语言/JAVA/JVM/自动内存管理/调优.md#调优)\n\n### Broker端调优\n\n- 参数值设置：合理设置Broker端参数以匹配生产环境，保持客户端和Broker端版本一致。\n- 版本一致性：保持版本一致以获得性能收益，如Zero Copy功能。\n\n### 应用层调优\n\n- 对象实例管理：避免频繁创建和及时关闭Producer和Consumer对象实例，充分利用多线程改善性能。\n\n### 性能指标调优\n\n- 调优吞吐量：增加num.replica.fetchers、调整缓冲区、压缩算法配置以减少网络I/O、避免设置acks=all和开启重试。\n- 调优延时：在Producer端设置linger.ms=0、不启用压缩、避免设置acks=all，在Consumer端保持fetch.min.bytes=1。\n\n## Kafka Streams 架构\n\n拓扑结构：\n\n```mermaid\nstateDiagram-v2\n  direction LR\n  state 处理器 {\n    计数器 --> 本地状态\n    本地状态 --> 计数器\n  }\n  输入行 --> 拆分成单词\n  拆分成单词 --> 单词列表\n  单词列表 --> 按照单词分组\n  按照单词分组 --> 重分区主题\n  重分区主题 --> 计数器\n  计数器 --> 输出单词数量\n```\n\n对拓扑结构伸缩：\n\n```mermaid\nstateDiagram-v2\n  state 主题 {\n    主题分区1\n    主题分区2\n  }\n  state 任务1 {\n    A --> B\n    B --> C\n  }\n  state 任务2 {\n    D --> E\n    E --> F\n  }\n  state 重分区主题 {\n    重分区主题分区1\n    重分区主题分区2\n  }\n  state 任务3 {\n    G --> H\n    H --> I\n  }\n  state 任务4 {\n    J --> K\n    K --> L\n  }\n  主题分区1 --> 任务1\n  主题分区2 --> 任务2\n  任务1 --> 重分区主题分区1\n  任务1 --> 重分区主题分区2\n  任务2 --> 重分区主题分区1\n  任务2 --> 重分区主题分区2\n  重分区主题分区1 --> 任务3\n  重分区主题分区2 --> 任务4\n```\n","metadata":"","hasMoreCommit":true,"totalCommits":36,"commitList":[{"date":"2024-12-13T15:26:31+08:00","author":"MY","message":"📦Kafka","hash":"669ee24fcbc7d1f943da5f42d773e29c2990942d"},{"date":"2024-12-12T19:27:38+08:00","author":"MY","message":"📦消息队列","hash":"3618b40d42ed38ca8bb10eb028e27a8bc7d6686c"},{"date":"2024-11-20T16:12:20+08:00","author":"MY","message":"📦Kafka","hash":"955524f9775b97e250675e61652f914ad8337055"},{"date":"2023-12-22T17:18:04+08:00","author":"MY","message":"✏Kafka","hash":"22a2b0c9ce09f8a966bb8e8b1e89896e22339fe7"},{"date":"2023-12-21T17:27:36+08:00","author":"MY","message":"✏Kafka","hash":"fa32b1a9ad5a1159864e54fc6fa799375b94ef96"},{"date":"2023-12-20T17:23:36+08:00","author":"MY","message":"✏Kafka","hash":"61b40c834d510b8fc8a940920a81b30a6ab87128"},{"date":"2023-12-19T17:21:46+08:00","author":"MY","message":"✏Kafka","hash":"57c2cd67f589bcd6121be19f2457329ebcdf5071"},{"date":"2023-12-18T19:48:10+08:00","author":"MY","message":"✏Kafka","hash":"b1d6a55d3a19d60a3cc0c26e20e4cc05838963cd"},{"date":"2023-12-15T17:39:29+08:00","author":"MY","message":"✏Kafka","hash":"9f9f6c49a45d87c25d9a0ac567a6ab7fe2a5b4e7"},{"date":"2023-12-14T17:20:04+08:00","author":"MY","message":"✏Kafka","hash":"410d249afb99ccf1223c4b4a8ced20373441289a"}],"createTime":"2019-07-31T11:59:41+08:00"}