{"name":"Linux","id":"操作系统-linux-Linux","content":"# Linux\n\n## 基本概念及操作\n\n### 求助\n\n#### man\n\nman 是 manual 的缩写，将指令的具体信息显示出来\n\n```shell\nman date\n```\n\n代号|\t类型\n-|-\n1\t| 用户在 shell 环境中可以操作的指令或者可执行文件\n2 | 内核可调用的函数与工具库\n3 | 函数库\n4 | 设备文件说明\n5\t| 配置文件\n6 | 游戏\n7 | 协议\n8\t| 系统管理员可以使用的管理指令\n\n#### doc\n\n/usr/share/doc目录下存放了软件的使用说明\n\n### 关机\n\n#### who\n\n```shell\nwho # 查看在线的用户\n```\n\n#### sync\n\n```shell\nsync # 关机之前需要强制内存中的数据同步到磁盘\n```\n\n#### shutdown\n\n```\n# shutdown [-krhc] 时间 [信息]\n-k ： 不会关机，只是发送警告信息，通知所有在线的用户\n-r ： 将系统的服务停掉后就重新启动\n-h ： 将系统的服务停掉后就立即关机\n-c ： 取消已经在进行的 shutdown\n```\n\n### 重启\n\n```sh\nreboot\n```\n\n### PATH\n\n环境变量，用来声明可执行文件的路径，路径之间用 : 分隔\n\n```\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin\n```\n\n#### sudo\n\n允许一般用户执行只有root用户才能执行的命令，只有在/etc/sudoers中配置的用户才能执行\n\n### 包管理工具\n\n- RPM：Redhat Package Manager，YUM基于RPM\n- DPKG：基于 Debian 操作系统的 DEB 软件包管理工具\n\n### 发行版\n\nLinux发行版指的Linux内核及各种应用软件的集成版本\n\n### VIM\n\n三个模式\n\n![批注 2020-03-03 194041](/assets/批注%202020-03-03%20194041.png)\n\n- 一般指令模式（Command mode）：VIM 的默认模式，可以用于移动游标查看内容\n- 编辑模式（Insert mode）：按下 \"i\" 等按键之后进入，可以对文本进行编辑\n- 指令列模式（Bottom-line mode）：按下 \":\" 按键之后进入，用于保存退出等操作\n\n### GNU\n\nGNU的目标是创建一套完全自由的操作系统，称为 GNU，其内容软件完全以 GPL 方式发布\n\n- 以任何目的运行此程序的自由\n- 再复制的自由\n- 改进此程序，并公开发布改进的自由\n\n### 磁盘文件名\n\n在Linux，硬件都被当成一个文件\n\n- IDE 磁盘：/dev/hd[a-d]\n- SATA/SCSI/SAS 磁盘：/dev/sd[a-p]\n\n## 文件系统\n\n### 文件读取\n\n- Ext2\n\n先根据inode查询出所有block，然后再把block里的文件内容读出来\n\n- FAT\n\n这种文件系统没有inode，每个block就像一个链表，存储着下一个block的编号\n\n### 磁盘碎片\n\n指一个文件的block过于分散，磁盘读取时磁头移动距离过大\n\n### 目录\n\n一个目录最少分配一个inode与一个block，block记录了目录下所有文件的inode以及文件名\n\n### 日志\n\next3/ext4 文件系统引入了日志功能，可以利用日志来修复文件系统\n\n### 挂载\n\n利用目录作为文件系统的进入点\n\n### 目录配置\n\nFilesystem Hierarchy Standard (FHS) 规定了 Linux 的目录结构：\n\n- /：root，根目录\n- /usr：unix software resource，所有系统默认软件都会安装到这个目录\n- /var：variable，存放系统或者程序运行过程中的数据文件\n\n## 文件\n\n### 文件属性\n\n```\ndrwxr-xr-x 4 my   my   4096 Mar  4 12:04 ./\n```\n\n- drwxr-xr-x：文件类型及权限，第一位为文件类型字段，后9位位文件权限字段\n  - d：目录\n  - -：文件\n  - l：链接文件\n  - 9 位的文件权限字段中，每 3 个为一组，共 3 组，每一组分别代表对文件拥有者、所属群组以及其它人的文件权限\n  - rwx分布表示可读(readable),可写(writeable),可执行(executeable)\n- 4：链接数\n- my：文件拥有者\n- my：所属群组\n- 4096：文件大小\n- Mar  4 12:04：最后修改时间\n  - modification time (mtime)：文件的内容更新就会更新；\n  - status time (ctime)：文件的状态（权限、属性）更新就会更新；\n  - access time (atime)：读取文件时就会更新。\n\n### 文件与目录的基本操作\n\n- ls\n\n列出文件或者目录的信息，目录的信息就是其中包含的文件\n\n```\n# ls [-aAdfFhilnrRSt] file|dir\n-a ：列出全部的文件\n-d ：仅列出目录本身\n-l ：以长数据串行列出，包含文件的属性与权限等等数据\n```\n\n- cd\n\n更换当前目录\n\n```\ncd [相对路径或绝对路径，如果不填默认是~]\n```\n\n- mkdir\n\n```\n# mkdir [-mp] 目录名称\n-m ：配置目录权限\n-p ：递归创建目录\n```\n\n- rmdir\n\n删除空目录\n\n```\nrmdir [-p] 目录名称\n-p ：递归删除目录\n```\n\n- touch\n\n更新文件时间或者建立新文件\n\n```\n# touch [-acdmt] filename\n-a ： 更新 atime\n-c ： 更新 ctime，若该文件不存在则不建立新文件\n-m ： 更新 mtime\n-d ： 后面可以接更新日期而不使用当前日期，也可以使用 --date=\"日期或时间\"\n-t ： 后面可以接更新时间而不使用当前时间，格式为[YYYYMMDDhhmm]\n```\n\n- cp\n\n复制文件\n\n```\ncp [-adfilprsu] source destination\n-a ：相当于 -dr --preserve=all\n-d ：若来源文件为链接文件，则复制链接文件属性而非文件本身\n-i ：若目标文件已经存在时，在覆盖前会先询问\n-p ：连同文件的属性一起复制过去\n-r ：递归复制\n-u ：destination 比 source 旧才更新 destination，或 destination 不存在的情况下才复制\n--preserve=all ：除了 -p 的权限相关参数外，还加入 SELinux 的属性, links, xattr 等也复制了\n```\n\n- rm\n\n删除文件\n\n```\n# rm [-fir] 文件或目录\n-r ：递归删除\n-i: 删除前询问\n-f：强制删除\n```\n\n- mv\n\n移动文件\n\n```\n# mv [-fiu] source destination\n# mv [options] source1 source2 source3 .... directory\n-f ： force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖\n```\n\n### 修改权限\n\n```\n# chmod [ugoa]  [+-=] [rwx] dirname/filename\n- u：拥有者\n- g：所属群组\n- o：其他人\n- a：所有人\n- +：添加权限\n- -：移除权限\n- =：设定权限\n```\n\n```shell\n# 为所有人添加可执行权限\nchmod a+x test.sh\n```\n\n### 默认权限\n\n文件的默认权限是-rw-rw-rw- ，没有可执行权限\n\n目录的默认权限是drwxrwxrwx\n\n### 目录权限\n\n文件名不是存储在一个文件的内容中，而是存储在一个文件所在的目录中。因此，拥有文件的 w 权限并不能对文件名进行修改\n\n目录存储文件列表，一个目录的权限也就是对其文件列表的权限。因此，目录的 r 权限表示可以读取文件列表；w 权限表示可以修改文件列表，具体来说，就是添加删除文件，对文件名进行修改；x 权限可以让该目录成为工作目录，x 权限是 r 和 w 权限的基础，如果不能使一个目录成为工作目录，也就没办法读取文件列表以及对文件列表进行修改了\n\n### 链接\n\n```\n# ln [-sf] source_filename dist_filename\n-s ：默认是实体链接，加 -s 为符号链接\n-f ：如果目标文件存在时，先删除目标文件\n```\n\n```mermaid\nstateDiagram-v2\n  实体链接  --> inode\n  文件 --> inode\n  符号链接 --> 文件\n```\n\n#### 实体链接\n\n实体链接直接链接了源文件的inode\n\n不能跨越文件系统、不能对目录进行链接\n\n```\nln my.link test.sh\n```\n\n#### 符号链接\n\n符号链接指向的是文件，如果原始文件被删除，符号链接就打不开了\n\n```\nln -s test.sh symbol.link\n```\n\n### 获取内容\n\n- cat\n\n取得文件内容\n\n```\n# cat [-AbEnTv] filename\n-n ：打印出行号，连同空白行也会有行号，-b 不会\n```\n\n- tac\n\n从最后一行开始打印\n\n- more\n\n可以一页一页查看文件内容\n\n- less\n\n比more多了一个向前翻页的功能\n\n- head\n\n取得文件的前几行\n\n```\n# head [-n number] filename\n-n ：后面接数字，代表显示几行的意思\n```\n\n- tail\n\nhead的反向操作，取得后几行\n\n- od\n\n以字符或者十六进制的形式显示二进制文件\n\n### 指令与文件搜索\n\n- which\n\n```\n# which [-a] command\n-a ：将所有指令列出，而不是只列第一个\n```\n\n```sh\nwhich -a ssh\n```\n\n- whereis\n\n文件搜索，只搜索几个特定的目录\n\n```\n# whereis [-bmsu] dirname/filename\n```\n\n- locate\n\n可以用关键字或者正则表达式进行搜索文件\n\nlocate 使用 /var/lib/mlocate/ 这个数据库来进行搜索，它存储在内存中，并且每天更新一次，所以无法用 locate 搜索新建的文件。可以使用 updatedb 来立即更新数据库\n\n```\n# locate [-ir] keyword\n-r：正则表达式\n```\n\n- find\n\n可以使用文件的属性和权限进行搜索\n\n```\n# find [basedir] [option]\nexample: find . -name \"shadow*\"\n```\n\n与时间有关的选项：\n\n```\n-mtime  n ：列出在 n 天前的那一天修改过内容的文件\n-mtime +n ：列出在 n 天之前 (不含 n 天本身) 修改过内容的文件\n-mtime -n ：列出在 n 天之内 (含 n 天本身) 修改过内容的文件\n-newer file ： 列出比 file 更新的文件\n```\n\n![2020359306](/assets/2020359306.png)\n\n与文件拥有者和所属群组有关的选项：\n\n```\n-uid n\n-gid n\n-user name\n-group name\n-nouser ：搜索拥有者不存在 /etc/passwd 的文件\n-nogroup：搜索所属群组不存在于 /etc/group 的文件\n```\n\n与文件权限和名称有关的选项：\n\n```\n-name filename\n-size [+-]SIZE：搜寻比 SIZE 还要大 (+) 或小 (-) 的文件。这个 SIZE 的规格有：c: 代表 byte，k: 代表 1024bytes。所以，要找比 50KB 还要大的文件，就是 -size +50k\n-type TYPE\n-perm mode  ：搜索权限等于 mode 的文件\n-perm -mode ：搜索权限包含 mode 的文件\n-perm /mode ：搜索权限包含任一 mode 的文件\n```\n\n## 压缩与打包\n\n### 压缩指令\n\n- gzip\n\n使用 zcat、zmore、zless 来读取压缩文件的内容\n\n```\n$ gzip [-cdtv#] filename\n-c ：将压缩的数据输出到屏幕上\n-d ：解压缩\n-t ：检验压缩文件是否出错\n-v ：显示压缩比等信息\n-# ： # 为数字的意思，代表压缩等级，数字越大压缩比越高，默认为 6\n```\n\n- bzip2\n\n使用bzcat、bzmore、bzless、bzgrep读取压缩文件的内容\n\n```\n$ bzip2 [-cdkzv#] filename\n-k ：保留源文件\n```\n\n- xz\n\n查看命令：xzcat、xzmore、xzless、xzgrep\n\n### 打包\n\n压缩指令只能对一个文件进行压缩，打包能够将多个文件打包成一个大文件\n\n- tar\n\n```\n-z ：使用 zip；\n-j ：使用 bzip2；\n-J ：使用 xz；\n-c ：新建打包文件；\n-t ：查看打包文件里面有哪些文件；\n-x ：解打包或解压缩的功能；\n-v ：在压缩/解压缩的过程中，显示正在处理的文件名；\n-f : filename：要处理的文件；\n-C 目录 ： 在特定目录解压缩。\n```\n\n一些范例\n\n使用方式|\t命令\n-|-\n打包压缩|\ttar -jcv -f filename.tar.bz2 要被压缩的文件或目录名称\n查 看\t|tar -jtv -f filename.tar.bz2\n解压缩|\ttar -jxv -f filename.tar.bz2 -C 要解压缩的目录\n\n## Bash\n\n通过Shell来请求内核提供服务，Bash是Shell的一种\n\n### 特性\n\n- 命令历史\n- 命令文件补全\n- 命令别名\n- shell脚本\n- 通配符\n\n### 变量操作\n\n```sh\n# 变量赋值\nx=abc\n# 输出变量\necho $x # 输出 abc\nx=\"环境变量 = $PATH\" # 输出 环境变量 = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin\nx='x$PATH' # 单引号内不会进行变量替换 它会输出 x$PATH\nversion=$(uname -r) # 将指令执行结果赋值给变量\n```\n\n```\n$ declare [-aixr] variable\n-a ： 定义为数组类型\n-i ： 定义为整数类型\n-x ： 定义为环境变量\n-r ： 定义为 readonly 类型\n```\n\n### 指令搜索顺序\n\n- 以绝对或相对路径来执行指令，例如 /bin/ls 或者 ./ls ；\n- 由别名找到该指令来执行；\n- 由 Bash 内置的指令来执行；\n- 按 $PATH 变量指定的搜索路径的顺序找到第一个指令来执行。\n\n### 数据流重定向\n\n重定向指的是使用文件代替标准输入、标准输出和标准错误输出\n\n有一个箭头的表示以覆盖的方式重定向，而有两个箭头的表示以追加的方式重定向\n\n1\t|代码|\t运算符\n-|-|-\n标准输入 (stdin)|\t0|\t< 或 <<\n标准输出 (stdout)|\t1|\t> 或 >>\n标准错误输出 (stderr)|\t2|\t2> 或 2>>\n\n```sh\nls &> result # 将ls的所有输出都定向到result文件\n```\n\n## 管道指令\n\n将一个命令的标准输出作为另一个命令的标准输入\n\n```shell\nll | cat -n # 将ll的结果作为cat的输入\n```\n\n### 提取指令\n\n- cut\n\n```\n$ cut\n-d ：使用分隔符对每行进行分割\n-f ：经过 -d 分隔后，使用 -f n 取出第 n 个区间\n-c ：以字符为单位取出区间\n```\n\n```sh\nlast | cut -d ' ' -f 1 # 取出登录的用户\n```\n\n### 排序指令\n\n- sort\n\n```\n$ sort [-fbMnrtuk] [file or stdin]\n-f ：忽略大小写\n-b ：忽略最前面的空格\n-M ：以月份的名字来排序，例如 JAN，DEC\n-n ：使用数字\n-r ：反向排序\n-u ：相当于 unique，重复的内容只出现一次\n-t ：分隔符，默认为 tab\n-k ：指定排序的区间\n```\n\n```sh\nlast | cut -d ' ' -f 1 | sort # 对登录用户进行排序\n```\n\n- uniq\n\n去除重复数据\n\n```\n$ uniq [-ic]\n-i ：忽略大小写\n-c ：进行计数\n```\n\n```sh\nlast | cut -d ' ' -f 1 | sort |uniq -c # 统计用户登录次数\n```\n\n### 双向输出重定向\n\n- tee\n\n```sh\ncat my.link  |tee result # 同时将输出输出到屏幕和result文件\n```\n\n### 字符转换指令\n\n- tr\n\n对字符替换\n\n```sh\nlast | tr '[0-9]' '*' # 把数字替换成*\n```\n\n- col\n\n将tab转换为空格\n\n- expand\n\n将 tab 转换一定数量的空格，默认是 8 个\n\n## 正则表达式\n\n### grep\n\nglobally search a regular expression and print，使用正则表示式进行全局查找并打印。\n\n```\n$ grep [-acinv] [--color=auto] 搜寻字符串 filename\n-c ： 统计匹配到行的个数\n-i ： 忽略大小写\n-n ： 输出行号\n-v ： 反向选择，也就是显示出没有 搜寻字符串 内容的那一行\n--color=auto ：找到的关键字加颜色显示\n```\n\n```sh\nlast |grep 'pts/[0-9]' # 找出pts登录的\n```\n\n### printf\n\n```sh\nprintf '%10s \\n'  $(last |grep 'pts/[0-9]') # 格式化输出，非管道命令，需要通过$()进行数据传递\n```\n\n### awk\n\nawk 每次处理一行，处理的最小单位是字段，每个字段的命名方式为：$n，n 为字段号，从 1 开始，$0 表示一整行\n\n```sh\nlast -n 5 | awk '{print $1 \"\\t\" $3}' # 最近5个登录的用户及ip\n```\n\n## 进程管理\n\n### 查看进程\n\n- ps\n\n```sh\nps -l # 查看自己的进程\nps aux # 查看系统所有进程\n```\n\n- pstree\n\n```sh\npstree -A # 查看所有进程树\n```\n\n- top\n\n```sh\ntop -d 2 # 2秒刷新一次查看进程\n```\n\n### 进程状态\n\n状态|\t说明\n-|-\nR|\trunning or runnable (on run queue) 正在执行或者可执行，此时进程位于执行队列中。\nD|\tuninterruptible sleep (usually I/O) 不可中断阻塞，表示进程正在跟硬件交互，并且交互过程不允许被其他进程或中断打断\nS|\tinterruptible sleep (waiting for an event to complete) 可中断阻塞，此时进程正在等待某个事件完成。\nZ|\tzombie (terminated but not reaped by its parent) 僵死，进程已经终止但是父进程还没有回收它的资源（比如进程的描述符、PID 等）\nT|\tstopped (either by a job control signal or because it is being traced) 结束，进程既可以被作业控制信号结束，也可能是正在被追踪。\nI| idle 空闲状态，用在不可中断睡眠的内核线程上，硬件交互导致的不可中断进程用 D 表示，但对某些内核线程来说，它们有可能实际上并没有任何负载，用 Idle 正是为了区分这种情况\n\n```mermaid\nstateDiagram-v2\n  D --> R: woken\n  R --> Z: exit\n  R --> T: signal\n  T --> R: signal\n  R --> S: interruptible sleep\n  S --> R: woken/signal\n  R --> D: uninterruptible sleep\n```\n\n如果系统或硬件发生了故障，进程可能会在不可中断状态保持很久，甚至导致系统中出现大量不可中断进程\n\n一旦父进程没有通过 wait 、waitpid 处理子进程的终止，还一直保持运行状态，那么子进程就会一直处于僵尸状态。大量的僵尸进程会用尽 PID 进程号，导致新进程不能创建\n\n### SIGCHLD \n\n子进程改变了它的状态时（停止运行，继续运行或者退出），有两件事会发生在父进程中：\n\n- 得到 SIGCHLD 信号；\n  - 子进程发送的 SIGCHLD 信号包含了子进程的信息，比如进程 ID、进程状态、进程使用 CPU 的时间等\n- waitpid() 或者 wait() 调用会返回\n  - 在子进程退出时，它的进程描述符不会立即释放，这是为了让父进程得到子进程信息，父进程通过 wait() 和 waitpid() 来获得一个已经退出的子进程的信息。\n\n#### wait\n\n父进程调用 wait() 会一直阻塞，直到收到一个子进程退出的 SIGCHLD 信号，之后 wait() 函数会销毁子进程并返回\n\n#### waitpid\n\n作用和 wait() 完全相同，但是多了两个可由用户控制的参数 pid 和 options。\n\npid 参数指示一个子进程的 ID，表示只关心这个子进程退出的 SIGCHLD 信号。如果 pid=-1 时，那么和 wait() 作用相同，都是关心所有子进程退出的 SIGCHLD 信号。\n\noptions 参数主要有 WNOHANG 和 WUNTRACED 两个选项，WNOHANG 可以使 waitpid() 调用变成非阻塞的，也就是说它会立即返回，父进程可以继续执行其它任务\n\n### 孤儿进程\n\n父进程退出，而它的一个或多个子进程还在运行，那么这些子进程将成为孤儿进程\n\n孤儿进程将被 init 进程（进程号为 1）所收养，并由 init 进程对它们完成状态收集工作\n\n### 僵尸进程\n\n一个子进程的进程描述符在子进程退出时不会释放，只有当父进程通过 wait() 或 waitpid() 获取了子进程信息后才会释放。如果子进程退出，而父进程并没有调用 wait() 或 waitpid()，那么子进程的进程描述符仍然保存在系统中，这种进程称之为僵尸进程\n\n如果产生大量僵尸进程，将因为没有可用的进程号而导致系统不能产生新的进程","metadata":"","hasMoreCommit":false,"totalCommits":7,"commitList":[{"date":"2024-11-14T14:48:33+08:00","author":"MY","message":"📦操作系统","hash":"ada70dc25cbecbc90a16ef8d80d8dbe99e348414"},{"date":"2024-01-23T20:03:12+08:00","author":"MY","message":"✏Linux","hash":"bd6efb875b074e56cf4e2edf9df33fb35ead36cc"},{"date":"2022-04-28T23:35:20+08:00","author":"MY","message":"✏️更新 文件管理","hash":"80c87cad8d41117e99623d9e8daa920f619abeb5"},{"date":"2020-09-14T10:49:04+08:00","author":"MY","message":"✏更新 Linux","hash":"c3a3d9ec0142babb4a7d1a51ae635420ca2c8fb4"},{"date":"2020-09-13T21:38:40+08:00","author":"MY","message":"✏更新 Linux","hash":"35003e7767d8d5c1ccd75cbe446a32d53591bde7"},{"date":"2020-03-05T10:50:58+08:00","author":"MY","message":"linux 简单复习","hash":"2da6c9ff5b36f32e3aa45721a6aec15b4269d19e"},{"date":"2020-03-03T20:17:37+08:00","author":"MY","message":"linux 增加 ...文件系统","hash":"d31ef46a74e081cfb14463dfe68c7d6e1c4a7f10"}],"createTime":"2020-03-03T20:17:37+08:00"}