{"name":"eBPF","id":"操作系统-linux-eBPF","content":"# eBPF\n\nBPF 需要事件触发后才会执行。这些事件包括系统调用、内核跟踪点、内核函数和用户态函数的调用退出、网络事件等等，BPF 程序几乎可以在内核和应用的任意位置进行插桩\n\n## 工作过程\n\n一个完整的 BPF 程序，通常包含用户态和内核态两部分：用户态程序需要通过 BPF 系统调用跟内核进行交互，进而完成 BPF 程序加载、事件挂载以及映射创建和更新等任务；而在内核态中，eBPF 程序也不能任意调用内核函数，而是需要通过 BPF 辅助函数完成所需的任务\n\n![工作过程](/assets/2023911192131.webp)\n\nBPF 程序可以利用 BPF 映射（map）进行存储，而用户程序通常也需要通过 BPF 映射同运行在内核中的 BPF 程序进行交互\n\n![BPF 映射](/assets/2023911192329.webp)\n\n## 运行原理\n\n![BPF 运行时](/assets/2023912191358.webp)\n","metadata":"","hasMoreCommit":false,"totalCommits":2,"commitList":[{"date":"2023-09-12T19:28:23+08:00","author":"MY","message":"✏BPF","hash":"321b3bc1c2bbdb9897685588d0a43b269ac60de8"},{"date":"2023-09-11T19:45:51+08:00","author":"MY","message":"➕BPF","hash":"a9a4e2bcd5c59bb0ab858901b9105dfe8448ae4b"}],"createTime":"2023-09-11T19:45:51+08:00"}