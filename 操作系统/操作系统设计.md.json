{"name":"操作系统设计","id":"操作系统-操作系统设计","content":"# 操作系统设计\n\n## 设计问题的本质\n\n### 目标\n\n- 定义抽象概念：使用一些抽象概念来具象化操作系统\n- 提供基本操作\n- 确保隔离：进程隔离 故障隔离 用户隔离\n- 管理硬件：驱动硬件来完成软件功能\n\n### 操作系统设计的困难性\n\n- 庞大\n- 并发问题\n- 安全性\n- 通用性\n- 可移植性\n\n## 接口设计\n\n- 从一个系统对外提供的接口开始设计，以此延伸到底层\n\n### 设计原则\n\n关于接口的设计原则，UNIX编程艺术提供了许多，诸如\n\n- 简单：接口的简单性\n- 完备：以最少的接口集合实现尽可能多的功能\n- 效率：接口实现的执行效率\n\n### 范型\n\n选择操作系统对外提供的接口的表现形式\n\n- 用户界面范型：接口对用户的表现形式 如 UI驱动\n- 执行范型：应用程序代码的执行形式\n  - 过程性范型\n  - 事件驱动范型\n- 数据范型：系统的结构对设备对外的表现形式 这种统一的形式并不代表一切操作都能用固定的几个系统调用来完成 还是需要特殊化处理\n  - unix的一切皆文件\n  - 而windows则是使用了句柄达到更通用的效果\n\n### 系统调用接口\n\n> 更多的代码意味着更多的 BUG\n> 不要将牛逼的能力隐藏在抽象的接口后面\n\n## 实现\n\n### 系统结构\n\n- 分层系统\n- 外内核：能在用户进程实现的功能就不要放在内核里\n- 基于微内核的CS系统：内核提供通信能力使各个插件（进程）能相互通信以完成功能\n- 可扩展的系统：以可信的方式将更多的代码置入内核之中\n- 内核线程\n\n### 机制与策略\n\n机制（如何做）与策略（做什么）分离有利于系统保持小巧和良好的结构\n\n- [策略模式](/软件工程/设计模式/行为模式.md#策略模式)\n\n### 正交性\n\n不同概念之间没有交集，可以独立组合，达到更强的能力\n\n### 命名\n\n- 使用名字或标识符来引用操作系统的一些数据结构，比如文件\n\n### 绑定的时机\n\n命名绑定的时机影响实现的简单与否以及灵活与否\n\n- 早期绑定：在程序编译后 变量的位置就已经确定了\n- 晚期绑定：在运行时，动态确定变量位置\n\n### 静态与动态结构\n\n对于内核必须在内存存储的一些数据，使用静态的数据结构，也就是内存是固定的，会简单许多\n\n但对于通用应用，这种数据结构肯定得要是动态的，静态的结构可以预先知道进程如何被调度，而动态的结构则必须待到运行时动态决定\n\n### 自顶向下与自底向上\n\n自顶向下的问题在于首先可用的只有顶层的过程，但这些过程在没有底层支持的情况下基本没法测试\n\n自底向上可以隐藏保护底层的细节，从底部逐层封装，逐层测试\n\n### 同步通信与异步通信\n\n同步的思想很简单，发起一个请求，阻塞直到回复到达，但一定引入并发，事情就复杂了，需要同步、需要锁\n\n异步请求的简单性在于客户端发起请求，然后不阻塞，待请求异步回来时，再处理，这是把复杂性部分从服务端转移到了客户端\n\n### 实用技术\n\n#### 隐藏硬件\n\n使用统一的抽象概念屏蔽硬件细节\n\n使用条件编译来处理针对不同硬件的编程\n\n#### 引用\n\n所谓引用，就是标识符的数值与其表现含义相分离，如1代表A 在另外一种情况下 1 代表 B\n\n映射关系可以改变，这样能获得尽可能大的解耦\n\n#### 可重用性\n\n- 代码的复用\n\n#### 重入\n\n代码具备同时被执行多次的能力\n\n对于无状态代码，当然无所谓，但在操作系统级别，由于寄存器等的存在，好像没那么简单，需要通过互斥量或者锁来对临界资源进行保护\n\n#### 暴力法\n\n对于数据量很少的问题，直接暴力解决就好了，这种问题不值得优化，并且解决方式很简单\n\n#### 检查可能的错误\n\n- 操作系统需要做防御式编程，操作之前要检查所有可能的错误，然后再执行真正操作\n\n## 性能\n\n### 为什么慢\n\n- 更多的特性、做更多的事\n\n### 优化什么\n\n- 足够好就够了，不要追求极致\n\n### 空间时间权衡\n\n无论是空间换时间，还是时间换空间，都需要对算法及数据结构做好深入考量\n\n### 缓存\n\n- 空间换时间的一种形式\n\n### 线索（hint）\n\n缓存总是正确的，线索并不保证正确性，需要调用者自行验证\n\n### 局部性原理\n\n- 最近使用越有可能被使用\n- 最常访问越有可能被访问\n- 使用的空间周围被使用概率更高\n\n## 项目管理\n\n- [人月神话](/软件工程/人月神话.md)\n\n## 设计趋势\n\n- 虚拟化云化\n- 多核化\n- 内存越来越大化\n- 移动化\n- 嵌入式\n","metadata":"","hasMoreCommit":false,"totalCommits":3,"commitList":[{"date":"2022-03-24T16:22:19+08:00","author":"MY","message":"✏️更新 操作系统设计","hash":"ead5fbbb74405ad973b0fe06a2ce73c201e32c8b"},{"date":"2022-03-23T19:39:06+08:00","author":"MY","message":"✏️更新 操作系统设计","hash":"f08c3fcadf2863197d87c80b33832057b0d79369"},{"date":"2019-07-14T16:01:48+08:00","author":"My、","message":"20190714","hash":"a0b18584ac18fda0c2b515010a222dd8b06b1721"}],"createTime":"2019-07-14T16:01:48+08:00"}