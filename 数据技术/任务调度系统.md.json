{"name":"任务调度系统","id":"数据技术-任务调度系统","content":"\n# 任务调度系统\n\n> 分析主流任务调度系统架构、有哪些功能\n\n任务调度通常用于调度ETL（Extract, Transform, Load）作业、数据处理作业、数据分析作业等\n\n调度类型：\n\n- 定时调度\n- 事件触发调度触发等。\n- 依赖关系调度\n- 动态调度：根据系统负载、资源可用性等动态调整任务的执行时间\n\n## 整体流程\n\n```mermaid\nsequenceDiagram\n  用户 ->> 任务解析器: 定义任务\n  任务解析器 ->> 存储器: 持久化任务\n  存储器 ->> 任务调度器: 任务信息\n\n  par\n    任务调度器 ->> 执行器: 分发任务执行\n    执行器 ->> 任务调度器: 更新任务状态\n  end\n  任务调度器 ->> 任务调度器: 决定下一个任务...\n\n  执行器 ->> 监控中心: 上报任务状态、执行日志\n  监控中心 ->> 任务调度器: 控制任务调度\n```\n\n## 任务定义与解析\n\n### 任务类型\n\n#### 原子任务（Task）\n\n- 定时任务\n- 基于事件触发的任务\n\nTask 是调度的基本单位，这种类型的任务通过将依赖关系作为任务的一个属性存储来实现任务编排，如\n\n```json\n{\n  \"task\": \"任务2\",\n  \"precursor\": \"任务0,任务1\"\n}\n```\n\n#### 工作流（WorkFlow）\n\n定义一个DAG，描述任务依赖关系\n\n```mermaid\nstateDiagram-v2\n  direction LR\n  任务0 --> 任务2\n  任务1 --> 任务2\n  任务1 --> 任务3\n  任务3 --> 任务4\n  任务2 --> 任务4\n```\n\n想要支持复杂的任务编排，必须使用工作流模式\n\n### 任务定义\n\n- 内置任务：大部分调度系统都内置了诸如sql spark等类型的任务，对于内置任务，只需要在新建任务时配置对应参数并保存\n- 自定义任务：这种类型的任务一般就需要上传代码，如直接上传jar包，保存脚本代码等。如果调度器跟执行器在同一台机器内，就可以通过指定Class类名的方式进行\n\n也有调度系统实现了自动任务发现的机制，不必显式进行任务配置。但这种方式无法用于复杂的工作流编排\n\n### 任务触发\n\n大部分调度系统都是基于定时触发来触发任务的，部分调度系统可以实现跨任务依赖，即另外等待另外一个任务执行完毕，当前任务才会执行\n\n### 版本控制\n\n对于任务定义，系统会保存多份历史记录，以便能随时回溯\n\n### 任务定义解析相关问题\n\n1. 任务的执行内容如何定义\n2. 定义任务使用原子任务还是工作流\n3. 如何解析任务依赖关系，以什么结构存储解析后的关系\n4. 支持哪些触发方式\n5. 如何进行版本控制\n\n## 存储\n\n### 隔离\n\n调度系统可以为不同任务划分不同任务组，进行一定程度的隔离，避免互相影响。同时也可以根据任务组的特点，有针对性地将组下的任务调度到特定执行器上。\n\n### 存储相关问题\n\n1. 需不需要任务组隔离\n2. 以什么结构存储任务信息\n\n## 调度执行\n\n### 调度策略\n\n批处理系统最关心的就是吞吐量，大部分用都是都是FCFS这种策略\n\n1. 先来先服务 first-come first-serverd（FCFS）\n2. 短作业优先 shortest job first（SJF）\n3. 最短剩余时间优先 shortest remaining time next（SRTN）\n\n### 重试\n\n调度系统支持在任务定义阶段，配置任务失败重试次数\n\n- 全部重试\n- 部分重试：从工作流DAG的某一个节点重跑，这种重试也被叫做补数\n\n重试需要任务本身是无状态的，或者任务自己做好重试相关处理\n\n### 优先级\n\n优先级是作为任务或者工作流的一个属性，当有多个任务被等待调度时，通过该属性进行排序\n\n### 执行资源\n\n有些调度系统会统一管理数据源，以方便在任务定义阶段能以统一的方式使用\n\n### 参数\n\n调度中涉及到的配置、环境信息等，都通过参数传递，任务能以特定的接口，读取这些参数，以在执行过程中使用：\n\n- 内置参数：如任务的基础信息等\n- 全局参数：指针对整个工作流的所有任务节点都有效的参数，在工作流定义页面配置\n- 本地参数：在任务定义页面配置的参数，默认作用域仅限该任务，如果配置了参数传递则可将该参数作用到下游任务中\n\n### 调度执行相关问题\n\n1. 如何重试任务（全部重试、部分重试）\n2. 如何分发任务（分布式）\n3. 任务优先级如何实现\n4. 任务执行涉及到的资源如何管理\n5. 上下游任务如何进行信息传递\n6. 如何保证不重复调度\n7. 如何支持工作流的上下线，正在运行中的工作流如何优雅下线\n\n## 监控\n\n### 监控数据\n\n有些系统支持向外透出指标与监控组件集成的方式提高监控能力，一些常见的监控指标：\n\n- timeout：超时的任务数量\n- finish：完成的任务数量，成功和失败的任务都算在内\n- success：成功完成的任务数量\n- fail：失败的任务数量\n- stop：暂停的任务数量\n- retry：重试的任务数量\n- submit：已提交的任务数量\n- failover：容错的任务数量\n- ...\n\n### 日志\n\n除了调度本身产生的日志，任务执行产生的日志也能被监控，具体原理就是监控日志文件并与任务关联，从而可以在调度中心可以实时监控脚本运行情况\n\n### 质量监控\n\n用于检查数据在集成、处理过程中的数据准确性\n\n- Accuracy：准确性。如是否符合表的加工逻辑。\n- Completeness：完备性。如数据是否存在丢失。\n- Timeliness：及时性。如表数据是否按时产生。\n- Uniqueness：唯一性。如主键字段是否唯一。\n- Validity：合规性。如字段长度是否合规、枚举值集合是否合规。\n- Consistency：一致性。如表与表之间在某些字段上是否存在矛盾\n\n### 监控相关问题\n\n1. 如何上报监控数据，上报哪些监控数据\n2. 如何告警、告警渠道\n3. 如何记录日志，日志要包含哪些信息\n\n","metadata":"","hasMoreCommit":false,"totalCommits":2,"commitList":[{"date":"2024-06-07T16:52:43+08:00","author":"MY","message":"✏数据工程","hash":"73c5aa52aae75df6b029c35992649a51797cac80"},{"date":"2024-06-03T19:23:36+08:00","author":"MY","message":"➕任务调度系统","hash":"74288bd89e29775b9fc4220ee149a19b4c09272e"}],"createTime":"2024-06-03T19:23:36+08:00"}