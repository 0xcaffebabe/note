{"name":"数据中台","id":"数据技术-数据中台","content":"# 数据中台\n\n数据中台的核心，是避免数据的重复计算，通过数据服务化，提高数据的共享能力，赋能数据应用\n\n## 解决的问题\n\n1. 指标口径不一致\n2. 数据重复建设，需求响应时间长\n3. 取数效率低\n4. 数据质量差\n5. 成本线性增长\n\n解决这些问题的出路就是同一数据只被加工一次，只有一个出口，由于只有一个出口，就对质量提出更高的要求，需要使用监控手段，及时发现解决数据问题，同时有了中台，成本的问题也就解决了，毕竟节省了资源\n\n数据中台本身不创造价值，只有数据应用使用了中台的数据，才会产生价值\n\n## 建设\n\n### 方法论\n\n- OneData 所有数据只加工一次\n- OneService 数据即服务，强调数据中台中的数据应该是通过 API 的方式被使用\n\n### 支撑技术\n\n1. 大数据基础设施\n2. 大数据平台\n3. 数据治理\n4. 数据服务\n5. 数据应用\n\n### 组织架构\n\n中台团队既要独立业务线，又要深入业务\n\n## 元数据中心\n\n- 数据字典：描述的是数据的结构信息 库、表、列...\n- 数据血缘：指一个表是直接通过哪些表加工而来\n- 数据特征：主要是指数据的属性信息 标签、热度、存储空间...\n\n![网易元数据中心架构](/assets/20221215182120.webp)\n\n基于元数据中心可以构建数据地图，对于提高数据发现的效率，实现非技术人员自助取数有重要作用\n\n### 开源方案\n\n- Metacat：直连数据源拉取元数据信息\n- Apache Atlas：通过静态或者动态分析SQL，得到SQL的输入表和输出表\n\n## 指标管理\n\n### 混乱问题\n\n- 相同指标名称，实际定义不同\n- 实际定义一样，指标名称不同\n- 不同限定词，描述相同事实过程的两个指标，相同事实定义不一样\n- 指标定义描述不清晰、错误\n- 指标名称难理解\n\n### 规范化\n\n```mermaid\nstateDiagram-v2\n  业务线 --> 主题域\n  主题域 --> 业务过程\n  业务过程 --> 原子指标\n  业务过程 --> 派生指标\n  主题域 --> 维度\n```\n\n- 派生指标 = 统计周期 + 统计粒度 + 业务限定 + 原子指标\n\n命名：\n\n- 原子指标：动作 + 度量\n- 派生指标：修饰词_原子指标_时间周期\n\n关联应用与可分析维度：指标被哪些应用使用、指标有哪些维度\n\n分级管理：一级指标由中台产出负责、二级指标由数据应用根据原子指标进行派生\n\n### 指标新建\n\n```mermaid\nstateDiagram-v2\n  提交指标需求 --> 需求评审\n  需求评审 --> 模型设计与代码开发\n  需求评审 --> 已存在表\n  已存在表 --> 设计逻辑模型\n  设计逻辑模型 --> 数据验证与发布模型\n  数据验证与发布模型 --> 应用接入\n  模型设计与代码开发 --> 数据验证与发布上线\n  数据验证与发布上线 --> 应用接入\n```\n\n### 已有指标梳理\n\n1. 指标治理小组\n2. 指标梳理时间计划\n3. 盘点还在使用的数据报表和数据应用\n4. 收集使用中的报表和应用的指标\n   1. 指标展示名称\n   2. 指标标识\n   3. 业务定义\n   4. 数据来源\n   5. 分析维度\n   6. 数据应用\n   7. 计算逻辑\n5. 评审指标的业务口径、对相同的进行去重合并\n6. 根据业务口径明确主题域、业务过程\n7. 拆分指标类型、录入指标系统\n\n## 模型设计\n\n### 好模型的衡量\n\n- 完善度：底层数据被上层数据引用的数量，汇总数据能直接满足多少查询需求\n- 复用度：模型引用系数：一个模型被读取，直接产出下游模型的平均数量，系数越高复用越好\n- 规范度：命名规范、定义一致\n\n### 建设\n\n1. 接管底层数据源，控制源头，只能在数据中台保持一份\n2. 划分主题域，加入一个主题域，不影响已经划分的主题域的表\n3. 构建一致性维度，需要区分公共维度，特有维度，根据维度需求不同，分成不同的维度表\n4. 事实表整合，统计粒度必须保持一致，不同统计粒度的数据不能出现在同一个事实表中\n5. 模型开发，即开发跑数据的ETL，需要注意的一些点：管理好任务依赖、及时删除临时表、管理好数据的生命周期...\n6. 应用迁移，意数据的比对，确保数据的完全一致，然后进行应用迁移，删除老的数据表\n\n## 数据质量\n\n### 问题根源\n\n- 源系统数据格式、表结构变更、格式异常\n- 数据任务本身有问题\n- 资源不足、基础设施不稳定\n\n### 提高质量\n\n1. 通过检查任务，定时核查数据正确性、延迟\n2. 通过监控保证按时产出\n3. 规范化管理\n\n### 质量度量\n\n- 任务产出完成率\n- 表级别的质量分数\n- 告警次数\n- 数据产品SLA\n\n## 成本\n\n### 成本陷阱\n\n- 没有使用，但一直在消耗成本\n- 低价值产出\n- 高成本\n\n### 成本管理\n\n#### 资产盘点\n\n建立全链路数据资产试图，核算成本、核算价值\n\n#### 发现问题\n\n通过使用率、价值衡量发现有成本陷阱的数据\n\n#### 治理优化\n\n下线掉无人使用的数据，对于高成本的数据，进行计算与存储优化\n\n#### 评估\n\n成本计算：计算成本 + 存储成本 / 数据带来的价值\n\n## 数据服务\n\n要让数据服务成为数据的唯一出口\n\n### 解决的问题\n\n- 接入效率低，同样的数据，提供给不同的数据应用，可能就需要不同的存储\n- 由于数据应用对数据的需求不同，数据也很难复用\n- 无法追溯数据的使用情况\n- 底层数据的变更影响到数据应用\n\n### 功能\n\n- 规范化接口定义：对各个数据应用屏蔽了不同的中间存储，提供的是统一的 API\n- 数据网关：要实现鉴权、限流、监控\n- 全链路打通：如果某些应用真的需要直接使用数据表，要通过审核、打标签关联，这样才可以追溯数据的使用\n- 推拉交付：不仅提供拉的接口，也可以提供诸如消息队列的推数据接口\n- 中间存储：提前做好常见的存储支持，如Redis、ES，满足不同的性能需求\n- 逻辑模型：类似于数据库的视图，在查询时动态拼接，一个模型就能给多方使用，提高数据的利用率\n- API 市场：应用开发者可以直接在 API 集市发现已有的数据接口，直接申请该接口的 API 权限，即可访问该数据，不需要重复开发\n\n### 架构设计\n\n- 云原生：高可用、服务隔离、动态扩缩容之类的特性对于服务接口都是必须的\n- 逻辑模型：服务接到查询请求后，根据逻辑模型和物理模型字段的映射关系，将逻辑执行计划拆解为面向物理模型的物理执行计划，并下发多个物理模型上去执行，最后对执行的结果进行聚合\n- 数据自动导出：每次调度产出任务结束，就会触发数据导出服务，将数据导出到中间存储中，此时 API 接口就可以查询到最新的数据\n\n## 数据安全\n\n- 备份与恢复\n- 垃圾回收：防误删\n- 权限管理\n- 操作审计\n- 开发与生产环境隔离\n\n## 数据应用\n\n- 初级阶段：报表\n- 发展阶段：根据数据持续监控业务过程，发现问题、诊断分析，并给出决策建议，最后需要一键执行决策\n- 高级阶段：自助取数，让每个人都能基于数据去做分析和决策\n\n## 数据研发流程\n\n### 需求\n\n提出指标需求 -> 评审指标需求 -> 产出指标业务定义、数据来源、计算逻辑\n\n### 研发\n\n基于主题域、分层进行设计模型 -> 同步数据 -> 编写对应任务的代码 -> 进行数据测试以验证是否符合预期以及是否正确 -> 代码静态检查、配置相关监控手段以保证符合质量\n\n### 交付\n\n数据被抽取到中间件上或者暴露接口对外提供数据服务\n\n### 运维\n\n数据任务出现异常，有完善的报警机制召唤先关负责人，保证问题被及时处理\n\n## 流程协作\n\n### 数据分析流程\n\n#### 认识数据\n\n通过指标系统以及数据地图帮助分析师知道有哪些数据可以用\n\n#### 探索式分析\n\n通过数据帮助分析师找到问题\n\n#### 可视化呈现\n\n基于数据，可视化分析结果\n\n#### 固化流程\n\n将问题分析解决思路固化到产品中，自动生成决策建议，解放人力\n\n### 资产管理流程\n\n- 成本管理：下线掉无用、低价值的产品，需要打通管理员与数据负责人信息通道，实现通知、一键下线\n- 与数据权限的审批流程、模型和任务发布上线的审批流程打通，根据不同的资产等级，需要不同级别的角色来完成审批\n","metadata":"","hasMoreCommit":false,"totalCommits":4,"commitList":[{"date":"2022-12-19T18:18:19+08:00","author":"cjiping","message":"✏️数据中台","hash":"306a21d9a29bc7b1ac6488395a0fa3c63ca31389"},{"date":"2022-12-18T17:02:10+08:00","author":"MY","message":"✏️数据中台","hash":"6cc3ee53fee6002cd77c758e51ebb12b3b2d6eb7"},{"date":"2022-12-16T18:28:15+08:00","author":"cjiping","message":"✏️数据中台","hash":"374c31f5ae4e199a45a5befd28316761fb34d0dc"},{"date":"2022-12-15T18:28:03+08:00","author":"cjiping","message":"➕数据中台","hash":"7ed7c853c45ede6ed6494db90a70b36574f421a1"}],"createTime":"2022-12-15T18:28:03+08:00"}