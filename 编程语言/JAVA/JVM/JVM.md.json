{"name":"JVM","id":"编程语言-JAVA-JVM-JVM","content":"# JVM\n\n- 系统虚拟机\n- 软件虚拟机\n\n```mermaid\nstateDiagram-v2\n  x.java --> javac\n  javac --> x.class\n  x.class --> ClassLoader\n  state jvm {\n    ClassLoader --> 字节码解释器\n    java类库 --> ClassLoader\n    ClassLoader --> JIT即时编译器\n    JIT即时编译器 --> 执行引擎\n    字节码解释器 --> 执行引擎\n  }\n  执行引擎 --> 系统硬件\n```\n\nJVM是一种规范\n\nJDK14:<https://docs.oracle.com/javase/specs/jvms/se14/jvms14.pdf>\n\n## 常见JVM实现\n\n- Hotspot\n- Jrockit\n- J9\n\n越过操作系统的虚拟机：\n\n- LiquidVM\n- azul zing\n\n其他：\n\n- Apache Harmony\n- Android Dalvik\n- Microsoft JVM\n\n### 未来的趋势\n\n- GraalVM：将这些语言的源代码（例如JavaScript）或源代码编译后的中间格式（例如LLVM字节码）通过解释器转换为能被Graal VM接受的中间表示\n- Graal编译器：新一代即时编译器\n- Native化：提前编译\n- 功能越来越多：监控 调试\n- 语法特性持续增强\n\n## JDK JRE JVM\n\n![批注 2020-07-10 090055](/assets/批注%202020-07-10%20090055.png)\n\n## JVM 体系结构\n\n![202010510539](/assets/202010510539.png)\n\n- 类加载器\n- 内存区\n- 执行引擎\n\n基于栈的架构：\n\n- 平台无关 不同的平台寄存器各不相同\n- 基于栈的寄存器指令更加紧凑\n\n执行引擎的架构：\n\n![屏幕截图 2020-10-05 103533](/assets/屏幕截图%202020-10-05%20103533.png)\n\n执行引擎的执行过程：\n\n偏移量|指令|说明\n-|-|-\n0:|iconst1|常数1入栈\n1:|istore_1|将栈顶元素移入本地变量1存储\n2:|iconst2|常数2入栈\n3:|istore2|将栈顶元素移入本地变量2存储\n4:|i1oad1|本地变量1入栈\n5:|i1oad2|本地变量2入栈\n6:|iadd|弹出栈顶两个元素相加\n7:|bipush| 将10入栈\n9:|imul|栈顶两个元素相乘\n10:|istore3|栈顶元素移入本地变量3存储\n11:|return|返回\n\n方法调用：\n\n执行方法调用指令时 会创建一个新栈帧 这个栈帧会存储传递过来的参数\n\n## 编译JDK\n\n- 安装依赖库\n\n```sh\napt install libfreetype6-dev\napt install libcups2-dev\napt install libx11-dev libxext-dev libxrender-dev libxrandr-dev libxtst-dev libxt-dev\napt install libasound2-dev\napt install libffi-dev\napt install autoconf\n```\n\n- 准备一个目标JDK-1的bootstrap jdk\n\n```sh\nsudo apt-get install openjdk-11-jdk\n```\n\n- 编译前配置与检查\n\n```sh\nbash configure --enable-debug --with-jvm-variants=server\n```\n\n- 开始编译\n\n```sh\nmake images\n```\n","metadata":"","hasMoreCommit":false,"totalCommits":10,"commitList":[{"date":"2023-11-27T17:19:45+08:00","author":"MY","message":"📦清理大图","hash":"fafd16978c7437cbbe855ac44c6d7d3c89b3ddb6"},{"date":"2020-10-14T16:21:20+08:00","author":"MY","message":"✏更新 JVM","hash":"35e0fdb1eccc80fdec1f05e3226ca05c5f0cdbe0"},{"date":"2020-10-05T11:06:22+08:00","author":"MY","message":"✏更新 JVM","hash":"108d40170e80839a200e4ad41c141b22bff6509b"},{"date":"2020-07-10T09:10:24+08:00","author":"MY","message":"✏更新 JVM","hash":"1c426e3ba85942e245f105e1c855491615772a1b"},{"date":"2020-01-04T14:54:56+08:00","author":"MY","message":"增加JAVA引用类型","hash":"a7e59003706dd9b2728241b796aef0decf68046b"},{"date":"2020-01-03T14:36:12+08:00","author":"MY","message":"JVM内存结构起头","hash":"dd1eceeaac95512c95d3e7572c30860740cf8233"},{"date":"2019-12-20T16:42:06+08:00","author":"MY","message":"添加了信息检索论文与字节码","hash":"6c90de4da3363f523b9f803cc720a6bd39501a2a"},{"date":"2019-11-24T22:38:01+08:00","author":"MY","message":"新增了JAVA字节码相关","hash":"05df66e915a2c7b1b665c247dd535b8d72d41c99"},{"date":"2019-11-23T17:02:59+08:00","author":"MY","message":"新增JVM 内存分析工具 垃圾回收算法& JAVA内部类相关","hash":"239fd2c338b6fb9891db155442e5753782bcbca5"},{"date":"2019-11-22T22:35:23+08:00","author":"MY","message":"新增了JVM运行参数&内存模型","hash":"186025a89ddc8409befc076481432a1f21e64789"}],"createTime":"2019-11-22T22:35:23+08:00"}