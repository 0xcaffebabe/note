{"name":"前端编译与优化","id":"编程语言-JAVA-JVM-前端编译与优化","content":"# 前端编译与优化\n\n将.java编译为.class\n\n## 编译过程\n\n```java\ninitProcessAnnotations(processors, sourceFileObjects, classnames); // 插入注解处理器\n...\nprocessAnnotations( // 注解处理\n    enterTrees(\n        stopIfError(CompileState.PARSE,initModules(stopIfError(CompileState.PARSE, parseFiles(sourceFileObjects))))\n    ),\n    classnames\n);\n...\ncase BY_TODO: // 分析及字节码生成\n    while (!todo.isEmpty())\n          generate(desugar(flow(attribute(todo.remove()))));\n    break;\n```\n\n### 准备过程：初始化插入式注解处理器\n\n### 解析与填充符号表\n\n#### 词法、语法分析\n\n将源代码的字符流转变为标记集合，构造出抽象语法树\n\n如int a = b 解析出int,a,=,b四个符号\n\n经过词法和语法分析生成语法树以后，编译器就不会再对源码字符流进行操作了，后续的操作都建立在抽象语法树之上\n\n#### 填充符号表\n\n产生符号地址和符号信息\n\n符号表中所登记的信息在编译的不同阶段都要被用到\n\n### 注解处理\n\n插入式注解处理器的执行阶段\n\n可以把插入式注解处理器看作是一组编译器的插件，当这些插件工作时，允许读取、修改、添加抽象语法树中的任意元素。如果这些插件在处理注解期间对语法树进行过修改，编译器将回到解析及填充符号表的过程重新处理，直到所有插入式注解处理器都没有再对语法树进行修改为止\n\n### 分析与字节码生成\n\n语义分析的主要任务则是对结构上正确的源程序进行上下文相关性质的检查，譬如进行类型检查、控制流检查、数据流检查\n\n#### 标注检查\n\n标注检查步骤要检查的内容包括诸如变量使用前是否已被声明、变量与赋值之间的数据类型是否能够匹配等等\n\n这个阶段会对源代码做一个常量折叠的代码优化\n\n#### 数据流及控制流分析\n\n数据流分析和控制流分析是对程序上下文逻辑更进一步的验证，它可以检查出诸如程序局部变量在使用前是否有赋值、方法的每条路径是否都有返回值、是否所有的受查异常都被正确处理了等问题\n\n比如final局部变量的不可修改性就是在这个阶段进行保证\n\n#### 解语法糖\n\n将简化代码编写的语法糖还原为原有的形式\n\n#### 字节码生成\n\n将前面各个步骤所生成的信息转化成字节码\n\n实例构造器`<init>()`方法和类构造器`<clinit>()`方法就是在这个阶段被添加到语法树之中的\n\n## Java 语法糖\n\n### 泛型\n\nJava 的泛型是在编译阶段解决的 也就说在运行阶段泛型的类型都被擦除了，所以以下几种用法都有问题\n\n```java\npublic class TypeErasureGenerics<E> {\n  public void doSomething(Object item) {\n    if (item instanceof E) { // 不合法，无法对泛型进行实例判断\n      ...\n    }\n    E newItem = new E(); // 不合法，无法使用泛型创建对象\n    E[] itemArray = new E[10]; // 不合法，无法使用泛型创建数组\n  }\n}\n```\n\nJava 之所以要在编译之后抹除泛型 很大的一个原因就是为了保证向后兼容 也就是高版本JVM可以运行低版本Class文件\n\n由于Java 采用的是通过在某些地方插入类型转换字节码的方式来实现泛型，所以擦除泛型带来了一些问题：\n\n1. 无法支持原生类型 因为原生类型无法转换为Object\n2. 运行期无法获取到泛型类型，必须通过额外的手段（比如方法传入一个Class对象）\n\n后来引入了诸如Signature、LocalVariableTypeTable等新的属性用于解决伴随泛型而来的参数类型的识别问题\n\n### 自动装拆箱 遍历循环\n\n```java\npublic static void main(String[] args) {\n  List<Integer> list = Arrays.asList(1, 2, 3, 4);\n  int sum = 0;\n  for (int i : list) {\n    sum += i;\n  }\n  System.out.println(sum);\n}\n```\n编译之后：\n\n```java\npublic static void main(String[] args) {\nList list = Arrays.asList( new Integer[] {\n  Integer.valueOf(1),\n  Integer.valueOf(2),\n  Integer.valueOf(3),\n  Integer.valueOf(4) });\n  int sum = 0;\n  for (Iterator localIterator = list.iterator(); localIterator.hasNext(); ) {\n    int i = ((Integer)localIterator.next()).intValue();\n    sum += i;\n  }\n  System.out.println(sum);\n}\n```\n\n### 条件编译\n\n使用常量作为条件 可以条件编译代码块 编译期编译期会把死代码消除掉\n\n```java\nif (condition){\n  ...\n}\n```\n\n## 实战-自定义注解处理器\n\n```java\n@SupportedAnnotationTypes(\"*\")\n@SupportedSourceVersion(SourceVersion.RELEASE_8)\npublic class NameScanner extends AbstractProcessor {\n    @Override\n    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n        System.out.println(annotations);\n        return false;\n    }\n}\n```\n\n运行时指定处理器：\n\n```sh\njavac -processor wang.ismy.jvm.annotation.NameScanner wang/ismy/jvm/Main.java\n```\n","metadata":"","hasMoreCommit":false,"totalCommits":2,"commitList":[{"date":"2024-11-19T10:32:03+08:00","author":"MY","message":"📦JVM 编译与优化","hash":"c70770d86f8e3129c88f6602f63dd0c42e17bbf1"},{"date":"2020-11-08T16:28:16+08:00","author":"MY","message":"➕增加 JVM 前端编译与优化","hash":"1b6bd1e49abbff3d90705b3a177450a8075a6a29"}],"createTime":"2020-11-08T16:28:16+08:00"}