{"name":"类加载机制","id":"编程语言-JAVA-JVM-类加载机制","content":"# 类加载机制\n\n## 类加载过程\n\n```mermaid\nstateDiagram-v2\n    direction LR\n    state 链接 {\n        direction LR\n        验证 --> 准备\n        准备 --> 解析\n    }\n    加载 --> 链接\n    链接 --> 初始化\n    初始化 --> 使用\n    使用 --> 卸载\n```\n\n将.class字节流实例化成Class对象并进行相关初始化的过程\n\n### 加载\n\n- 通过类的完全限定名称获取该类的二进制字节流\n  - 可从zip包读取，如jar、war\n  - 可从网络获取\n  - 运行时动态生成\n- 将字节流表示的静态存储结构转换为方法区的运行时存储结构\n- 在内存中生成一个代表该类的 Class 对象，作为方法区中该类各种数据的访问入口\n\n对于数组类的创建：数组类本身不通过类加载器创建，由Java虚拟机直接在\n内存中动态构造出来的\n\n### 验证\n\n目的是确保Class文件的字节流中包含的信息符合《Java虚拟机规范》的全部约束要求，验证阶段的工作量在虚拟机的类加载过程中占了相当大的比重\n\n#### 文件格式验证\n\n验证字节流是否符合Class文件格式的规范，并且能被当前版本的虚拟机处理。\n\n该验证阶段的主要目的是保证输入的字节流能正确地解析并存储于方法区之内\n\n#### 元数据验证\n\n对字节码描述的信息进行语义分析，主要目的是对类的元数据信息进行语义校验，保证不存在与《Java语言规范》定义相悖的元数据信息\n\n#### 字节码验证\n\n对类的方法体（Class文件中的Code属性）进行校验分析，保证被校验类的方法在运行时不会做出危害虚拟机安全的行为\n\n#### 符号引用验证\n\n这个阶段检查该类是否缺少或者被禁止访问它依赖的某些外部类、方法、字段等资源\n\n### 准备\n\n准备阶段为类变量分配内存并设置初始值，使用的是方法区的内存\n\n基本数据类型的初始值：\n\n数据类型      | 零值\n--------- | --------\nint       | 0\nlong      | 0L\nshort     | (short)0\nchar      | '\\u0000'\nbyte      | (byte)0\nboolean   | false\nfloat     | 0.0f\ndouble    | 0.0d\nreference | null\n\n### 解析\n\n确保类与类之间的相互引用正确性\n\n- 符号引用（Symbolic References）：符号引用以一组符号来描述所引用的目标\n- 直接引用（Direct References）：直接引用是可以直接指向目标的指针、相对偏移量或者是一个能间接定位到目标的句柄\n\n解析阶段是将常量池的符号引用替换为直接引用的过程\n\n#### 类或接口的解析\n\n在解析类的时候，如果当前处于类D，则加载其他类的职责会交给类D的类加载器，在加载类时，会检查类D是否有访问权限（修饰符以及模块访问权限）\n\n#### 字段解析\n\n字段解析的过程中会按照继承链从下往上进行查找，当查找到引用时，也会进行检查权限\n\n#### 类方法解析\n\n方法解析首先会判断是否为接口，如果是接口 直接抛出异常\n\n否则跟字段解析一样递归从下往上查找，递归查找不到就会查找父接口等，再找不到就抛出异常，如果找到了同样也会进行权限检查\n\n#### 接口方法解析\n\n如果发现不是接口 抛出异常\n\n递归查找父接口 直到Object 否则就查找失败\n\n同样如果查找到会进行权限检查\n\n### 初始化\n\n初始化阶段是虚拟机执行类构造器 `<clinit>()` 方法的过程\n\n`<clinit>()` 是由编译器自动收集类中所有类变量的赋值动作和静态语句块中的语句合并产生的，编译器收集的顺序是由语句在源文件中出现的顺序决定的\n\n- 静态语句块中只能访问到定义在静态语句块之前的变量，定义在它之后的变量，在前面的静态语句块可以赋值，但是不能访问\n\n```java\nstatic {\n    i=1; // 可以赋值\n    System.out.println(i); // 无法通过编译\n}\nstatic int i =0;\n```\n\n- Java虚拟机会保证在子类的`<clinit>()`方法执行前，父类的`<clinit>()`方法已经执行完毕\n\n```java\nstatic class Father {\n    static int a= 1;\n    static {\n        a=2;\n    }\n}\nstatic class Son extends Father{\n    static int b = a;\n}\npublic static void main(String[] args) {\n    System.out.println(Son.a); // 2\n}\n```\n\n- `<clinit>()`方法对于类或接口来说并不是必需的，如果一个类中没有静态语句块，也没有对变量的赋值操作，那么编译器可以不为这个类生成`<clinit>()`方法\n- 执行接口的`<clinit>()`方法不需要先执行父接口的`<clinit>()`方法\n- JVM会保证只有一个线程能进入clinit方法\n\n## 类加载时机\n\n### 主动引用\n\n- 遇到 new、getstatic、putstatic、invokestatic 这四条字节码指令时，如果类没有进行过初始化，则必须先触发其初始化\n  - new关键字实例化对象\n  - 读取或设置一个类型的静态字段\n  - 调用一个类型的静态方法\n- 对类进行反射调用的时候，如果类没有进行初始化，则需要先触发其初始化\n- 始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化\n- 虚拟机启动时，用户需要指定一个要执行的主类（包含 main() 方法的那个类），虚拟机会先初始化这个主类\n- 如果一个java.lang.invoke.MethodHandle实例最后的解析结果为REF_getStatic、REF_putStatic、REF_invokeStatic、REF_newInvokeSpecial四种类型的方法句柄，并且这个方法句柄对应的类没有进行过初始化，则需要先触发其初始化\n- 一个接口中定义了默认方法，如果有这个接口的实现类发生了初始化，那该接口要在其之前被初始化\n\n### 被动引用\n\n除此主动引用外，所有引用类的方式都不会触发初始化，称为被动引用\n\n- 通过子类引用父类的静态字段，不会导致子类初始化\n\n```java\nstatic class Father {\n    static  {\n        System.out.println(\"father init\");\n    }\n    static int value = 123;\n}\nstatic class Son extends Father{\n    static {\n        System.out.println(\"son init\");\n    }\n}\npublic static void main(String[] args) {\n    System.out.println(Son.value); // fatcher init ...\n}\n```\n\n- 定义一个该类的数组不会导致该类的初始化\n\n```java\nstatic class Ref{\n    static {\n        System.out.println(\"ref init\");\n    }\n}\npublic static void main(String[] args) {\n    //Ref[]这个类由虚拟机自动生成，包装了对真正数组的访问\n    Ref[] refs = new Ref[10]; // print nothing\n}\n```\n\n- 引用该类的常量不会导致该类初始化\n\n```java\nstatic class Ref {\n    static {\n        System.out.println(\"ref init\");\n    }\n    public static final int value = 123;\n}\npublic static void main(String[] args) {\n    // 编译期优化掉了，这个123存放在常量池里面\n    System.out.println(Ref.value); // only print 123\n}\n```\n\n## 类加载器\n\n两个类相等，需要类本身相等，并且使用同一个类加载器进行加载\n\n```java\nClassLoader myLoader = new ClassLoader() {\n    @Override\n    public Class<?> loadClass(String name) throws ClassNotFoundException {\n          try {\n              String fileName = name.substring(name.lastIndexOf(\".\") + 1)+\".class\";\n            InputStream is = getClass().getResourceAsStream(fileName);\n          if (is == null) {\n              return super.loadClass(name);\n          }\n          byte[] b = new byte[is.available()];\n          is.read(b);\n          return defineClass(name, b, 0, b.length);\n      } catch (IOException e) {\n          throw new ClassNotFoundException(name);\n      }\n  }\n};\nObject obj = myLoader.loadClass(\"wang.ismy.jvm.classload.ClassLoaderTest\").newInstance();\nSystem.out.println(obj.getClass()); // obj是使用自定义加载器加载的\nSystem.out.println(obj instanceof wang.ismy.jvm.classload.ClassLoaderTest); // false\n```\n\n### 分类\n\n- 按虚拟机角度\n  - 启动类加载器(bootstrap classloader)，使用 C++ 实现，是虚拟机自身的一部分 用来加载核心类库 如rt.jar\n  - 其他类加载器，都是JAVA中继承自java.lang.ClassLoader的类加载器\n- 按JAVA开发人员角度\n  - 启动类加载器 负责`<JAVA_HOME>\\lib目录`\n  - 扩展类加载器 负责`<JAVA_HOME>\\lib\\ext`\n  - 应用程序类加载器 程序自定义 负责加载用户类路径（ClassPath）上所有的类库\n\n### 双亲委派模型\n\n```java\nprotected Class<?> loadClass(String name, boolean resolve)\n    throws ClassNotFoundException\n{\n    synchronized (getClassLoadingLock(name)) {\n        // 首先，检查请求的类是否已经被加载过了\n      Class<?> c = findLoadedClass(name);\n      if (c == null) {\n          long t0 = System.nanoTime();\n          try {\n              if (parent != null) {\n                  // 如果有父加载器就从从父加载器加载\n                  c = parent.loadClass(name, false);\n              } else {\n                  // 否则从启动类加载器加载\n                  c = findBootstrapClassOrNull(name);\n              }\n          } catch (ClassNotFoundException e) {\n              // 如果一个类找不到就抛出ClassNotFoundException\n              // 说明父类和启动类加载器都无法满足需求\n          }\n          if (c == null) {\n            // 依旧找不到，就调用自身的findClass\n            long t1 = System.nanoTime();\n            c = findClass(name);\n\n            // 用来记录类加载时间等等信息的...\n            sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);\n            sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);\n            sun.misc.PerfCounter.getFindClasses().increment();\n          }\n        }\n        if (resolve) {\n            resolveClass(c);\n        }\n        return c;\n        }\n}\n```\n\n```mermaid\nstateDiagram-v2\n    direction BT\n    state optional {\n        UserDefineClassLoader2 --> UserDefineClassLoader1\n    }\n    UserDefineClassLoader1 --> ApplicationClassLoader\n    ApplicationClassLoader --> ExtensionClassLoader\n    ExtensionClassLoader --> BootstrapClassLoader\n```\n\n- 首先判断是否已经加载\n- 若无，找父加载器加载\n- 若再无，由当前加载器加载\n- 上级类加载器所加载的类，无法访问下级类加载器所加载的类\n\n一个类加载器首先将类加载请求转发到父类加载器，只有当父类加载器无法完成时才尝试自己加载\n\n这样就使得 Java 类随着它的类加载器一起具有一种带有优先级的层次关系，从而使得基础类得到统一\n\n所以系统中的String类加载优先级就会比在classpath或者用户自定义的String类优先级更高\n\n### 自定义类加载路径\n\n- 使用URLClassLoader\n\n```java\nURL url = new URL(\"file:~/mysql-connector-java-5.1.44-bin.jar\");\nURLClassLoader loader = new URLClassLoader(new URL[]{url});\nClass<?> klass = loader.loadClass(\"com.mysql.jdbc.Driver\");\nSystem.out.println(klass);\n```\n\n- 获取当前线程类加载器\n\n```java\nClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();\n```\n\n- 热部署\n\n### 自定义类加载器\n\n- 模板方法模式\n\nfindInCache -> parent.loadClass -> findClass()\n\n```java\nclass MyClassLoader extends ClassLoader {\n    @Override\n    protected Class<?> findClass(String name) throws ClassNotFoundException {\n        if (\"wang.ismy.Main\".equals(name)){\n            byte[] bytes = new byte[0];\n            try {\n                bytes = new FileInputStream(\"path\").readAllBytes();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            return defineClass(name,bytes,0,bytes.length);\n        }else {\n            return super.findClass(name);\n        }\n    }\n}\n```\n\n自定义类加载器的场景：\n\n1. 隔离加载类 确保中间件应用的jar不会影响到中间件的jar\n2. 修改加载方式 从其他地方获取class字节流\n3. 字节码加解密\n\n## 打破双亲委派模型\n\n- JDK1.2之前 自定义ClassLoader必须重写loadClass\n- ThreadContextClassLoader可以实现基础类调用实现类代码，通过thread.setContextClassLoader指定\n- OSGi 的类查找模型也不遵守双亲委派\n- Tomcat的类加载也不遵守\n\n## 实例\n\n### Tomcat 的正统类加载机制\n\n- 放置在/common目录中。类库可被Tomcat和所有的Web应用程序共同使用。\n- 放置在/server目录中。类库可被Tomcat使用，对所有的Web应用程序都不可见。\n- 放置在/shared目录中。类库可被所有的Web应用程序共同使用，但对Tomcat自己不可见。\n- 放置在/WebApp/WEB-INF目录中。类库仅仅可以被该Web应用程序使用\n\nTomcat6之后 用户可以通过修改配置文件指定server.loader和share.loader的方式重新启用原来完整的加载器架构\n\n```mermaid\nstateDiagram-v2\n    direction BT\n    JasperLoader --> WebappClasssLoader\n    WebappClasssLoader --> SharedClassLoader\n    SharedClassLoader --> CommonClassLoader\n    CatalinaClassLoader --> CommonClassLoader\n    CommonClassLoader --> ApplicationClassLoader\n    ApplicationClassLoader --> ExtensionClassLoader\n    ExtensionClassLoader --> BootstrapClassLoader\n```\n\n### OSGi 灵活的类加载机制\n\n>OSGi（Open Service Gateway Initiative）是OSGi联盟（OSGi Alliance）制订的一个基于Java语言的动态模块化规范\n\n```mermaid\nstateDiagram-v2\n    direction BT\n    BundleClassLoader --> BundleAlassLoader\n    BundleBlassLoader --> BundleAlassLoader\n    BundleBlassLoader --> BundleClassLoader\n    BundleBlassLoader --> ParentClassLoader\n    BundleAlassLoader --> ParentClassLoader\n```\n\n在OSGi中，加载器之间的关系不再是双亲委派模型的树形结构，而是已\n经进一步发展成一种更为复杂的、运行时才能确定的网状结构\n","metadata":"","hasMoreCommit":true,"totalCommits":12,"commitList":[{"date":"2024-11-18T19:50:55+08:00","author":"MY","message":"📦JVM","hash":"795092402e62c6ee2d4c1105d7ad1f3a2837ed94"},{"date":"2024-06-06T13:33:23+08:00","author":"MY","message":"✏类加载机制","hash":"661a1a11c646045a73053da8f52ded393ee588a1"},{"date":"2023-11-24T11:45:52+08:00","author":"MY","message":"📦清理大图","hash":"e3ff900ed2a2e49e9f3bd316935fe853796f7e52"},{"date":"2023-08-18T20:12:28+08:00","author":"MY","message":"✏JVM","hash":"fb061ff5146d1bb3017b1c0c2d4bf2f8008e67e1"},{"date":"2020-11-08T12:33:43+08:00","author":"MY","message":"✏更新 JVM 类加载机制","hash":"cc14594f00b53ef96715034e80d1510877c8aec3"},{"date":"2020-10-27T14:21:44+08:00","author":"MY","message":"✏更新 JVM 类加载机制","hash":"e6039dfb7616d47d0537dcc1f32b036b3e6c8351"},{"date":"2020-09-18T16:16:43+08:00","author":"0xcaffebabe","message":"✏更新 内存结构","hash":"1c41143c55611203d643eeac8ea72f792c19d1e4"},{"date":"2020-09-18T15:15:22+08:00","author":"0xcaffebabe","message":"✏更新 JVM 类加载","hash":"880eaf2a75491835de38bb2c8aa9f47fa07f9d21"},{"date":"2020-07-27T08:35:16+08:00","author":"MY","message":"➕增加 对象的创建过程","hash":"67a09cbb31c25727799e86eebe5a167d725943e3"},{"date":"2020-07-22T13:57:44+08:00","author":"MY","message":"✏更新 类加载机制","hash":"1d339ff6c8871a77df01e5be663e0b3717469929"}],"createTime":"2020-03-16T10:17:33+08:00"}