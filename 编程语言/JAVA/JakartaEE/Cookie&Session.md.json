{"name":"Cookie&Session","id":"编程语言-JAVA-JakartaEE-Cookie&Session","content":"# Cookie与Session\n\n两者都是为了保持访问用户与后端服务器的交互状态\n\n## [Cookie](/计算机网络/http/Cookie.md)\n\n> 客户端会话技术，将数据保存到客户端\n\n客户端第一次访问时服务器时 服务器会返回一个设置cookie的响应头 此后在cookie有效期内 并且在cookie所允许的域名下 浏览器发起请求时都会自动携带这个cookie请求头\n\n```java\nCookie[] cookies = req.getCookies();\nfor (Cookie cookie : cookies) {\n    if (\"time\".equals(cookie.getName())){\n        resp.getWriter().println(cookie.getValue());\n    }\n}\nresp.addCookie(new Cookie(\"time\", LocalDateTime.now().toString()));\n```\n\n### 实现原理\n\n- 基于响应头set-cookie和请求头cookie实现\n\n### 细节\n\n- 持久化存储： setMaxAge(int seconds)\n- 共享\n  - 设置共享虚拟目录范围：setPath(String path)\n  - 设置共享域：setDomain(String path)\n\n### 特点\n\n- cookie存储数据在客户端浏览器\n- 浏览器对于单个cookie 的大小有限制(4kb) 以及 对同一个域名下的总cookie数量也有限制(20个)\n\n## Session\n\n- HttpSession\n\nSession用来解决Cookie数量多传输浪费的问题\n\nSession的本质就是将一个ID存储在Cookie里 当用户访问后端服务器 后端服务器根据这个ID查找其对应的数据\n\n### 使用\n\n- 获取HttpSession对象：\n\n```java\nHttpSession session = request.getSession();\n```\n\n- 使用HttpSession对象：\n\n ```java\n Object getAttribute(String name)  \n void setAttribute(String name, Object value)\n void removeAttribute(String name)\n ```\n\n### 原理\n\n> Session的实现是依赖于Cookie的。\n\n如果基于Cookie的Session不可用 浏览器会自动将其重写到URL中\n\nsession如何工作：\n\n![屏幕截图 2020-10-07 143107](/assets/屏幕截图%202020-10-07%20143107.png)\n\nsession持久化：SessionManager\n\n其会复制持久化没有过期的session\n\nsession的过期检查：\n\nTomcat的一个后台线程会定期检查每个session是否失效\n\n值得注意的是 request.getSession()也会检查是否过期 如果过期就会创建一个新的session出来\n\n### 细节\n\n- 持久化session\n\n```java\nCookie c = new Cookie(\"JSESSIONID\",session.getId());\nc.setMaxAge(60*60);\nresponse.addCookie(c);\n```\n\n- session序列化 _tomcat自动完成_\n- 销毁时间\n\n  - 服务器关闭\n  - session对象调用invalidate()\n  - session默认失效时间 30分钟\n\n    ```xml\n    <session-config>\n        <session-timeout>30</session-timeout>\n    </session-config>\n    ```\n\n### 特点\n\n- session用于存储一次会话的多次请求的数据，存在服务器端\n- session可以存储任意类型，任意大小的数据\n\n### 分布式session\n\n单独使用session或者cookie是无法满足需求的 一些分布式session架构将独立的服务器用来存储session 就可以达到session共享的目的\n\n多端session：\n\n- 只需要统一注册登录接口即可 前后端分离的时代这点已是常态\n- 多终端登录的话在此基础上进行开发\n","metadata":"","hasMoreCommit":false,"totalCommits":4,"commitList":[{"date":"2022-01-11T18:07:22+08:00","author":"cjiping","message":"📦整理 HTTP","hash":"252f079a1a4bc13013e5476f05d93c9e10a8c9af"},{"date":"2020-10-07T14:46:26+08:00","author":"MY","message":"✏更新 cookie与session","hash":"6d7070013ded71f559117638fe360360dd2b8438"},{"date":"2020-02-28T15:44:15+08:00","author":"MY","message":"更新cookie & session","hash":"0ccdff00624a4a9c82d566f965ab5b3f07098d41"},{"date":"2019-08-11T12:12:12+08:00","author":"My、","message":"20190811上午","hash":"df21f036db8553fd2dfc7522f9060105139f9846"}],"createTime":"2019-08-11T12:12:12+08:00"}