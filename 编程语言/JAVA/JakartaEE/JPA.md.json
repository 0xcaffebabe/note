{"name":"JPA","id":"编程语言-JAVA-JakartaEE-JPA","content":">JPA的全称是Java Persistence API， 即Java 持久化API，是SUN公司推出的一套基于ORM的规范，内部是由一系列的接口和抽象类构成\n\n# Persistence对象\n\n>Persistence对象主要作用是用于获取EntityManagerFactory对象的\n\n# EntityManagerFactory\n\n>EntityManagerFactory 接口主要用来创建 EntityManager 实例\n\n# EntityManager\n\n>在 JPA 规范中, EntityManager是完成持久化操作的核心对象\n\n```\ngetTransaction : 获取事务对象\npersist ： 保存操作\nmerge ： 更新操作\nremove ： 删除操作\nfind/getReference ： 根据id查询\n```\n\n# EntityTransaction\n\nbegin,commit,rollback\n\n# 使用\n\n创建classpath:META-INF/persistence.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" version=\"2.0\">\n\n    <!--持久化单元名称-->  <!--事务类型-->\n    <persistence-unit  name=\"jpa\" transaction-type=\"RESOURCE_LOCAL\">\n        <!--实现方式-->\n        <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>\n\n        <properties>\n            <!--数据库信息-->\n            <property name=\"javax.persistence.jdbc.user\" value=\"root\"/>\n            <property name=\"javax.persistence.jdbc.password\" value=\"123\"/>\n            <property name=\"javax.persistence.jdbc.driver\" value=\"com.mysql.cj.jdbc.Driver\"/>\n            <property name=\"javax.persistence.jdbc.url\" value=\"jdbc:mysql:///ssm\"/>\n            <!--实现方信息-->\n            <property name=\"hibernate.show_sql\" value=\"true\"/>\n            <!--create:每次启动都会创建（存在则删除） update:不存在表则创建 none:不操作-->\n            <property name=\"hibernate.hbm2ddl.auto\" value=\"update\"/>\n        </properties>\n    </persistence-unit>\n</persistence>\n```\n\n创建实体类\n\n```java\n@Entity\n@Table(name = \"cst_customer\")\n@Data\npublic class Customer {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = \"cust_id\")\n    /*\n    * IDENTITY：底层数据库必须支持自动增长\n    * SEQUENCE: 底层数据库必须支持序列\n    * TABLE:jpa提供的机制\n    * AUTO:由程序自动选择策略\n    * */\n    private Long custId;\n\n    @Column(name = \"cust_name\")\n    private String custName;\n\n    @Column(name = \"cust_source\")\n    private String custSource;\n\n    @Column(name = \"cust_level\")\n    private String custLevel;\n\n    @Column(name = \"cust_industry\")\n    private String custIndustry;\n\n    @Column(name = \"cust_phone\")\n    private String custPhone;\n\n    @Column(name = \"cust_address\")\n    private String custAddress;\n    \n}\n```\n\n## 操作\n\n- 添加\n\n```java\n        EntityManager manager = Persistence\n        .createEntityManagerFactory(\"jpa\").createEntityManager();\n        EntityTransaction tx = manager.getTransaction();\n        tx.begin();\n\n        Customer customer = new Customer();\n        customer.setCustName(\"老王\");\n        customer.setCustIndustry(\"隔壁\");\n        manager.persist(customer);\n\n        tx.commit();\n        manager.close();\n```\n\n- 根据ID查询\n\n```java\nCustomer customer = entityManager.find(Customer.class, 1L); // 立即加载\nCustomer customer = entityManager.getReference(Customer.class, 1L); // 延迟加载\n```\n\n- 删除\n\n```java\nCustomer customer = entityManager.find(Customer.class, 1L);\nentityManager.remove(customer);\n```\n\n- 更新\n\n```java\nCustomer customer = entityManager.find(Customer.class, 2L);\ncustomer.setCustName(\"老王八\");\nentityManager.merge(customer);\n```\n\n# JPQL\n\n>基于首次在EJB2.0中引入的EJB查询语言(EJB QL),Java持久化查询语言(JPQL)是一种可移植的查询语言，旨在以面向对象表达式语言的表达式，将SQL语法和简单查询语义绑定在一起·使用这种语言编写的查询是可移植的，可以被编译成所有主流数据库服务器上的SQL\n\n- 查询全部\n\n```java\nString jpql = \"FROM Customer \";\nList list = entityManager.createQuery(jpql).getResultList();\nfor (Object o : list) {\n    System.out.println(o);\n}\n```\n\n- 倒序查询\n\n```sql\nFROM Customer ORDER BY custId DESC\n```\n\n- 统计查询\n\n```sql\nSELECT COUNT(custId) FROM Customer\n```\n\n- 分页查询\n\n```java\nString jpql = \"FROM Customer\";\nList list = entityManager.createQuery(jpql)\n                .setFirstResult(0)\n                .setMaxResults(2).getResultList();\n```\n\n- 条件查询\n\n```java\nString jpql = \"FROM Customer WHERE custName LIKE ?1\";\nList list = entityManager.createQuery(jpql)\n                .setParameter(1,\"%李%\")\n                .getResultList();\n```\n\n\n\n\n\n\n\n\n\n\n\n\n","metadata":"","hasMoreCommit":false,"totalCommits":2,"commitList":[{"date":"2019-09-07T12:09:32+08:00","author":"My、","message":"结束JPA & 开始 spring data jpa","hash":"6bf14f05ed0c0fd5b3d580c37e27228877c4ac7d"},{"date":"2019-09-06T17:32:30+08:00","author":"My、","message":"结束spring data elasticsearch & 开始JPA","hash":"2064f95eda10f0ab2cd6cd70e8fce2d8a04e88b8"}],"createTime":"2019-09-06T17:32:30+08:00"}