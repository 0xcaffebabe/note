{"name":"Mybatis","id":"编程语言-JAVA-框架-Mybatis","content":"# Mybatis\n\n- 持久层框架\n- 动态sql\n- ORM\n\n## 快速开始\n\n- 创建mapper接口\n\n```java\npublic interface UserDao {\n\n    List<User> findAll();\n}\n```\n\n- 创建总配置文件\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <environments default=\"development\">\n        <environment id=\"development\">\n            <!--事务类型-->\n            <transactionManager type=\"JDBC\"/>\n\n            <!--连接池-->\n            <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"com.mysql.cj.jdbc.Driver\"/>\n                <property name=\"url\" value=\"jdbc:mysql:///mybatis\"/>\n                <property name=\"username\" value=\"root\"/>\n                <property name=\"password\" value=\"123\"/>\n            </dataSource>\n        </environment>\n    </environments>\n    <mappers>\n        <mapper resource=\"mappers/user.xml\"/>\n    </mappers>\n</configuration>\n```\n\n- 创建映射配置文件\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"wang.ismy.mybatis.dao.UserDao\">\n\n    <select id=\"findAll\" resultType=\"wang.ismy.mybatis.entity.User\">\n    SELECT * FROM user\n  </select>\n</mapper>\n```\n\n### 使用xml\n\n```java\n@Test\npublic void findAll() throws IOException {\n\n    SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(\n            Resources.getResourceAsStream(\"config.xml\"));\n    SqlSession sqlSession = factory.openSession();\n\n    List<User> list = sqlSession.getMapper(UserDao.class).findAll();\n    assertEquals(6,list.size());\n}\n```\n\n#### 根据条件查询\n\n```xml\n<select id=\"findById\" resultType=\"wang.ismy.mybatis.entity.User\">\n        SELECT * FROM user WHERE id = #{id}\n    </select>\n```\n\n细节：\n\n- resultType 属性： 用于指定结果集的类型。\n- parameterType 属性： 用于指定传入参数的类型。\n- sql 语句中使用的`#{}`： 它代表占位符，相当于jdbc 中的?，都是用于执行语句时替换实际的数据\n- `#{}`中的内容：因为参数只有一个，所以此处可以随意写\n\n#### 更新\n\n```xml\n<insert id=\"save\" parameterType=\"wang.ismy.mybatis.entity.User\">\n    INSERT INTO user(username,address,sex,birthday) \n    VALUES(#{username},#{address},#{sex},#{birthday})\n</insert>\n```\n\n```java\nint save(User user);\n```\n\n**需要注意的是，mybatis的SqlSession关闭了事务的默认提交，当进行完更新操作后，需要手动调用**`sqlSession.commit();`\n\n#### 模糊查询字符串拼接问题\n\n```sql\nSELECT * FROM user WHERE username LIKE '%' #{name} '%'\n```\n\n#### 插入数据后返回ID\n\n```xml\n<insert id=\"save\" parameterType=\"wang.ismy.mybatis.entity.User\">\n\n    <selectKey keyColumn=\"id\" keyProperty=\"id\" resultType=\"int\">\n    select last_insert_id();\n    </selectKey>\n    INSERT INTO user(username,address,sex,birthday) VALUES(#{username},#{address},#{sex},#{birthday})\n</insert>\n```\n\n#### 使用resultMap\n\n```xml\n<resultMap id=\"userMap\" type=\"wang.ismy.mybatis.entity.User\">\n    <!--主键-->\n    <id column=\"id\" property=\"id\"/>\n    <!--非主键-->\n    <result column=\"username\" property=\"username\"/>\n</resultMap>\n\n<select id=\"findAll\" resultMap=\"userMap\">\n    select * from user\n</select>\n```\n\n#### Properties标签\n\n```xml\n<properties resource=\"jdbc.cfg\">\n\n    </properties>\n```\n\n#### typeAliases标签\n\n```xml\n<typeAliases>\n    <!--指定别名，不区分大小写-->\n    <typeAlias type=\"wang.ismy.mybatis.entity.User\" alias=\"user\"/>\n\n    <!--指定该包下的所有类为别名，不区分大小写-->\n    <package name=\"wang.ismy.mybatis.entity\"/>\n</typeAliases>\n```\n\n#### mapper\n\n```xml\n<mappers>\n    <package name=\"wang.ismy.mybatis.dao\">\n</mappers>\n```\n\n### 使用注解\n\n```java\npublic interface UserDao {\n\n    @Select(\"SELECT * FROM user\")\n    List<User> findAll();\n}\n```\n\n注解              | 作用\n--------------- | -----------------------\n@Insert         | 实现新增\n@Update         | 实现更新\n@Delete         | 实现删除\n@Select         | 实现查询\n@Result         | 实现结果集封装\n@Results        | 可以与@Result 一起使用，封装多个结果集\n@ResultMap      | 实现引用@Results 定义的封装\n@One            | 实现一对一结果集封装\n@Many           | 实现一对多结果集封装\n@SelectProvider | 实现动态 SQL 映射\n@CacheNamespace | 实现注解二级缓存的使用\n\n#### Result注解使用\n\n```java\n@Select(\"SELECT * FROM user\")\n@Results({\n        @Result(id=true,column = \"id\",property =\"id\"),\n        @Result(column = \"username\",property =\"username\"),\n        @Result(column = \"sex\",property =\"sex\"),\n        @Result(column = \"address\",property =\"address\"),\n        @Result(column = \"birthday\",property =\"birthday\")\n})\nList<User> find();\n```\n\n##### 一对一查询\n\n```java\n@Select(\"SELECT * FROM account\")\n@Results({\n        @Result(id=true,column = \"id\",property = \"id\"),\n        @Result(column = \"uid\",property = \"uid\"),\n        @Result(column = \"money\",property = \"money\"),\n        @Result(column = \"uid\",property = \"user\",one = @One(select = \"wang.ismy.mybatis.dao.UserDao.findById\",fetchType = FetchType.LAZY))\n})\nList<Account> findAll();\n```\n\n#### 一对多查询\n\n```java\n@Select(\"SELECT * FROM user\")\n@Results({\n        @Result(id=true,column = \"id\",property =\"id\"),\n        @Result(column = \"username\",property =\"username\"),\n        @Result(column = \"sex\",property =\"sex\"),\n        @Result(column = \"address\",property =\"address\"),\n        @Result(column = \"birthday\",property =\"birthday\"),\n        @Result(column = \"id\",property = \"account\",\n                many = @Many(select = \"wang.ismy.mybatis.dao.AccountDao.findById\",fetchType = FetchType.LAZY))\n})\nList<User> find();\n```\n\n#### 开启二级缓存\n\n```java\n@CacheNamespace\npublic interface UserDao {}\n```\n\n```xml\n<!--如果使用注解的话，则指定class属性-->\n<mappers>\n    <mapper class=\"wang.ismy.mybatis.dao.UserDao\"/>\n</mappers>\n```\n\n## 原理及源码分析\n\n![自定义Mybatis分析](/assets/自定义Mybatis分析.png)\n\nMapper 注册中心 -> 执行器 -> StatementHadnler -> ResultsetHandler\n\n核心接口：\n\n- SqlSession\n- SqlSessionFactory\n- ResultHandler\n\nXML相关：\n\n- XMLConfigBuilder：读取XML配置文件\n  - XPathParser：根据XPath解析\n\n重点：\n\n- MapperRegistry：负责Mapper接口处理\n  - MapperAnnotationBuilder\n- Configuration\n\nMapperProxy:\n\n- invoke\n\nMapperMethod\n\nParamNameResolver\n\nMappedStatement\n\nExecutor\n\nStatementHandler\n\nMetaObject：拦截器元数据\n\n## 缓存机制\n\n### 延迟加载\n\n>就是在需要用到数据时才进行加载，不需要用到数据时就不加载数据。延迟加载也称懒加载. \n\n- 开启延迟加载\n\n```xml\n<settings>\n    <setting name=\"logImpl\" value=\"STDOUT_LOGGING\" />\n    <!--延迟加载相关-->\n    <setting name=\"lazyLoadingEnabled\" value=\"true\"/>\n    <setting name=\"aggressiveLazyLoading\" value=\"false\"/>\n</settings>\n```\n\n- 修改连接\n\n```xml\n<resultMap id=\"userMap\" type=\"user\">\n    <id column=\"id\" property=\"id\"/>\n    <result column=\"username\" property=\"username\"/>\n    <result property=\"address\" column=\"address\"/>\n    <result property=\"birthday\" column=\"birthday\"/>\n    <result property=\"sex\" column=\"sex\"/>\n    <collection property=\"account\" ofType=\"Account\" select=\"wang.ismy.mybatis.dao.AccountDao.findById\" column=\"id\">\n        <id column=\"account_id\" property=\"id\"/>\n        <result column=\"uid\" property=\"uid\"/>\n        <result column=\"money\" property=\"money\"/>\n    </collection>\n</resultMap>\n```\n\n*使用的动态代理实现的延迟加载*\n\n### 缓存\n\n![](/assets/202336145345.png)\n\n![批注 2020-05-18 103307](/assets/批注%202020-05-18%20103307.png)\n\n#### 一级缓存\n\n>一级缓存是 SqlSession 范围的缓存，当调用 SqlSession 的修改，添加，删除，commit()，close()等方法时，就会清空一级缓存。 \n\n命中原则：\n\n- statementId相同\n- 查询参数相同（hash的方式）\n- 分页参数\n- sql语句\n- 同一环境（environment属性）\n\n生命周期：\n\n缓存销毁：\n- session close\n- commit\n- clearCache主动清除\n\n设计理念：\n\n- 不过期\n- 不更新\n- 不限制\n\n#### 二级缓存\n\n>二级缓存是 mapper 映射级别的缓存，多个 SqlSession 去操作同一个 Mapper 映射的 sql 语句，多个 SqlSession 可以共用二级缓存，二级缓存是跨 SqlSession 的。 \n\n**二级缓存中存放的是数据而不是对象**\n\n##### 开启\n\n- 第一步：在 SqlMapConfig.xml 文件开启二级缓存\n\n```xml\n<!--默认为true，可以省略-->\n<setting name=\"cacheEnabled\" value=\"true\"/>\n```\n- 第二步：配置相关的 Mapper 映射文件 \n\n```xml\n<cache/>\n```\n- 第三步：配置 statement 上面的 useCache 属性 \n\n```xml\n<select id=\"findAll\" resultMap=\"userMap\" useCache=\"true\">\n    SELECT * FROM user\n</select>\n```\n\n##### 命中原则\n\n- 同一 session factory\n- statement id 相同\n- 参数相同\n- environment 环境相同\n- sql session close 或 commit\n\n##### 生命周期\n\n创建:\n\n- sql session close 或 commit\n\n销毁：\n\n- sql session update\n\n#### 缓存清除策略\n\n![批注 2020-05-18 105408](/assets/批注%202020-05-18%20105408.png)\n\n## 多表查询\n\n### 一对一\n\n- 定义结果映射\n\n```xml\n<resultMap id=\"accountMap\" type=\"Account\">\n    <id column=\"account_id\" property=\"id\"/>\n    <result column=\"UID\" property=\"uid\"/>\n    <result column=\"MONEY\" property=\"money\"/>\n    <association property=\"user\" javaType=\"User\">\n        <id column=\"id\" property=\"id\"/>\n        <result column=\"username\" property=\"username\"/>\n        <result property=\"address\" column=\"address\"/>\n        <result property=\"birthday\" column=\"birthday\"/>\n        <result property=\"sex\" column=\"sex\"/>\n    </association>\n</resultMap>\n```\n\n- 多表查询设置结果映射\n\n```xml\n<select id=\"findAll\" resultMap=\"accountMap\">\n     SELECT account.ID AS account_id,\n     account.UID,\n     account.MONEY,\n     user.*\n     FROM account,user\n     WHERE account.UID = user.id\n</select>\n```\n\n- 实体类\n\n```java\n@Data\npublic class Account {\n\n    private Integer id;\n\n    private Integer uid;\n\n    private Double money;\n\n    private User user;\n}\n```\n\n### 一对多\n\n```xml\n<resultMap id=\"userMap\" type=\"user\">\n    <id column=\"id\" property=\"id\"/>\n    <result column=\"username\" property=\"username\"/>\n    <result property=\"address\" column=\"address\"/>\n    <result property=\"birthday\" column=\"birthday\"/>\n    <result property=\"sex\" column=\"sex\"/>\n    <collection property=\"account\" ofType=\"Account\">\n        <id column=\"account_id\" property=\"id\"/>\n        <result column=\"uid\" property=\"uid\"/>\n        <result column=\"money\" property=\"money\"/>\n    </collection>\n</resultMap>\n<select id=\"findAll\" resultMap=\"userMap\">\n   SELECT user.*,\n    account.ID as account_id,\n    account.uid,\n    account.money\n    FROM user LEFT OUTER JOIN account ON user.id = account.UID\n</select>\n```\n\n```java\n@Data\npublic class User {\n\n    private Integer id;\n\n    private String username;\n\n    private LocalDate birthday;\n\n    private String sex;\n\n    private String address;\n\n    private List<Account> account;\n}\n```\n\n*左外连接的使用*\n\n### 多对多\n\n多对多的映射关系，可以拆分成两个一对多的关系\n\n## 动态SQL\n\n### if\n\n```xml\n<if test=\"username != null\">\n    #{username} 'abc'\n</if>\n```\n\n### where 标签\n\n```xml\n<where>\n    <if test=\"...\">\n        ...\n    </if>\n</where>\n```\n\n这样就不用写`where 1=1`前缀\n\n### foreach标签\n\n- collection:代表要遍历的集合元素，注意编写时不要写`#{}`\n- open:代表语句的开始部分\n- close:代表结束部分\n- item:代表遍历集合的每个元素，生成的变量名\n- sperator:代表分隔符\n\n```xml\n<foreach collection=\"ids\" open=\"id in ( \" close=\")\" item=\"uid\"  separator=\",\">\n      #{uid}     \n</foreach>\n```\n\n### SQL重用\n\n```xml\n<sql id=\"sql\">\n    SELECT * FROM user WHERE id = #{id}\n</sql>\n<select id=\"findById\" resultType=\"wang.ismy.mybatis.entity.User\">\n    <include refid=\"sql\"/>\n</select>\n```\n\n## 连接池与事务\n\n连接池：\n\n- UNPOOLED:不使用连接池的数据源\n- POOLED:使用连接池的数据源\n- JNDI:使用 JNDI 实现的数据源\n\n事务：\n\n```java\n/*提交事务*/\nsqlSession.commit();\n/*回滚事务*/\nsqlSession.rollback();\n```\n\n## 分页插件\n\n- 引入依赖\n\n```xml\n<dependency>\n    <groupId>com.github.pagehelper</groupId>\n    <artifactId>pagehelper</artifactId>\n    <version>5.1.10</version>\n</dependency>\n\n```\n\n- 配置\n\n```xml\n<bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n    <property name=\"dataSource\" ref=\"dataSource\" />\n    <property name=\"plugins\">\n        <array>\n            <bean class=\"com.github.pagehelper.PageInterceptor\">\n                <property name=\"properties\">\n                    <props>\n                        <prop key=\"helperDialect\">oracle</prop>\n                        <prop key=\"reasonable\">true</prop>\n                        \n                    </props>\n                </property>\n            </bean>\n        </array>\n    </property>\n</bean>\n```\n\n- 使用\n\n```java\n@Override\npublic List<Order> findAll() {\n    PageHelper.startPage(1,5);\n    return orderDao.findAll();\n}\n```\n\n\n","metadata":"","hasMoreCommit":false,"totalCommits":1,"commitList":[{"date":"2023-03-06T07:13:06Z","author":"My","message":"📦Mybatis","hash":"a59ee9793704334a00ecfdc3e736b37728d6859f"}],"createTime":"2023-03-06T07:13:06Z"}