{"name":"AOP","id":"编程语言-JAVA-框架-Spring-AOP","content":"# AOP\n\n## 动态代理\n\n- 基于接口 JDK\n- 基于子类\n\n```java\npublic class Main {\n\n    public static void main(String[] args) {\n        Bean bean = (Bean) Enhancer.create(Bean.class, new MethodInterceptor() {\n            private Bean bean = new Bean();\n            @Override\n            public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {\n                System.out.println(method);\n                return method.invoke(bean,objects);\n            }\n        });\n\n        bean.run();\n    }\n}\n\nclass Bean{\n    public void run(){\n        System.out.println(\"bean run\");\n    }\n}\n```\n\n## AOP简介\n\n![20211520172](/assets/20211520172.png)\n\nAOP术语:\n\n- 通知(Advice):所谓通知是指拦截到Joinpoint之后所要做的事情就是通知\n\n  - 前置通知（before）:执行前执行\n  - 后置通知（after）：执行后执行\n  - 返回通知（after returning）\n  - 异常通知（after throwing）\n  - 环绕通知（around）\n\n_使用xml时，后置通知与返回通知以及异常通知的执行顺序取决于配置顺序_\n\n- 连接点(Joinpoint):所谓连接点是指那些被拦截到的点。在spring中,这些点指的是方法,因为spring只支持方法类型的连接点。\n- 切点(Pointcut):所谓切入点是指我们要对哪些Joinpoint进行拦截的定义。\n- 切面(Aspect):是切入点和通知（引介）的结合。\n- 引入(Introduction):引介是一种特殊的通知在不修改类代码的前提下, Introduction可以在运行期为类动态地添加一些方法或Field。\n- 织入(Weaving):是指把增强应用到目标对象来创建新的代理对象的过程。\n\n### 编写切点\n\n- AspectJ指示器\n\nSpring借助AspectJ的切点表达式语言来定义切面\n\nAspectJ指示器  | 描述\n----------- | ----------------------------------------------------\narg()       | 限制连接点匹配参数为指定类型的执行方法\n@args()     | 限制连接点匹配参数由指定注解标注的执行方法\nexecution() | 用于匹配是连接点的执行方法\nthis()      | 限制连接点匹配AOP代理的Bean引用为指定类型的类\ntarget()    | 限制连接点匹配目标对象为指定类型的类\n@target ()  | 限制连接点匹配特定的执行对象，这些对象对应的类要具备指定类型的注解\nwithin()    | 限制连接点匹配指定的类型\n@within()   | 限制连接点匹配指定注解所标注的类型( 当使用Spring AOP时，方法定义在由指定的注解所标注的类里)\n@annotation | 限制匹配带有指定注解连接点\n\n- 一个简单的切点实例\n\n```\nexecution(* wang.ismy.spring.service.Service.doSth(..))\n```\n\n#### execution\n\n`execution(*com.sample.service.impl..*.*(..))` 解释如下：\n\n符号                      | 含义\n----------------------- | --------------------------\nexecution ()            | 表达式的主体\n第一个\"*\"符号                | 表示返回值的类型任意\ncom.sample.service.impl | AOP所切的服务的包名，即，我们的业务部分\n包名后面的\".\"                | 表示当前包及子包\n第二个\"*\"                  | 表示类名，*即所有类。此处可以自定义，下文有举例\n.*(..)                  | 表示任何方法名，括号表示参数，两个点表示任何参数类型\n\n### 创建切面\n\n```java\n@Aspect\n@Component\n@Slf4j\npublic class ErrorPageAspect {\n\n    @Pointcut(\"@annotation(wang.ismy.zbq.annotations.ErrorPage)\")\n    public void pointCut(){}\n\n    @Around(\"pointCut()\")\n    public Object around(ProceedingJoinPoint joinPoint){\n        try {\n            return joinPoint.proceed();\n        } catch (Throwable throwable) {\n\n            ModelAndView modelAndView = new ModelAndView();\n            modelAndView.setViewName(\"error\");\n            modelAndView.addObject(\"error\",throwable.getMessage());\n\n            return modelAndView;\n        }\n\n    }\n}\n```\n\n#### 使用xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/aop\n        https://www.springframework.org/schema/aop/spring-aop.xsd\">\n\n    <aop:config>\n        <!--配置切面-->\n        <aop:aspect id=\"loggerAdvice\" ref=\"logger\">\n            <aop:around method=\"log\" pointcut=\"execution(* wang.ismy.spring.service.Service.doSth(..))\"/>\n        </aop:aspect>\n    </aop:config>\n\n    <bean class=\"wang.ismy.spring.service.impl.ServiceImpl\"/>\n    <bean id=\"logger\" class=\"wang.ismy.spring.Logger\"/>\n</beans>\n```\n\n## AOP 原理\n\nAbstractAutoProxyCreator 实现了BeanPostProcessor \n\n通过在Bean 实例化后，通过动态代理的方式 createProxy 对 Bean进行一层包裹 返回代理完成后的Bean\n\nAopProxy 目前Spring 有2种方式 ：\n\n1. JDK 动态代理：如果 bean 实现了接口，会使用这种方式。这种方式性能较好\n2. CGLIB 动态代理：如果 bean 没有实现接口，会使用这种方式\n\n","metadata":"","hasMoreCommit":false,"totalCommits":9,"commitList":[{"date":"2024-11-19T16:00:12+08:00","author":"MY","message":"📦Spring","hash":"36352bf92f58df999aecc3d0a874f9d952d30fb7"},{"date":"2023-03-09T09:41:00Z","author":"My","message":"🛠替换在线图片","hash":"0c8b08bc22fbe482ba02da2f1fcad211441d3c23"},{"date":"2021-05-28T11:07:02+08:00","author":"cjiping","message":"✏更新 Spring AOP","hash":"d5a467618a954fbedc94ed5bf929e4532f9262fd"},{"date":"2021-01-05T20:19:41+08:00","author":"cjiping","message":"✏更新 Spring  AOP","hash":"1ffa6a72e66957d6ae447e65110effe8676d48e2"},{"date":"2020-01-11T20:46:42+08:00","author":"MY","message":"更新spring事务","hash":"68b771dd4a7467cf23865e8a742bed48e09e724d"},{"date":"2019-08-21T16:54:05+08:00","author":"My、","message":"20190821下午","hash":"8cf55651bbe1aefa0e85fac1092204b17410201a"},{"date":"2019-08-21T12:06:54+08:00","author":"My、","message":"20190821上午","hash":"a3e33a9665f46c8d1ffb7e94dafd4dfc5fea81b3"},{"date":"2019-06-20T22:49:48+08:00","author":"My","message":"format something","hash":"81f933230612d2017b6562ae767e3a0046ce5fa4"},{"date":"2019-06-12T17:27:18+08:00","author":"My","message":"20190612u","hash":"ec3f52a33d28b93328ea98d45ea153cadd44aea4"}],"createTime":"2019-06-12T17:27:18+08:00"}