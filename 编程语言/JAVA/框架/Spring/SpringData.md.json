{"name":"SpringData","id":"编程语言-JAVA-框架-Spring-SpringData","content":"# Spring Data\n\n- Spring的数据访问哲学\n\n![202081191941](/assets/202081191941.png)\n\n## Spring的数据访问异常体系\n\n**SQLException**\n\n- 提供了挺多的异常\n- 数据访问模板化\n\n## 配置数据源\n\n- 使用JNDI\n- 使用数据源连接池\n\n```java\n@Bean\npublic DataSource dataSource(){\n    DruidDataSource dataSource = new DruidDataSource();\n    dataSource.setDriverClassName(\"com.mysql.cj.jdbc.Driver\");\n    dataSource.setUsername(\"root\");\n    dataSource.setPassword(\"Root@@715711877\");\n    dataSource.setUrl(\"jdbc:mysql:///manage\");\n    return dataSource;\n}\n```\n\n- 使用嵌入式数据源\n\n## 使用profile选择数\n\n```java\n@Profile(\"product\")\n    @Bean\n    public DataSource dataSource(){\n\n        DruidDataSource dataSource = new DruidDataSource();\n        dataSource.setUrl(\"jdbc:h2:~/test\");\n        return dataSource;\n    }\n\n    @Profile(\"dev\")\n    @Bean\n    public DataSource dataSourceDev(){\n\n        DruidDataSource dataSource = new DruidDataSource();\n        dataSource.setDriverClassName(\"com.mysql.cj.jdbc.Driver\");\n        dataSource.setUsername(\"root\");\n        dataSource.setPassword(\"Root@@715711877\");\n        dataSource.setUrl(\"jdbc:mysql:///manage\");\n        return dataSource;\n    }\n```\n\n## 在Spring 当中使用JDBC\n\n### JDBC模板\n\n*JdbcDaoSupport*\n\n- update():执行DML语句。增、删、改语句\n- queryForMap():查询结果将结果集封装为map集合，将列名作为key，将值作为value 将这条记录封装为一个map集合\n\n  - 注意：这个方法查询的结果集长度只能是1\n\n- queryForList():查询结果将结果集封装为list集合\n\n  - 注意：将每一条记录封装为一个Map集合，再将Map集合装载到List集合中\n\n- query():查询结果，将结果封装为JavaBean对象\n\n  - query的参数：RowMapper\n\n    - 一般我们使用BeanPropertyRowMapper实现类。可以完成数据到JavaBean的自动封装\n    - new BeanPropertyRowMapper<类型>(类型.class)\n\n- queryForObject：查询结果，将结果封装为对象\n\n  - 一般用于聚合函数的查询\n\n- 配置模板\n\n```java\n@Bean\n    public JdbcTemplate jdbcTemplate(){\n        JdbcTemplate jdbcTemplate = new JdbcTemplate();\n        jdbcTemplate.setDataSource(dataSourceDev());\n        return jdbcTemplate;\n    }\n```\n\n- 执行操作\n\n```java\n@org.springframework.stereotype.Service\npublic class Service {\n\n    @Autowired\n    private JdbcTemplate jdbcTemplate;\n\n    public void insert(Admin admin){\n        jdbcTemplate.update(\"INSERT INTO admin(username,password) VALUES(?,?)\",\n                admin.getUsername(),\n                admin.getPassword());\n    }\n}\n```\n\n#### 使用Lambda表达式\n\n```java\njdbcTemplate.query(\"select * from admin\",r->{\n\n    do{\n        System.out.println(\n                r.getString(\"username\")+\"||\"+r.getString(\"password\")\n        );\n    }while (r.next());\n\n});\n```\n\n#### 使用命名参数\n\n```java\npublic void insert(Admin admin){\n    jdbcTemplate.update(\"INSERT INTO admin(username,password) VALUES(:username,:password)\",\n            Map.of(\"username\",admin.getUsername(),\n                    \"password\",admin.getPassword()));\n}\n```\n\n## JPA\n\n需要的一些复杂特性\n\n- 延迟加载\n- 预先抓取\n- 级联\n\n### [集成 Hibernate](/编程语言/JAVA/JakartaEE/JPA.md)\n\n### Spring与JAVA持久化API\n\n- 配置实体管理器工厂\n\n```java\n@Configuration\n@ComponentScan(\"wang.ismy.spring\")\n@EnableJpaRepositories(basePackages = \"wang.ismy.spring\",entityManagerFactoryRef = \"entityManagerFactoryBean\")\npublic class Config {\n\n    @Bean\n    public DataSource dataSourceDev(){\n\n        DruidDataSource dataSource = new DruidDataSource();\n        dataSource.setDriverClassName(\"com.mysql.cj.jdbc.Driver\");\n        dataSource.setUsername(\"root\");\n        dataSource.setPassword(\"Root@@715711877\");\n        dataSource.setUrl(\"jdbc:mysql:///manage\");\n        return dataSource;\n    }\n\n    @Bean\n    public LocalContainerEntityManagerFactoryBean entityManagerFactoryBean(DataSource dataSource,\n                                                                           JpaVendorAdapter adapter){\n        LocalContainerEntityManagerFactoryBean bean =\n                new LocalContainerEntityManagerFactoryBean();\n        bean.setDataSource(dataSource);\n        bean.setJpaVendorAdapter(adapter);\n        bean.setPackagesToScan(\"wang.ismy.spring\");\n        return bean;\n    }\n\n    @Bean\n    public JpaVendorAdapter jpaVendorAdapter(){\n        HibernateJpaVendorAdapter adapter = new HibernateJpaVendorAdapter();\n        adapter.setDatabase(Database.MYSQL);\n        adapter.setGenerateDdl(false);\n        adapter.setDatabasePlatform(\"org.hibernate.dialect.MySQL5InnoDBDialect\");\n        return adapter;\n    }\n\n    @Bean(name = \"transactionManager\")\n    public PlatformTransactionManager transactionManager(EntityManagerFactory bean, DataSource dataSource) {\n        JpaTransactionManager tm =\n                new JpaTransactionManager();\n        tm.setEntityManagerFactory(bean);\n        tm.setDataSource(dataSource);\n        return tm;\n    }\n}\n```\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:jpa=\"http://www.springframework.org/schema/data/jpa\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n     https://www.springframework.org/schema/beans/spring-beans.xsd\n     http://www.springframework.org/schema/data/jpa\n     https://www.springframework.org/schema/data/jpa/spring-jpa.xsd\">\n    <jpa:repositories base-package=\"wang.ismy.jms\" transaction-manager-ref=\"transactionManager\" entity-manager-factory-ref=\"entityManagerFactory\"/>\n    <bean id=\"transactionManager\" class=\"org.springframework.orm.jpa.JpaTransactionManager\">\n        <property name=\"entityManagerFactory\" ref=\"entityManagerFactory\"/>\n    </bean>\n    <bean id=\"dataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\">\n        <property name=\"username\" value=\"root\"/>\n        <property name=\"password\" value=\"123\"/>\n        <property name=\"driverClassName\" value=\"com.mysql.cj.jdbc.Driver\"/>\n        <property name=\"url\" value=\"jdbc:mysql:///ssm\"/>\n    </bean>\n\n    <bean id=\"entityManagerFactory\" class=\"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean\">\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n        <!--扫描实体类-->\n        <property name=\"packagesToScan\" value=\"wang.ismy.jms\"/>\n        <!--服务提供者-->\n        <property name=\"persistenceProvider\">\n            <bean class=\"org.hibernate.jpa.HibernatePersistenceProvider\"/>\n        </property>\n        <!--服务提供者适配器-->\n        <property name=\"jpaVendorAdapter\">\n            <bean class=\"org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter\">\n                <property name=\"generateDdl\" value=\"false\" />\n                <property name=\"database\" value=\"MYSQL\" />\n                <property name=\"databasePlatform\" value=\"org.hibernate.dialect.MySQLDialect\" />\n                <property name=\"showSql\" value=\"true\" />\n            </bean>\n        </property>\n        <!--高级特性-->\n        <property name=\"jpaDialect\">\n            <bean class=\"org.springframework.orm.jpa.vendor.HibernateJpaDialect\"/>\n        </property>\n    </bean>\n</beans>\n```\n\n- 从JNDI中获取实体管理器工厂\n\n## 编写基于JPA的Repository\n\n- 实体类\n\n```java\n@Data\n@Entity\n@Table(name = \"admin\")\npublic class Admin {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Integer id;\n\n    private String username;\n\n    private String password;\n}\n```\n\n- Repository类\n\n```java\npublic interface AdminRepository extends JpaRepository<Admin,Integer> { }\n```\n\n- 使用\n\n```java\nadminRepository.findAll();\n```\n\n#### 自定义查询方法\n\n```java\npublic interface AdminRepository extends JpaRepository<Admin,Integer> { \n\n    Admin findbyUsername(String username);\n}\n```\n\n- 一些关键词\n\nKeyword           | Sample                                  | JPQL\n----------------- | --------------------------------------- | ----------------------------------------------------------------\nAnd               | findByLastnameAndFirstname              | ... where x.lastname = ?1 and x.firstname = ?2\nOr                | findByLastnameOrFirstname               | ... where x.lastname = ?1 or x.firstname = ?2\nIs,Equals         | findByFirstnameIs,findByFirstnameEquals | ... where x.firstname = ?1\nBetween           | findByStartDateBetween                  | ... where x.startDate between ?1 and ?2\nLessThan          | findByAgeLessThan                       | ... where x.age < ?1\nLessThanEqual     | findByAgeLessThanEqual                  | ... where x.age ⇐ ?1\nGreaterThan       | findByAgeGreaterThan                    | ... where x.age > ?1\nGreaterThanEqual  | findByAgeGreaterThanEqual               | ... where x.age >= ?1\nAfter             | findByStartDateAfter                    | ... where x.startDate > ?1\nBefore            | findByStartDateBefore                   | ... where x.startDate < ?1\nIsNull            | findByAgeIsNull                         | ... where x.age is null\nIsNotNull,NotNull | findByAge(Is)NotNull                    | ... where x.age not null\nLike              | findByFirstnameLike                     | ... where x.firstname like ?1\nNotLike           | findByFirstnameNotLike                  | ... where x.firstname not like ?1\nStartingWith      | findByFirstnameStartingWith             | ... where x.firstname like ?1 (parameter bound with appended %)\nEndingWith        | findByFirstnameEndingWith               | ... where x.firstname like ?1 (parameter bound with prepended %)\nContaining        | findByFirstnameContaining               | ... where x.firstname like ?1 (parameter bound wrapped in %)\nOrderBy           | findByAgeOrderByLastnameDesc            | ... where x.age = ?1 order by x.lastname desc\nNot               | findByLastnameNot                       | ... where x.lastname <> ?1\nIn                | findByAgeIn(Collection ages)            | ... where x.age in ?1\nNotIn             | findByAgeNotIn(Collection age)          | ... where x.age not in ?1\nTRUE              | findByActiveTrue()                      | ... where x.active = true\nFALSE             | findByActiveFalse()                     | ... where x.active = false\nIgnoreCase        | findByFirstnameIgnoreCase               | ... where UPPER(x.firstame) = UPPER(?1)\n\n- 使用SQL\n\n```java\n@Query(value = \"SELECT * FROM admin WHERE username = 'admin'\",nativeQuery = true)\nAdmin selfCondition();\n```\n\n- 使用JPQL\n\n```java\n@Query(\"FROM Customer WHERE custName = ?1\")\nList<Customer> findByJPQL(String name);\n\n// 更新操作\n@Query(\"UPDATE Customer SET custName = ?2 WHERE custId = ?1\")\n@Modifying\nint update(Long id,String name);\n```\n\n#### 动态查询\n\n_JpaSpecificationExecutor_\n\n_Specification_\n\n- 示例\n\n```java\nSpecification<Customer> spec = (Specification<Customer>) (root/*比较的属性*/, query, cb/*查询方式*/) -> {\n    Path<Object> custName = root.get(\"custName\");\n    return cb.equal(custName,\"老王八\");\n};\nOptional<Customer> one = repository.findOne(spec);\n\nSystem.out.println(one.get());\n```\n\n- 条件拼接\n\n```java\nSpecification<Customer> spec = (Specification<Customer>) (root/*比较的属性*/, query, cb/*查询方式*/) -> {\n    Path<Object> custName = root.get(\"custName\");\n    Path<Object> custIndustry = root.get(\"custIndustry\");\n\n    var p1 = cb.equal(custName,\"老王八\");\n    var p2 = cb.equal(custIndustry,\"隔壁\");\n\n    return  cb.and(p1,p2);\n};\n```\n\n- 模糊查询\n\n```java\nSpecification<Customer> spec = (Specification<Customer>) (root/*比较的属性*/, query, cb/*查询方式*/) -> {\n    Path<Object> custName = root.get(\"custName\");\n\n    return cb.like(custName.as(String.class),\"%老%\");\n};\nrepository.findAll(spec).forEach(System.out::println);\n```\n\n- 排序\n\n```java\nrepository.findAll(spec, new Sort(Sort.Direction.DESC,\"custId\")).forEach(System.out::println);\n```\n\n- 分页\n\n```java\nrepository.findAll(PageRequest.of(0,3)).forEach(System.out::println);\n```\n\nPage接口\n\n```java\npublic interface Page<T> extends Slice<T> {\n\n\tstatic <T> Page<T> empty() {\n\t\treturn empty(Pageable.unpaged());\n\t}\n\n\tstatic <T> Page<T> empty(Pageable pageable) {\n\t\treturn new PageImpl<>(Collections.emptyList(), pageable, 0);\n\t}\n\n\tint getTotalPages();\n\n\tlong getTotalElements();\n\n\t<U> Page<U> map(Function<? super T, ? extends U> converter);\n}\n```\n\n#### 多表操作\n\n##### 一对多\n\n- 主表\n\n```java\n@OneToMany(targetEntity = LinkMan.class)\n@JoinColumn(name = \"lkm_cust_id\",referencedColumnName = \"cust_id\")\nprivate Set<LinkMan> linkMan = new HashSet<>(0);\n```\n\n- 从表\n\n```java\n@ManyToOne(targetEntity = Customer.class)\n@JoinColumn(name = \"lkm_cust_id\",referencedColumnName = \"cust_id\")\nprivate Customer customer;\n```\n\n- 操作\n\n```java\nCustomer customer = new Customer();\ncustomer.setCustName(\"20190908\");\n\nLinkMan man = new LinkMan();\nman.setLkmName(\"小婊砸\");\nman.setCustomer(customer);\ncustomerRepository.save(customer);\nlinkManRepository.save(man);\n```\n\n- 放弃外键维护\n\n```java\n@OneToMany(mappedBy = \"customer\")\n```\n\n- 级联添加\n\n```java\n@OneToMany(mappedBy = \"customer\",cascade = CascadeType.ALL)\n```\n\n```java\nCustomer customer = new Customer();\ncustomer.setCustName(\"20190908\");\n\nLinkMan man = new LinkMan();\nman.setLkmName(\"小婊砸\");\nman.setCustomer(customer);\ncustomer.getLinkMans().add(man);\n\ncustomerRepository.save(customer);\n```\n\n- 级联删除\n\n```java\nOptional<Customer> cus = customerRepository.findById(1L);\ncustomerRepository.delete(cus.get());\n```\n\n##### 多对多\n\n```java\n@ManyToMany(targetEntity = Role.class)\n@JoinTable(name = \"user_role\",joinColumns = {@JoinColumn(name = \"user_id\",referencedColumnName = \"user_id\")},\n        inverseJoinColumns = {@JoinColumn(name = \"role_id\",referencedColumnName = \"role_id\")})\nprivate Set<Role> roleSet  = new HashSet<>();\n```\n\n```java\n@ManyToMany(targetEntity = User.class)\n@JoinTable(name = \"user_role\",joinColumns ={@JoinColumn(name = \"role_id\",referencedColumnName = \"role_id\")},\n        inverseJoinColumns =  {@JoinColumn(name = \"user_id\",referencedColumnName = \"user_id\")})\nprivate Set<User> userSet = new HashSet<>();\n```\n\n```java\nUser user = new User();\nuser.setUsername(\"老王\");\n\nRole role = new Role();\nrole.setRoleName(\"隔壁\");\nuser.getRoleSet().add(role);\nuserDao.save(user);\nroleDao.save(role);\n```\n\n- 级联\n\n#### 对象导航\n\n```java\npublic enum FetchType {\n    LAZY,EAGER\n}\n```\n\n## 缓存数据\n\n### 启用缓存支持\n\n```java\n@Configuration\n@ComponentScan(\"wang.ismy.spring\")\n@EnableCaching\npublic class Config {\n\n    @Bean\n    public CacheManager cacheManager(){\n        return new ConcurrentMapCacheManager();\n    }\n\n}\n```\n\n- Spring 提供的几个缓存管理器 ![批注 2019-06-21 150246](/assets/批注%202019-06-21%20150246.png)\n\n#### 让方法支持缓存\n\n```java\n@Cacheable(value = \"find\",key = \"#id\")\npublic String find(Integer id){\n    System.out.println(\"real find\");\n    return \"hello world\"+id;\n}\n```\n\n- 将值放到缓存当中\n\n  ```java\n  /**\n  * 该方法肯定会被执行，但是返回结果会放到缓存当中\n  */\n  @CachePut(value = \"find\",key = \"#id\")\n  public String put(Integer id){\n    return \"new\"+id;\n  }\n  ```\n\n- 条件化缓存\n\n  - unless : 阻止将对象放入缓存，但是还会进行缓存查找\n  - condition : 不会进行缓存查找，也不会将结果放入缓存\n\n在id等于10时不会进行缓存\n\n```java\n@Cacheable(value = \"find\",key = \"#id\",condition = \"#id != 10\")\npublic String find(Integer id){\n    System.out.println(\"real find\");\n    return \"hello world\"+id;\n}\n```\n\n- 移除缓存\n\n```java\n@CacheEvict(value = \"find\",key = \"#id\")\npublic void remove(Integer id){}\n```\n\n### 使用xml添加缓存\n","metadata":"","hasMoreCommit":false,"totalCommits":10,"commitList":[{"date":"2022-06-01T17:34:32+08:00","author":"cjiping","message":"📦整理 SpringData","hash":"3b73f3a62ef7fe1e740df16784bbba1f280e7e07"},{"date":"2019-09-08T22:32:16+08:00","author":"My、","message":"结束spring data jpa & 开始 spring boot 之 mybatis 集成","hash":"aba871ebbb77d2182b6278157d10aed8f56c409a"},{"date":"2019-09-08T17:23:31+08:00","author":"My、","message":"进行spring data jpa到多表操作","hash":"ccdc6e90325d99c4527598e154e923b0e691ea7f"},{"date":"2019-09-07T18:05:46+08:00","author":"My、","message":"继续spring data jpa到JpaSpecificationExecutor","hash":"e0ff8d184e1879e9e4d84792efbe467caccfd036"},{"date":"2019-09-07T12:09:32+08:00","author":"My、","message":"结束JPA & 开始 spring data jpa","hash":"6bf14f05ed0c0fd5b3d580c37e27228877c4ac7d"},{"date":"2019-09-06T17:32:30+08:00","author":"My、","message":"结束spring data elasticsearch & 开始JPA","hash":"2064f95eda10f0ab2cd6cd70e8fce2d8a04e88b8"},{"date":"2019-09-05T22:51:13+08:00","author":"My、","message":"spring data elasticsearch","hash":"728ee23d0c8b8de301f236f0fd38700106eb1b4e"},{"date":"2019-06-22T16:27:31+08:00","author":"My","message":"20190622u","hash":"f11300a0452560a89c01d4d7da2434a9a786c3e0"},{"date":"2019-06-20T15:42:16+08:00","author":"My","message":"20190620学习","hash":"9cd447bb74d71ac7680a9b524352841ec2744ede"},{"date":"2019-06-19T23:21:29+08:00","author":"My","message":"20190619u","hash":"e87bb1d5074f6780c3ad1734be45d8d1764f947f"}],"createTime":"2019-06-19T23:21:29+08:00"}