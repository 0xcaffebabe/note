{"name":"渲染WEB视图","id":"编程语言-JAVA-框架-Spring-SpringMVC-渲染WEB视图","content":"# Web 视图渲染\n\n## 视图解析\n\nViewResolver接口\n\n```java\npublic interface ViewResolver {\n\n    View resolveViewName(String viewName, Locale locale) throws Exception;\n\n}\n```\n\nView接口\n\n```java\npublic interface View {\n\n    @Nullable\n    default String getContentType() {\n        return null;\n    }\n\n\n    void render(@Nullable Map<String, ?> model, HttpServletRequest request, HttpServletResponse response)\n            throws Exception;\n\n}\n```\n\n视图解析器的工作原理很简单，外部会传给视图解析器一个视图名和地区对象， 解析两个参数返回一个视图。 视图做的工作就是根据外部传入的模型，来渲染出html页面，使用 并使用 HttpServletResponse 输出到前端。\n\n### Spring 提供的视图解析器\n\n视图解析器                          | 说明\n------------------------------ | --------------------------------------------------\nAbstractCachingViewResolver    | 会对解析的View对象缓存 以提高性能\nUrlBasedViewResolver           | 会对redirect:、forward:等特殊的url特殊处理，并将请求转发给子类实现，返回具体视图\nInternalResourceViewResolver   | 继承了 UrlBasedViewResolver，可以用来访问内部资源，比如jsp等待\nFreeMarkerViewResolver         | 用来支持FreeMarker模板\nContentNegotiatingViewResolver | 用来支持HTTP的内容协商功能\nBeanNameViewResolver           | 一种极为灵活的视图解析方式，直接通过 Spring 中的容器 Bean 名称来获取视图\n\n\n### 创建JSP视图\n\n- 配置视图解析器\n\n  ```java\n  @Bean\n    public ViewResolver viewResolver() {\n        InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();\n        viewResolver.setPrefix(\"/WEB-INF/views/\");\n        viewResolver.setSuffix(\".jsp\");\n        viewResolver.setViewClass(JstlView.class);\n        return viewResolver;\n    }\n  ```\n\n  访问home就相当于访问/WEB-INF/views/home.jsp\n\n## 使用 Thymeleaf\n\n### 三个与spring集成的bean\n\n- 配置 thymeleaf\n\n  ```java\n  @Bean\n    public ViewResolver viewResolver() {\n        ThymeleafViewResolver resolver = new ThymeleafViewResolver();\n        resolver.setTemplateEngine((ISpringTemplateEngine) templateEngine());\n        resolver.setCharacterEncoding(\"UTF-8\");\n        return resolver;\n    }\n\n    @Bean\n    public TemplateEngine templateEngine() {\n        SpringTemplateEngine engine = new SpringTemplateEngine();\n        engine.setEnableSpringELCompiler(true);\n        engine.setTemplateResolver(templateResolver());\n        return engine;\n    }\n\n    private ITemplateResolver templateResolver() {\n        SpringResourceTemplateResolver resolver = new SpringResourceTemplateResolver();\n        resolver.setApplicationContext(applicationContext);\n        resolver.setPrefix(\"/WEB-INF/views/\");\n        resolver.setTemplateMode(TemplateMode.HTML);\n        return resolver;\n    }\n  ```\n\n- 使用thymeleaf\n\n  ```html\n  <p th:text=\"*{time}\"></p>\n  ```\n\n## 响应\n\n- 返回String类型\n\n  > 返回字符串可以指定逻辑视图名，通过视图解析器解析为物理视图地址\n  ```java\n  return \"redirect:http://baidu.com\"; // 重定向(浏览器地址栏发生变化)\n  return \"forward:/index.jsp\"; // 转发(地址栏不变化)\n  ```\n\n- 返回void类型\n\n  > 操作servlet api\n\n- 返回ModelAndView类型\n\n### 静态资源配置\n\n```xml\n    <!--配置静态资源过滤-->\n    <mvc:resources mapping=\"/js/**\" location=\"/js/\"/>\n```\n\n### 响应json\n\n@ResponseBody\n","metadata":"","hasMoreCommit":false,"totalCommits":5,"commitList":[{"date":"2022-03-09T17:10:36+08:00","author":"cjiping","message":"✏️更新 SpringMVC","hash":"a02e28348b132f8a1bea3eb7cc9f28555f538e3e"},{"date":"2019-08-22T17:07:06+08:00","author":"My、","message":"20190822下午","hash":"86f0c079ef6c8c13eee139709d6be1e48fa0956b"},{"date":"2019-06-22T16:27:31+08:00","author":"My","message":"20190622u","hash":"f11300a0452560a89c01d4d7da2434a9a786c3e0"},{"date":"2019-06-17T17:27:51+08:00","author":"My","message":"20190617u","hash":"4b756301cd1e3c154143c21e579083ddc0377ac3"},{"date":"2019-06-13T16:24:50+08:00","author":"My","message":"20190613u","hash":"b67ed9865e65e41302ec2d7c4513bf93a6511451"}],"createTime":"2019-06-13T16:24:50+08:00"}