{"name":"nav","id":"编程语言-JAVA-框架-SpringBoot-nav","content":"# Spring Boot\n\n- 内嵌式容器简化Web项目\n- 没有冗余代码生成和XML配置的要求\n\n## 与和SpringCloud\n\nSpringCloud依赖于SpringBoot组件，使用SpringMVC编写HTTP接口，同时SpringCloud是一套完整的微服务解决框架\n\n## 环境搭建\n\n```xml\n<parent> <!--继承父工程 -->\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>2.1.8.RELEASE</version>\n</parent>\n\n<dependencies>\n    <!--引入依赖-->\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n</dependencies>\n```\n\n```java\n@SpringBootApplication\npublic class Application{\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class);\n    }\n}\n```\n\n## 热部署\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-devtools</artifactId>\n    <optional>true</optional>\n</dependency>\n```\n\nIDEA需要开启自动编译\n\n## 配置\n\n### YML语法\n\n```yml\n# 普通数据配置\nname: hello\n\n# 对象配置\nperson:\n  name: kb\n  age: 3\n\n# 配置数组、集合(字符串)\ncity:\n  - beijing\n  - tianjing\n  - chongqing\n\n# 配置数组、集合(对象)\nstudent:\n  - name: tom\n    age: 3\n  - name: ll\n    age: 2\n```\n\n### 属性注入\n\n- @Value\n\n```java\n@Value(\"${name}\")\nprivate String name;\n```\n\n- @ConfigurationProperties\n\n```java\n@RestController\n@ConfigurationProperties(prefix = \"person\")\npublic class Controller {\n\n    private String name;\n    private Integer age;\n\n    @RequestMapping(\"/hi\")\n    public String hello(){\n        return name+age;\n    }\n\n    // 省略setter\n}\n```\n\n## 全局异常捕获\n\n```java\n@ControllerAdvice\npublic class ErrorHandler {\n\n    @ResponseBody\n    @ExceptionHandler(Throwable.class)\n    public String error(Exception e){\n        return e.getMessage();\n    }\n}\n```\n\n## 异步调用\n\n- 添加`@EnableAsync`\n- 在需要异步调用的方法上面添加`@Async`\n\n## 多环境配置\n\n```properties\nspring.profiles.active=dev\n```\n\n添加开发环境配置文件`application-dev.properties`\n\n## 事务管理\n\n- 依赖\n\n```xml\n<dependency>\n    <groupId>javax.transaction</groupId>\n    <artifactId>javax.transaction-api</artifactId>\n    <version>1.3</version>\n</dependency>\n```\n\n- 添加`@Transactional`\n\n## 多数据源\n\n配置多个DataSource，一个DataSource配置一个事务管理器，声明事务时指定事务管理器， 不同的ORM框架有不同的指定数据源的方式\n\n### jta-atomikos\n\n通过把多个DataSource交给jta事务管理器管理，使用jta事务管理器来解决分布式事务问题\n\n## 打包\n\n### jar\n\n- 添加插件\n\n```xml\n<plugin>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-maven-plugin</artifactId>\n</plugin>\n```\n\n- 执行`mvn package`\n\n### war\n\n添加打包插件\n\n- 设置打包方式\n\n```xml\n<packaging>war</packaging>\n```\n\n- 执行打包命令\n\n## 性能\n\n### 组件自动扫描带来的问题\n\n使用 @SpringBootApplication 注解后，会触发自动配置（ auto-configuration ）和 组件扫描 （ component scanning ）\n\n### JVM参数调整\n\n### 将tomcat改为undertow\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n    <exclusions>\n        <exclusion>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-tomcat</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-undertow</artifactId>\n</dependency>\n```\n\n## 监控中心\n\nActuator是spring boot的一个附加功能,可在应用程序生产环境时监视和管理应用程序\n\n- 添加依赖\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n```\n\n- 添加配置\n\n```yml\n# 暴露出所有监控接口\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: \"*\"\n```\n\n路径                    | 作用\n--------------------- | ----------------------------\n/actuator/beans       | 显示应用程序中所有Spring bean的完整列表。\n/actuator/configprops | 显示所有配置信息。\n/actuator/env         | 陈列所有的环境变量。\n/actuator/mappings    | 显示所有@RequestMapping的url整理列表。\n/actuator/health      | 显示应用程序运行状况信息 up表示成功 down失败\n/actuator/info        | 返回配置中前缀为info的配置项\n\n## 集成其他框架\n\n### 集成freemarker\n\n- 引入依赖\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-freemarker</artifactId>\n</dependency>\n```\n\n- 配置\n\n```properties\nspring.freemarker.allow-request-override=false\nspring.freemarker.cache=true\nspring.freemarker.check-template-location=true\nspring.freemarker.charset=UTF-8\nspring.freemarker.content-type=text/html\nspring.freemarker.expose-request-attributes=false\nspring.freemarker.expose-session-attributes=false\nspring.freemarker.expose-spring-macro-helpers=false\nspring.freemarker.suffix=.ftl\nspring.freemarker.template-loader-path=classpath:/templates/\n```\n\n- 创建Controller\n\n```java\n@Controller\npublic class HelloController {\n\n    @RequestMapping(\"hello\")\n    public String index(ModelMap map){\n        map.put(\"hello\",\"java\");\n        return \"index\";\n    }\n}\n```\n\n- 在template目录下创建index.ftl\n\n```html\n<body>\n    ${hello}\n</body>\n```\n\n### 集成Mybatis\n\n- 引入依赖\n\n```xml\n<dependency>\n    <groupId>org.mybatis.spring.boot</groupId>\n    <artifactId>mybatis-spring-boot-starter</artifactId>\n    <version>2.1.0</version>\n</dependency>\n```\n\n- 配置数据库信息和mybatis配置\n\n```properties\n# 数据库连接信息\nspring.datasource.username=root\nspring.datasource.password=123\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.datasource.url=jdbc:mysql:///ssm\n# mybatis相关配置\nmybatis.mapper-locations=mappers/*.xml\nmybatis.configuration.map-underscore-to-camel-case=true\n```\n\n- 配置mybatis包扫描路径\n\n```java\n@MapperScan(basePackages = \"wang.ismy.springmybatis.mapper\")\npublic class SpringMybatisApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringMybatisApplication.class, args);\n    }\n\n}\n```\n\n#### 整合PageHelper\n\n- 引入依赖\n\n```xml\n<dependency>\n    <groupId>com.github.pagehelper</groupId>\n    <artifactId>pagehelper-spring-boot-starter</artifactId>\n    <version>1.2.13</version>\n</dependency>\n```\n\n- 配置\n\n```properties\npagehelper.helperDialect=mysql\npagehelper.reasonable=true\npagehelper.supportMethodsArguments=true\npagehelper.params=count=countSql\npagehelper.page-size-zero=true\n```\n\n### 集成Junit\n\n- 导入依赖\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-test</artifactId>\n    <scope>test</scope>\n</dependency>\n```\n\n- 建立测试\n\n```java\n@SpringBootTest\n@RunWith(SpringRunner.class)\npublic class ControllerTest{\n\n    @Autowired\n    UserMapper mapper;\n\n    @Test\n    public void test(){\n        assertNotNull(mapper);\n    }\n}\n```\n\n### 集成Spring data jpa\n\n- 依赖\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\n</dependency>\n```\n\n- 配置\n\n```properties\n# 数据库连接信息\nspring.datasource.username=root\nspring.datasource.password=123\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.datasource.url=jdbc:mysql:///ssm\n\n# spring data jpa相关配置\nspring.jpa.database=mysql\nspring.jpa.show-sql=true\nspring.jpa.generate-ddl=true\nspring.jpa.hibernate.ddl-auto=update\n```\n\n#### 使用通用Mapper\n\n- 依赖\n\n```xml\n<dependency>\n    <groupId>tk.mybatis</groupId>\n    <artifactId>mapper-spring-boot-starter</artifactId>\n    <version>2.1.5</version>\n</dependency>\n```\n\n- 继承\n\n```java\npublic interface UserMapper extends BaseMapper<User> { }\n```\n\n- @MapperScan注解需要使用tk.mybatis包\n\n### 集成Redis\n\n- 依赖\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n```\n\n- 配置\n\n```properties\n# redis相关配置\nspring.redis.host=127.0.0.1\nspring.redis.port=6379\n```\n\n- 使用\n\n```java\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class RedisTest {\n\n    @Autowired\n    RedisTemplate<String,String> redisTemplate;\n\n    @Test\n    public void test(){\n        String name = redisTemplate.boundValueOps(\"name\").get();\n\n        Assert.assertEquals(\"my\",name);\n    }\n}\n```\n\n### 集成swagger\n\n- 依赖\n\n```xml\n<dependency>\n    <groupId>com.spring4all</groupId>\n    <artifactId>swagger-spring-boot-starter</artifactId>\n    <version>1.9.1.RELEASE</version>\n</dependency>\n```\n\n- 配置\n\n```properties\nswagger.base-package=wang.ismy.consume\n```\n\n```java\n@EnableSwagger2Doc\n```\n\n#### zuul整合各个微服务文档\n\n- 依赖\n\n```xml\n<dependency>\n    <groupId>com.spring4all</groupId>\n    <artifactId>swagger-spring-boot-starter</artifactId>\n    <version>1.9.1.RELEASE</version>\n</dependency>\n```\n\n- 配置\n\n```java\n@Component\n@Primary\n@EnableSwagger2Doc\nclass DocumentationConfig implements SwaggerResourcesProvider {\n    @Override\n    public List<SwaggerResource> get() {\n        List resources = new ArrayList<>();\n\n        resources.add(swaggerResource(\"consumer\", \"/api-consumer/v2/api-docs\", \"2.0\"));\n        return resources;\n    }\n\n    private SwaggerResource swaggerResource(String name, String location, String version) {\n        SwaggerResource swaggerResource = new SwaggerResource();\n        swaggerResource.setName(name);\n        swaggerResource.setLocation(location);\n        swaggerResource.setSwaggerVersion(version);\n        return swaggerResource;\n    }\n}\n```\n\n## 高级\n\n### @ConditionOnXX\n\n条件化注入bean\n\n### 切换内置服务器\n\n- 排除tomcat依赖\n- 引入其他内置服务器依赖\n\n### @EnableXX原理\n\n此类注解使用了@Import修饰，通过@Import注解来导入一些配置类\n\n@Import使用：\n\n1. 导入Bean\n2. 导入配置类\n3. ImportSelector的实现类\n    - 自定义需要导入的类逻辑（返回全限定类名）\n4. ImportBeanDefinitionRegistrar 实现类\n    - 自定义（编程式向IOC容器注册）\n\n### @EnableAutoConfiguration原理\n\n1. @Import AutoConfigurationImportSelector 加载配置类\n2. AutoConfigurationImportSelector读取META-INF/spring.factories 加载配置类\n\n### 自定义starter\n\n1. 定义autoconfigure模块\n2. 定义starter模块依赖autoconfigure模块\n3. 在autoconfigure模块定义META-INF/spring.factories\n\n### 事件监听\n\n- SpringApplicationRunListener\n- CommandLineRunner 项目启动后执行（放入ioc容器即可被识别）\n- ApplicationRunner 项目启动后执行（放入ioc容器即可被识别）\n\n为了在应用启动成功之后执行某些操作，某些情况下使用InitializingBean接口并不能满足请求，其回调方法afterPropertiesSet在Bean属性被设置后被调用，此时系统的部分组件可能仍处于未初始化状态。\n\n为解决这个问题，可使用Spring的事件监听机制，监听SpringBoot的`AvailabilityChangeEvent<ReadinessState>` 当状态为ReadinessState.ACCEPTING_TRAFFIC，表示应用可以开始准备接收请求了，此时再启动所需要的操作\n\n```java\n@EventListener\npublic void onSystemReady(AvailabilityChangeEvent<ReadinessState> event) {\n    if (event.getState().equals(ReadinessState.ACCEPTING_TRAFFIC)) {\n        // do something\n    }\n}\n```\n","metadata":"","hasMoreCommit":true,"totalCommits":19,"commitList":[{"date":"2021-06-10T11:18:22+08:00","author":"cjiping","message":"✏更新 SpringBoot","hash":"0778d54fa033302838f589261012e8c04ac1fd13"},{"date":"2021-05-05T14:17:56+08:00","author":"MY","message":"✏更新 SpringBoot","hash":"d4eae2256e94dcdad0f573af947d5a0036ce464a"},{"date":"2021-05-04T22:14:25+08:00","author":"MY","message":"✏更新 Spring Boot","hash":"8f795780ccaf1d503e4246c80dc40132d91447d3"},{"date":"2020-03-07T20:37:18+08:00","author":"MY","message":"增加 springboot 集成swagger","hash":"df6305f5fb461279a6a47f8095d254b483a12da2"},{"date":"2020-02-24T10:41:38+08:00","author":"MY","message":"redis增加实现发布订阅","hash":"43e6f5da2f55440c60a4ab4f241e10cd3df3387e"},{"date":"2020-01-21T15:42:53+08:00","author":"MY","message":"整合 pagehelper","hash":"68e285783c2dd89d2a277822a5898e0b25cc4b63"},{"date":"2020-01-20T16:54:57+08:00","author":"MY","message":"增加spring boot监控","hash":"16187f51da4edd427018c1862b3dbc1c0a8a3735"},{"date":"2020-01-20T15:38:34+08:00","author":"MY","message":"更新web表现模式","hash":"6ba4cf04352ceaa31f94a9841247972978bc9ee6"},{"date":"2020-01-20T08:46:15+08:00","author":"MY","message":"增加undertow容器","hash":"b6d2862b21ce7b19c7a64612cc899997bf7ec640"},{"date":"2020-01-19T20:51:01+08:00","author":"MY","message":"增加spring boot 性能调整","hash":"4c830755670cba70fc75909c930d0777e66385d2"}],"createTime":"2019-09-01T22:27:13+08:00"}