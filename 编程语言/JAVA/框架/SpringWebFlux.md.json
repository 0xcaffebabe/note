{"name":"SpringWebFlux","id":"编程语言-JAVA-框架-SpringWebFlux","content":"# WebFlux\n\n- 非阻塞，更高的性能\n- 函数式编程\n\n- 响应式：区别于传统编程模型，是异步的\n  - 围绕响应变化而构建的编程模型-网络组件响应I / O事件\n\n![阻塞模式](/assets/屏幕截图%202021-11-30%20205600.png)\n\n![非阻塞模式](/assets/屏幕截图%202021-11-30%20205309.png)\n\n## 概念\n\n### 响应式api\n\n- 接收Publisher作为输入\n- Flux或者Mono作为输出\n\n### 编程模型\n\nweb flux提供了两种编程模型：\n\n- 带注释的controller：和经典的web mvc一样\n- 功能端点：从到到尾由应用程序自己路由、处理请求。和nodejs一样\n\n### web mvc or web flux？\n\n![批注 2020-04-20 152918](/assets/批注%202020-04-20%20152918.png)\n\n### 服务器\n\n在 web flux中，可以跨tomcat、jetty等容器使用\n\n### 性能\n\n非阻塞方式进行操作需要更多的工作，这可能会稍微增加所需的处理时间\n使用响应式的好处在于能够以较少的固定数量线程以及更少的内存资源进行更好的扩展\n\n### 并发模型\n\n- 调用阻塞api：虽然一些方法可以在响应式编程中使用，但会引入一些额外的问题\n- 可变状态：通过运算符，形成一个响应式管道，在不同的阶段处理数据\n- 线程模型\n  - 原始线程模型\n  - 事件循环\n  - 调度程序\n- 配置\n  - 不同的服务器的配置需要使用各自服务器的api\n\n## 响应式核心\n\n### HttpHandler\n\n一个可以处理请求并且响应的单一方法\n不同的服务器具有不同的api\n\n### WebHandler\n\nspring web基于httphandler封装了WebHandler\n\n### Filters\n\n可以使用 WebFilter 处理请求\n\n### Exceptions\n\n可以使用ExceptionHandler来处理请求与响应中的异常\n\n### Codecs\n\nweb flux 提供了一些封装来负责数据的序列化与反序列化\n\n## DispatcherHandler\n\n类似于mvc中的DispatcherServlet\n\n负责对请求的统一控制与转发\n\n## 使用\n\n### 传统方式\n\n跟MVC一样 可以使用controller等相关注解进行使用\n\n### 函数式端点\n\n#### 概览\n\n```java\nclass Handler {\n    public  Mono<ServerResponse> listPeople(ServerRequest request) {\n        // ...\n    }\n    public Mono<ServerResponse> createPerson(ServerRequest request) {\n        // ...\n    }\n    public Mono<ServerResponse> getPerson(ServerRequest request) {\n        // ...\n    }\n}\nHandler handler = new Handler();\n// 定义路由映射\nRouterFunction<ServerResponse> route = route()\n        .GET(\"/person/{id}\", accept(APPLICATION_JSON), handler::getPerson)\n        .GET(\"/person\", accept(APPLICATION_JSON), handler::listPeople)\n        .POST(\"/person\", handler::createPerson)\n        .build();\n```\n\n#### ServerRequest\n\n提供了一个访问请求数据的东西\n\n```java\nMono<String> string = request.bodyToMono(String.class);\n```\n\n#### ServerResponse\n\n这玩意是不可变的，所以需要手动来创建\n\n```java\npublic  Mono<ServerResponse> listPeople(ServerRequest request) {\n    return ok().body(Mono.just(\"people list\"), String.class);\n}\n```\n\n#### 路由判断\n\n```java\n// 只有person/1才会被处理\nroute()\n.GET(\"/person/{id}\", accept(APPLICATION_JSON).and(request-> \"1\".equals(request.pathVariable(\"id\"))), handler::getPerson)\n```\n\n#### 路由优先级\n\n```java\nRouterFunction<ServerResponse> route = route()\n    .GET(\"/person/{id}\", accept(APPLICATION_JSON), handler::getPerson) //1\n    .GET(\"/person\", accept(APPLICATION_JSON), handler::listPeople)  // 2\n    .POST(\"/person\", handler::createPerson)  // 3\n    .add(otherRoute)  // 添加其他路由\n    .build();\n```\n\n#### 嵌套路由\n\n```java\nRouterFunction<ServerResponse> route = route()\n    .path(\"/person\", builder -> builder \n        .GET(\"/{id}\", accept(APPLICATION_JSON), handler::getPerson)\n        .GET(\"\", accept(APPLICATION_JSON), handler::listPeople)\n        .POST(\"/person\", handler::createPerson))\n    .build();\n```\n\n#### 运行\n\n- spring boot\n\n```java\n@EnableWebFlux\n\n@Bean\nRouterFunction<ServerResponse> routerFunction(){\n  ...\n}\n```\n\n#### 过滤器\n\n```java\nroute()\n  .before(req->{\n      System.out.println(req.path()+\"before\");\n      return req;\n  })\n  .GET(\"/person/{id}\", accept(APPLICATION_JSON).and(request-> \"1\".equals(request.pathVariable(\"id\"))), handler::getPerson)\n  .GET(\"/person\", accept(APPLICATION_JSON), handler::listPeople)\n  .POST(\"/person\", handler::createPerson)\n  .after((req,res)->{\n      System.out.println(req.path()+\"after\");\n      return res;\n  })\n  .build();\n```\n\n或者另外一种方式：\n\n```java\nroute()\n .GET(\"/person/{id}\", accept(APPLICATION_JSON).and(request-> \"1\".equals(request.pathVariable(\"id\"))), handler::getPerson)\n .GET(\"/person\", accept(APPLICATION_JSON), handler::listPeople)\n .POST(\"/person\", handler::createPerson)\n .filter((req,res)->{\n     System.out.println(req.path()+\"before\");\n     return res.handle(req);\n })\n .build();\n```","metadata":"tags: ['响应式', 'Spring']","hasMoreCommit":false,"totalCommits":3,"commitList":[{"date":"2021-11-30T22:15:48+08:00","author":"MY","message":"✏️更新 响应式编程","hash":"93c97a09b873a425dd245600588298028a28b0b5"},{"date":"2020-04-21T16:05:19+08:00","author":"MY","message":"更新 spring web flux","hash":"ec72b7e11560fa5c104b2c974d09492a5c06787c"},{"date":"2020-04-20T15:49:20+08:00","author":"MY","message":"增加 spring web flux","hash":"8a52801c548593559983f8f37710f8b565478892"}],"createTime":"2020-04-20T15:49:20+08:00"}