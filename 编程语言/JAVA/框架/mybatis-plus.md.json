{"name":"mybatis-plus","id":"编程语言-JAVA-框架-mybatis@@plus","content":"# MybatisPlus\n\n## 基本配置\n\n### spring boot 添加依赖\n\n```xml\n<dependency>\n  <groupId>com.baomidou</groupId>\n  <artifactId>mybatis-plus-boot-starter</artifactId>\n  <version>3.1.2</version>\n</dependency>\n```\n\n### 定义mapper接口\n\n```java\npublic interface UserMapper extends BaseMapper<User> { }\n```\n\n继承 com.baomidou.mybatisplus.core.mapper.BaseMapper 接口后，无需编写 mapper.xml 文件，即可获得[CRUD功能](https://baomidou.com/pages/49cc81/#service-crud-%E6%8E%A5%E5%8F%A3)\n\n### 定义实体类\n\n```java\n@TableName(\"sys_user\")\npublic class User {\n    @TableId\n    private Long id;\n    @TableField(\"nickname\")\n    private String name;\n    private Integer age;\n    private String email;\n}\n```\n\n[MybatisPlus的注解](https://baomidou.com/pages/223848)\n\n### 使用\n\n```java\n@Autowired\nUserMapper userMapper;\n\n@Test\npublic void test(){\n    User user = new User();\n    user.setUsername(\"root\");\n    user.setPassword(\"123\");\n    user.setAge(15);\n    user.setCreateTime(LocalDate.now());\n    assertEquals(1,userMapper.insert(user));\n}\n```\n\n## 查询\n\n### 普通查询\n\n### 条件构造器查询\n\n```java\n@Test\n  public void test2(){\n      QueryWrapper<User> queryWrapper = new QueryWrapper<>();\n      queryWrapper.like(\"username\",\"roo\")\n              .lt(\"age\",50);\n      var list = userMapper.selectList(queryWrapper);\n      assertEquals(2,list.size());\n      assertEquals(\"root\",list.get(0).getUsername());\n      assertEquals(\"rood\",list.get(1).getUsername());\n  }\n```\n\n#### [AbstractWrapper](https://baomidou.com/pages/10c804/#abstractwrapper)\n\n- [规格模式](/软件工程/领域驱动设计.md#隐式概念)\n\nQueryWrapper(LambdaQueryWrapper) 和 UpdateWrapper(LambdaUpdateWrapper) 的父类\n\n#### [QueryWrapper](https://baomidou.com/pages/10c804/#querywrapper)\n\n相比 AbstractWrapper 多了select接口\n\n#### LambdaQueryWrapper\n\n```java\nLambdaQueryWrapper<FzWarn> lqw = new LambdaQueryWrapper<FzWarn>()\n        .eq(FzWarn::getSspt, \"10\");\n// 等价于\nnew QueryWrapper<FzWarn>()\n        .eq(\"sspt\", \"10\");\n```\n\n好处是可以利用编译期的类型检查，避免写错字段\n\n#### [UpdateWrapper](https://baomidou.com/pages/10c804/#updatewrapper)\n\n相比 AbstractWrapper 多了 set 接口, 用来描述要更新哪些字段为什么值\n\n#### 自定义SQL\n\n- 注解查询\n\n```java\n@Select(\"select * from mysql_data ${ew.customSqlSegment}\")\nList<MysqlData> getAll(@Param(Constants.WRAPPER) Wrapper wrapper);\n```\n\n- xml查询\n\n```java\nList<MysqlData> getAll(Wrapper ew);\n```\n\n```xml\n<select id=\"getAll\" resultType=\"MysqlData\">\n\tSELECT * FROM mysql_data ${ew.customSqlSegment}\n</select>\n```\n\n### 注解查询\n\n```java\npublic interface UserMapper extends BaseMapper<User> {\n\n  @Select(\"SELECT * FROM user \")\n  List<User> selectAll();\n}\n```\n\n### 分页查询\n\n- 配置分页插件\n\n```java\n@Bean\npublic PaginationInterceptor paginationInterceptor(){\n    return new PaginationInterceptor();\n}\n```\n\n- 查询\n\n```java\n@Test\npublic void test4(){\n    Page<User> page = new Page<>(1,2);\n\n    var list = userMapper.selectPage(page,null).getRecords();\n    assertEquals(2,list.size());\n  }\n```\n\n## 更新\n\n```java\n@Test\npublic void test5(){\n    UpdateWrapper<User> wrapper = new UpdateWrapper<User>().eq(\"username\",\"root\");\n    User user = new User();\n    user.setPassword(\"5678\");\n    userMapper.update(user, wrapper);\n}\n```\n\n## 删除\n\n```java\nUpdateWrapper<User> wrapper = new UpdateWrapper<User>()\n    .eq(\"username\",\"root\");\nuserMapper.delete(wrapper);\n```\n\n## AR模式\n\n- 实体类继承Model\n\n```java\n@Data\npublic class User extends Model<User> {\n\n    private String username;\n    private String password;\n    private Integer age;\n    private LocalDate createTime;\n}\n```\n\n```java\n@Test\n    public void test6(){\n        User user = new User();\n        user.setUsername(\"20190716\");\n        user.setPassword(\"123\");\n        user.setCreateTime(LocalDate.now());\n        user.setAge(111);\n        assertTrue(user.insert());\n    }\n```\n\n## 主键策略\n\n```java\n@KeySequence(value = \"SEQ_ORACLE_STRING_KEY\", clazz = String.class)\npublic class YourEntity {\n    // 必须使用 INPUT\n    @TableId(value = \"ID_STR\", type = IdType.INPUT)\n    private String idStr;\n\n}\n\n/* \nDB2KeyGenerator\nH2KeyGenerator\nKingbaseKeyGenerator\nOracleKeyGenerator\nPostgreKeyGenerator\n实现 com.baomidou.mybatisplus.core.incrementer.IdentifierGenerator 接口自定义主键策略\n*/\n@Bean\npublic IKeyGenerator keyGenerator() {\n    return new H2KeyGenerator();\n}\n```\n\n## 逻辑删除\n\n- 删除: update user set deleted=1 where id = 1 and deleted=0\n- 查找: select id,name,deleted from user where deleted=0\n\n```yml\nmybatis-plus:\n  global-config:\n    db-config:\n      logic-delete-field: flag # 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)\n      logic-delete-value: 1 # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\n```\n\n```java\n@TableLogic\nprivate Integer deleted;\n```\n\n## 字段类型映射器\n\n- 用于 JavaType 与 JdbcType 之间的转换\n\n实现 org.apache.ibatis.type.TypeHandler 接口\n\n```java\n@Data\n@Accessors(chain = true)\n// 使用映射器，就必须开启 autoResultMap = true\n@TableName(autoResultMap = true)\npublic class User {\n    ...\n\n    // json\n    @TableField(typeHandler = JacksonTypeHandler.class)\n    private OtherInfo otherInfo;\n\n}\n```\n\n```xml\n<result column=\"other_info\" jdbcType=\"VARCHAR\" property=\"otherInfo\" typeHandler=\"com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler\" />\n```\n\n## 自动填充\n\n- 在插入或更新的时候自动填充字段\n\n```java\npublic class User {\n\n    @TableField(.. fill = FieldFill.INSERT)\n    private String createTime;\n\n    @TableField(.. fill = FieldFill.UPDATE)\n    private String updateTime;\n    ....\n}\n```\n\n自定义填充处理器：\n\n```java\n@Slf4j\n@Component\npublic class MyMetaObjectHandler implements MetaObjectHandler {\n\n    @Override\n    public void insertFill(MetaObject metaObject) {\n        this.strictInsertFill(metaObject, \"createTime\", LocalDateTime.class, LocalDateTime.now()); // 起始版本 3.3.0(推荐使用)\n        // 或者\n        this.strictInsertFill(metaObject, \"createTime\", () -> LocalDateTime.now(), LocalDateTime.class); // 起始版本 3.3.3(推荐)\n        // 或者\n        this.fillStrategy(metaObject, \"createTime\", LocalDateTime.now()); // 也可以使用(3.3.0 该方法有bug)\n    }\n\n    @Override\n    public void updateFill(MetaObject metaObject) {\n        this.strictUpdateFill(metaObject, \"updateTime\", LocalDateTime.class, LocalDateTime.now()); // 起始版本 3.3.0(推荐)\n        // 或者\n        this.strictUpdateFill(metaObject, \"updateTime\", () -> LocalDateTime.now(), LocalDateTime.class); // 起始版本 3.3.3(推荐)\n        // 或者\n        this.fillStrategy(metaObject, \"updateTime\", LocalDateTime.now()); // 也可以使用(3.3.0 该方法有bug)\n    }\n}\n```\n\n填充策略：\n\n- DEFAULT：默认不处理\n- INSERT：插入填充\n- UPDATE：更新填充\n- INSERT_UPDATE：插入和更新都填充\n\n## SQL注入器\n\n- 通过实现com.baomidou.mybatisplus.core.injector.ISqlInjector 接口可以实现将一些自定义方法注入到所有mapper里，BaseMapper就是这么实现的\n\n自定义方法则需要继承 com.baomidou.mybatisplus.core.injector.AbstractMethod 实现\n\n具体可以参考 com.baomidou.mybatisplus.core.injector.DefaultSqlInjector 这个类的源代码\n\n## SQL分析打印\n\n- 需要引入p6spy依赖，一般用在开发环境打印出执行的SQL调试使用\n\n[具体配置](https://baomidou.com/pages/833fab/)\n\n## 数据安全\n\n### 配置安全\n\n```yml\n# 加密配置 mpw: 开头紧接加密内容（ 非数据库配置专用 YML 中其它配置也是可以使用的 ）\nspring:\n  datasource:\n    url: mpw:qRhvCwF4GOqjessEB3G+a5okP+uXXr96wcucn2Pev6Bf1oEMZ1gVpPPhdDmjQqoM\n    password: mpw:Hzy5iliJbwDHhjLs1L0j6w==\n    username: mpw:Xb+EgsyuYRXw7U7sBJjBpA==\n```\n\n主要是通过16位随机AES密钥对原始内容进行加密：\n\n```java\n// 生成 16 位随机 AES 密钥\nString randomKey = AES.generateRandomKey();\n\n// 随机密钥加密\nString result = AES.encrypt(data, randomKey);\n```\n\n指定密钥：\n\n```sh\n# Jar 启动参数（ idea 设置 Program arguments , 服务器可以设置为启动环境变量 ）\n--mpw.key=d1104d7c3b616f0b\n```\n\n### 字段加解密\n\n- 需要引入 mybatis-mate-starter\n\n```java\n@FieldEncrypt\nprivate String email;\n```\n\n### 字段脱敏\n\n```java\n@FieldSensitive(\"testStrategy\")\nprivate String username;\n```\n\n自定义脱敏策略：\n\n```java\n@Configuration\npublic class SensitiveStrategyConfig {\n\n    /**\n     * 注入脱敏策略\n     */\n    @Bean\n    public ISensitiveStrategy sensitiveStrategy() {\n        // 自定义 testStrategy 类型脱敏处理\n        return new SensitiveStrategy().addStrategy(\"testStrategy\", t -> t + \"***test***\");\n    }\n}\n```\n\n跳过脱敏处理：\n\n```java\nRequestDataTransfer.skipSensitive();\n```\n\n## 插件\n\nMybatis 要自定义插件需要实现 org.apache.ibatis.plugin.Interceptor\n\n而MybatisPlus 在较新的版本中，使用自己的接口：com.baomidou.mybatisplus.extension.plugins.inner.InnerInterceptor 这个接口的扩展点更加齐全\n\nMP自带的一些插件：\n\n- 自动分页: PaginationInnerInterceptor\n- 多租户: TenantLineInnerInterceptor\n- 动态表名: DynamicTableNameInnerInterceptor\n- 乐观锁: OptimisticLockerInnerInterceptor\n- sql 性能规范: IllegalSQLInnerInterceptor\n- 防止全表更新与删除: BlockAttackInnerInterceptor","metadata":"","hasMoreCommit":false,"totalCommits":5,"commitList":[{"date":"2022-07-04T10:28:32+08:00","author":"cjiping","message":"✏️更新 MybatisPlus","hash":"d25e860002e8788465e4bcce7b2dcd56cc10e665"},{"date":"2022-06-29T15:07:24+08:00","author":"cjiping","message":"✏️更新 MybatisPlus","hash":"88e5059ba0a3ff3d65434eceb7f04b40121b7a6e"},{"date":"2019-07-16T17:18:13+08:00","author":"My、","message":"20190716下午","hash":"aa5931cd65df2656a1cef306325f3780db4fdd42"},{"date":"2019-07-16T12:33:12+08:00","author":"My、","message":"20190716上午","hash":"e515590272c4b38e6fd40a7fe3aa292a94971dd3"},{"date":"2019-07-15T17:27:04+08:00","author":"My、","message":"20190715","hash":"b807838b20ab970bf9429a80da38113f5e3a1991"}],"createTime":"2019-07-15T17:27:04+08:00"}