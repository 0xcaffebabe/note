{"name":"NIO","id":"编程语言-JAVA-高级-NIO","content":"# NIO\n\n## 与BIO的区别\n\n- BIO是面向流的，NIO是面向缓冲区的；\n- BIO流是阻塞的，NIO流是不阻塞的;\n- NIO有选择器，而IO没有。\n\n## 传统BIO模型的缺点\n\n- 严重依赖于线程 线程是很昂贵的\n  - 线程内存资源 上下文切换成本\n\n![202073116749](/assets/202073116749.jpg)\n\nNIO 的线程模型\n\n```java\n while(channel=Selector.select()){//选择就绪的事件和对应的连接\n      if(channel.event==accept){\n         registerNewChannelHandler(channel);//如果是新连接，则注册一个新的读写处理器\n      }\n      if(channel.event==write){\n         getChannelHandler(channel).channelWritable(channel);//如果可以写，则执行写事件\n      }\n      if(channel.event==read){\n          getChannelHandler(channel).channelReadable(channel);//如果可以读，则执行读事件\n      }\n    }\n   }\n```\n\n## NIO 的 Reactor Proactor\n\n### Reactor\n\n```mermaid\nstateDiagram-v2\n    direction LR\n    state \"Service Handler & Event Dispather\" as dispatcher\n    input1 --> dispatcher\n    input2 --> dispatcher\n    input3 --> dispatcher\n    dispatcher --> RequestHandler1\n    dispatcher --> RequestHandler2\n    dispatcher --> RequestHandler3\n```\n\n事件驱动思想\n\n- 多线程模型\n  - 一个接收线程，多个处理线程\n\n- 步骤1：等待事件到来（Reactor负责）。\n- 步骤2：将读就绪事件分发给用户定义的处理器（Reactor负责）。\n- 步骤3：读数据（用户处理器负责）。\n- 步骤4：处理数据（用户处理器负责）。\n\n### Proactor\n\n![202172311918](/assets/202172311918.png)\n\n- 步骤1：等待事件到来（Proactor负责）。\n- 步骤2：得到读就绪事件，执行读数据（现在由Proactor负责）。\n- 步骤3：将读完成事件分发给用户处理器（Proactor负责）。\n- 步骤4：处理数据（用户处理器负责）。\n\nProactor 中，直接监听读/写操作是否完成，也就是说读/写操作是否 OS 来完成，并将读写数据放入一个缓冲区提供给程序\n\n## Buffer\n\n- DirectByteBuffer 可以减少内存从内核到用户的拷贝 但是创建消费成本更高 需要池化\n- HeapByteBuffer 使用堆内存\n\n## 核心类\n\n![屏幕截图 2020-09-28 140403](/assets/屏幕截图%202020-09-28%20140403.png)\n\n- Buffer：数据容器，除了布尔类型，所有原始数据类型都有相应的 Buffer 实现\n- Channel：类似 Linux 之类操作系统上的文件描述符\n- Selector：可以实现单线程对多 Channel 的高效管理，Linux 上依赖于epoll，Windows 上 NIO2（AIO）模式则是依赖于iocp\n\n### ByteBuffer\n\n属性：\n\n- capacity 缓冲区数组总长度\n- position 下一个要操作的数据元素位置\n- limit 缓冲区不可操作的下一个元素的位置 limit<=capacity\n- mark 类似于书签\n\n![屏幕截图 2020-09-28 141745](/assets/屏幕截图%202020-09-28%20141745.png)\n\n对比项    | HeapByteBuffer             | DirectByteBuffer\n-|-|-\n存储位置 | Java Heap中                 | Native内存中\nI/O  | 需要在用户地址空间和操作系统内核地址空间复制数据   | 不需复制\n内存管理 | Java GC回收，创建和回收开销少          | 通过调用System.gc要释放掉Java对象引用的DirectByteBuffer内空间， 如果Java对象长时间持有引用可能会导致Native内存泄漏，创建和回收内存开销较大\n适用场景 | 并发连接数少于1000, I/O 操作较少时比较合适 | 数据量比较大、生命周期比较长的情况下比较合适\n\n大多数垃圾收集过程中，都不会主动收集 DirectBuffer，其内部使用 Cleaner 和虚引用（PhantomReference）机制，其本身不是 public 类型，内部实现了一个 Deallocator 负责销毁的逻辑\n\n#### [零拷贝](/操作系统/输入输出.md#零拷贝)\n\n- MappedByteBuffer 是 NIO 基于内存映射（mmap）这种零拷贝方式的提供的一种实现\n- DirectByteBuffer 在 MappedByteBuffer 的基础上提供了内存映像文件的随机读取 get() 和写入 write() 的操作\n- FileChannel.transferXXX 是 sendfile 的实现\n\n### 文件输出例子\n\n```java\nFileOutputStream fos = new FileOutputStream(\"file.txt\");\nFileChannel channel = fos.getChannel();\nByteBuffer buffer = ByteBuffer.allocate(1024);\nbuffer.put(\"20191204\".getBytes());\n// 翻转缓冲区\nbuffer.flip();\nchannel.write(buffer);\nfos.close();\n```\n\n### 文件输入\n\n```java\nFile file = new File(\"file.txt\");\nFileInputStream fis = new FileInputStream(file);\nByteBuffer buffer = ByteBuffer.allocate((int) file.length());\nFileChannel channel = fis.getChannel();\nchannel.read(buffer);\nSystem.out.println(new String(buffer.array()));\nfis.close();\n```\n\n### 文件复制\n\n```java\nFileInputStream fis = new FileInputStream(\"file.txt\");\nFileOutputStream fos = new FileOutputStream(\"file1.txt\");\nFileChannel source = fis.getChannel();\nFileChannel target = fos.getChannel();\ntarget.transferFrom(source,0,source.size());\nsource.close();\ntarget.close();\n```\n\n## 网络编程\n\n- Selector\n\n它是Java NIO核心组件中的一个，用于检查一个或多个NIO Channel（通道）的状态是否处于可读、可写。如此可以实现单线程管理多个channels,也就是可以管理多个网络链接\n\n```mermaid\nstateDiagram-v2\n    Selector --> Channel1: 轮询\n    Selector --> Channel2: 轮询\n    Selector --> Channel3: 轮询\n    Selector --> Channel4: 轮询\n```\n\n- SelectionKey\n\n一个SelectionKey键表示了一个特定的通道对象和一个特定的选择器对象之间的注册关系\n\n- ServerSocketChannel\n\nJava NIO 中的 ServerSocketChannel 是一个可以监听新进来的 TCP 连接的通道, 就像标准 IO 中的 ServerSocket一样\n\n- SocketChannel\n\nJava NIO 中的 SocketChannel 是一个连接到 TCP 网络套接字的通道\n\n### 客户端\n\n```java\n// 得到一个网络通道\nSocketChannel channel = SocketChannel.open();\n// 设置非阻塞方式\nchannel.configureBlocking(false);\n// 提供服务器IP与端口\nInetSocketAddress address = new InetSocketAddress(\"127.0.0.1\", 1999);\n// 连接\nif (!channel.connect(address)) {\n    while (!channel.finishConnect()) {\n        System.out.println(\"客户端：正在连接服务器\");\n    }\n}\n// 发送数据\nByteBuffer buffer = ByteBuffer.wrap(\"cxk 打篮球\".getBytes());\nchannel.write(buffer);\n```\n\n### 服务端框架\n\n```java\n// 获取网络通道\nServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\n// 获取选择器\nSelector selector = Selector.open();\n// 绑定端口\nserverSocketChannel.bind(new InetSocketAddress(1999));\n// 设置为非阻塞方式(accept时不阻塞)\nserverSocketChannel.configureBlocking(false);\n// 注册选择器，让选择器监听连接事件\nserverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\nwhile (true) {\n    // 每2000ms轮询一次，select返回的结果是客户数\n    if (selector.select(2000) == 0){\n        System.out.println(\"等待客户连接\");\n        continue;\n    }\n    // 获取准备连接的所有客户\n    Iterator<SelectionKey> iterator = selector.selectedKeys().iterator();\n    while (iterator.hasNext()){\n        SelectionKey key = iterator.next();\n        if (key.isAcceptable()){\n            // 客户端连接事件\n            System.out.println(\"客户端连接\");\n            SocketChannel socketChannel = serverSocketChannel.accept();\n            socketChannel.configureBlocking(false); // 读取客户端数据时不会阻塞\n            socketChannel.register(selector,SelectionKey.OP_READ, ByteBuffer.allocate(1024));\n        }\n        if (key.isReadable()){\n            // 读取客户端数据事件\n            SocketChannel channel = (SocketChannel) key.channel();\n            ByteBuffer buffer = (ByteBuffer) key.attachment();\n            channel.read(buffer);\n            System.out.println(\"客户端发来数据:\"+new String(buffer.array()));\n        }\n        // 删除客户key，防止重复处理\n        iterator.remove();\n    }\n}\n```\n\n## [系统层面的NIO](/操作系统/输入输出.md#IO模型)\n","metadata":"","hasMoreCommit":true,"totalCommits":21,"commitList":[{"date":"2024-11-19T17:03:38+08:00","author":"MY","message":"📦网络编程","hash":"1fe5f596dea9aa7a90ea0bd3b8e3aace14c90796"},{"date":"2023-09-13T16:31:05+08:00","author":"MY","message":"📦IO","hash":"4d55fc1e6699d75db71a6082e18f36a4a89e8767"},{"date":"2023-09-04T09:54:53+08:00","author":"MY","message":"✏NIO","hash":"ff2f75191188f0c591f9c4921dba87d246d8fa9c"},{"date":"2023-03-09T09:41:00Z","author":"My","message":"🛠替换在线图片","hash":"0c8b08bc22fbe482ba02da2f1fcad211441d3c23"},{"date":"2022-10-17T21:32:25+08:00","author":"MY","message":"✏️NIO","hash":"f5f1bd0672d8bfbdb3153e98b72c26ed22f2bf20"},{"date":"2022-06-14T16:05:20+08:00","author":"cjiping","message":"📦整理 零拷贝","hash":"e17e9f8a29c5a0dc08e77530a959a27b32e45e39"},{"date":"2021-07-23T11:23:58+08:00","author":"cjiping","message":"✏更新 netty nio","hash":"94445280f4409e4f4d6b7c8348a90523f25070ac"},{"date":"2020-09-28T14:48:29+08:00","author":"MY","message":"✏更新 IO 相关","hash":"28a47fdbc34dc2ec42719fe67cfb84287ce841c7"},{"date":"2020-08-23T10:54:22+08:00","author":"MY","message":"✏更新 NIO","hash":"4f6e275cde2dd0ef179ba8d60f491edff110bfed"},{"date":"2020-08-22T17:02:41+08:00","author":"MY","message":"✏更新 NIO","hash":"5bc8f0c140c4f42942e6e2ef4f3d619985cf5020"}],"createTime":"2019-08-03T17:06:01+08:00"}