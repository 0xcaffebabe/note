{"name":"嵌套类","id":"编程语言-JAVA-高级-嵌套类","content":"# 嵌套类\n\n- 静态嵌套类，类前面有static修饰符\n- 非静态嵌套类，又称内部类\n  - 普通内部类\n  - 局部内部类\n  - 匿名内部类\n\n```java\npublic class Main {\n\n    // 静态嵌套类\n    static class Inner1{ }\n    /* 包内静态内部类的好处：\n    1. 作用域不会扩散到包外\n    2. 可使用 外部类.内部类 方式直接访问\n    3. 内部类可以直接访问所有静态属性及方法\n    */\n\n    // 普通内部类\n    class Inner2{}\n    \n    public void f(){\n        // 局部内部类\n        class Inner3{}\n        \n        // 匿名内部类\n        new Object(){};\n    }\n    \n}\n```\n\n## 使用理由\n\n- 细粒度访问控制\n- 避免过多类定义\n\n## 匿名内部类\n\n- 没有正式类名\n- 没有构造函数\n- 可以继承、改写、增加父类的方法\n- 不能定义静态成员（静态常量除外）\n- 可以访问外部类的成员\n\n## 局部内部类\n\n- 编译后名称：外部类名+$+序号+内部类名\n- 可以继承其他类，或者实现其他接口\n- 非静态的类，不能包含静态成员(变量和方法)，除了常量\n- 可以访问外部包围类的成员\n- 如果定义在静态方法中，只能访问包围类的静态成员\n- 局部内部类不能是一个接口，即接口不能定义在代码块中\n\n## 普通内部类\n\n- 编译后名称：外部类名+$+内部类名\n- 可以继承其他类，或者实现其他接口\n- 可以用private/package private(不写)/protected/public控制外界访问\n- 非静态的类，不能包含静态变量/方法，除了常量\n- 和外部包围类的实例相关，一个普通内部类实例肯定是在一个外部包围类的实例中，且可以访问外部包围类的所有成员\n- 在第三方类中，需要先创建外部包围类实例，才能创建普通内部\n类的实例，不允许单独的普通内部类对象存在！！！\n\n## 静态嵌套类\n\n- 需要加修饰符static\n- 可以定义静态成员和非静态成员\n- 不能直接访问包围类的非静态成员，可直接访问包围类的静态成员\n  - 可通过包围类的对象进行访问非静态成员\n- 外界可以通过静态嵌套类名访问其静态成员，通过对象访问其非静态成员\n- 外界需要通过包围类才可以访问到静态嵌套类，并创建其对象，不需要外部包围类的实例\n\n## 对比\n\n类型|未知|名字|作用范围|基本信息\n-|-|-|-|-\n匿名内部类|成员遍历或者成员方法内|外部类名+$+数字编号|跟随被赋值遍历的作用范围，外界无法访问|没有类名，没有构造函数，没有 static private/default/protected/public 修饰符\n局部内部类|成员方法内|外部类名+$+序号+内部类名|所在的方法内，外界无法访问|有类名，有构造函数，没有 static private/default/protected/public 修饰符\n普通内部类|成员遍历|外部类名+$+内部类名|包围类内可以访问，外界可以访问|有类名，有构造函数，没有 static，有 private/default/protected/public 修饰符\n静态嵌套类|成员遍历|外部类名+$+内部类名|包围类内可以访问，外界可以访问|有类名，有构造函数，有 static，有 private/default/protected/public 修饰符\n\n类型|嵌套类内部的内容|可访问的外部包围类内容|和外部类关系\n-|-|-|-\n匿名内部类|不能带静态成员，除了常量|访问外部的所有成员|在外部类对象内部\n局部内部类|不能带静态成员，除了常量|访问外部的所有成员|在外部类对象内部\n普通内部类|不能带静态成员，除了常量|访问外部的所有成员|外界可以new,但是对象必须依附于一个外部包围类对象\n静态嵌套类|可以定义静态成员遍历何方法|访问外部的所有静态成员|外界可以new，可独立工作\n\n**变量遮蔽**\n\n- 以离得近作为优先原则\n- 优先级高的变量会遮蔽优先级低的变量\n- 外部包围类.this.变量名，可以访问到外部包围类的成员变量\n- 静态嵌套类不能访问非静态变量\n- Java 7及以前，匿名内部类和局部内部类只能访问外部包围类的final成员变量\n- Java 8及以后，匿名内部类和局部内部类可访问外部包围类的final成员变量和\n事实意义上的final变量(effectively final, 一个变量定值后，再也没有改过值)\n\n## 应用\n\n- 匿名内部类\n  - 无需类名，用过即焚，使用广泛\n  - 该类的对象只要一个，且方法只有一个，代码短\n    - Android中常用匿名内部类\n- 局部内部类\n  - 定义在方法体内，只能在当前方法内使用，代码短\n  - 使用较少\n  - 介于匿名内部类和普通内部类之间\n    - 迭代器\n- 普通内部类\n  - 广泛使用在具有母子结构的类，内部类对象和外围类保持联系\n  - 如Map和Map.Entry，ZipFile和ZipFile.ZipEntryIterator等\n- 静态嵌套类\n  - 和外围类没有太多的联系\n  - 节省普通内部类和外围类的联系开销\n  - 使得外围类对象更容易被垃圾回收器回收\n\n","metadata":"","hasMoreCommit":false,"totalCommits":7,"commitList":[{"date":"2024-11-18T15:00:13+08:00","author":"MY","message":"📦Java 基础","hash":"270332d69c4b80cb8600b368ecda389c7c95b038"},{"date":"2020-09-15T10:27:09+08:00","author":"MY","message":"✏更新 Java 嵌套类","hash":"27ee8cb8e0aa387263bfb7d921c91333f905e92b"},{"date":"2020-08-04T09:53:04+08:00","author":"MY","message":"✏更新 JAVA stream","hash":"69f03c7192262c8fd52f7fab8a7000b89a6272ef"},{"date":"2019-11-25T14:10:39+08:00","author":"MY","message":"完结了JAVA嵌套类&复习数据库系统","hash":"a7aad5954b84b3548a34bf78cec5090eaad87b66"},{"date":"2019-11-24T16:48:59+08:00","author":"MY","message":"新增垃圾回收器&tomcat优化&内部类相关","hash":"ab4330355fdb99577b1ba8fcca8020efef13761d"},{"date":"2019-11-23T17:02:59+08:00","author":"MY","message":"新增JVM 内存分析工具 垃圾回收算法& JAVA内部类相关","hash":"239fd2c338b6fb9891db155442e5753782bcbca5"},{"date":"2019-11-22T14:20:36+08:00","author":"MY","message":"新增注解应用及嵌套类入门","hash":"65669d8458ed4a8b5cb807319b5b6476ff31e67f"}],"createTime":"2019-11-22T14:20:36+08:00"}