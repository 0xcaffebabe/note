{"name":"网络编程","id":"编程语言-JAVA-高级-网络编程","content":"# BIO\n\n## Socket\n\n- public InputStream getInputStream() ： 返回此套接字的输入流。\n- public OutputStream getOutputStream() ： 返回此套接字的输出流。\n- public void close() ：关闭此套接字。\n- public void shutdownOutput() ： 禁用此套接字的输出流。\n\n### 工作机制\n\n- 通信链路建立\n\n客户端创建一个Socket实例 这个实例包含 本地地址 本地端口 远程地址 远程端口\n\n服务端会创建一个ServerSocekt 包含监听地址 监听端口 监听地址通常情况下都是* 代表监听所有地址 \n\n当一个新的客户端进来后 进行三次握手之后, ServerSocekt 会创键一个Socekt实例\n\n- 数据传输\n\n两端的Socekt都有对应的输入输出流 这些流又有相应的缓冲区 如果缓冲区满了或者空了 读写操作就会被阻塞\n\n## ServerSocket\n\n- public Socket accept() ：侦听并接受连接，返回一个新的Socket对象，用于和客户端实现通信","metadata":"","hasMoreCommit":false,"totalCommits":10,"commitList":[{"date":"2020-09-28T14:48:29+08:00","author":"MY","message":"✏更新 IO 相关","hash":"28a47fdbc34dc2ec42719fe67cfb84287ce841c7"},{"date":"2020-07-31T16:16:20+08:00","author":"MY","message":"✏更新 NIO","hash":"fee2fc1af89648bab29c495e076eaf724ea3e8b2"},{"date":"2020-07-26T14:24:42+08:00","author":"MY","message":"✏更新 网络编程","hash":"d0fbf01b2d89a33d75c707194bc601987840b4c7"},{"date":"2020-07-22T11:23:38+08:00","author":"MY","message":"✏更新 NIO","hash":"54baa006043a695c3b9b9a6dd47df4b8c0e1f0f3"},{"date":"2020-07-13T14:33:19+08:00","author":"MY","message":"✏更新 NIO","hash":"2893c64983cef5c44001271a0648c3507e86c18b"},{"date":"2019-12-06T11:48:29+08:00","author":"MY","message":"新增NIO服务器框架","hash":"64b4bfd31c4bedd215993cc71bc65a7859b6c314"},{"date":"2019-12-05T23:14:13+08:00","author":"MY","message":"新增了NIO-网络编程","hash":"def2eaf2d25714295abe6478547dbc12baad091b"},{"date":"2019-12-04T22:24:19+08:00","author":"MY","message":"添加了NIO相关内容","hash":"60bb7da4361acbbb1f8432a37e6b82945527eede"},{"date":"2019-08-04T12:13:16+08:00","author":"My、","message":"20190804上午","hash":"c4ac198813db6607fdf56fec9320bc02cdcaa99e"},{"date":"2019-08-03T17:06:01+08:00","author":"My、","message":"20190803下午","hash":"5a577c357197f6079515ad6b7d7f0c49ea918e2b"}],"createTime":"2019-08-03T17:06:01+08:00"}