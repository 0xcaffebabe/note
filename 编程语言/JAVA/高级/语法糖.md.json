{"name":"语法糖","id":"编程语言-JAVA-高级-语法糖","content":"# 语法糖\n\n>语法糖（Syntactic sugar）是由英国计算机科学家彼得·兰丁发明的一个术语，指计算机语言中添加的某种语法，这种语法对语言的功能没有影响，但是更方便程序员使用。语法糖让程序更加简洁，有更高的可读性。\n\n## ForEach\n\n```java\nfor(type element: array){\n    System.out.println(element);\n}\n```\n\nfor vs for-each\n\n- for-each从JDK5.0开始引入\n- for-each语法更简洁\n- for-each避免越界错误\n- for可以删除元素，for-each不可以删除/替换元素\n- for-each遍历的时候，是不知道当前元素的具体位置索引\n- for-each只能正向遍历，不能反向遍历\n- for-each不能同时遍历2个集合\n- for和for-each性能接近\n\n## 枚举\n\n```java\npublic enum Size{\n    SMALL,MEDIUM,LARGE;\n}\n```\n\n- Enum的子类\n- 有多少值，则有多少实例对象\n- 无法直接创建\n- 可以添加属性、构造函数、方法\n- 构造函数只能为私有\n\n接口返回值不允许使用枚举类型的原因是如果类库没有及时升级，在反序列化的时候当根据序列化数据序列相应枚举的话很可能找不到相应枚举。从而抛异常\n\n## 不定项参数\n\n```java\npublic void method(String a,String...b){ }\n```\n\n- 固定参数重载优先级比不定项高\n\n为什么要可变参数？\n\n变长参数适应了不定参数个数的情况，避免了手动构造数组，提高语言的简洁性和代码的灵活性\n\n当可变参数与方法重载出现时，就有些令人混乱，但整体方法参数匹配流程是这样的：\n\n阶段1: 不自动装箱拆箱,不匹配变长参数\n阶段2: 自动装箱拆箱,不匹配可变参数\n阶段3: 允许匹配变长参数\n\n\n## 静态导入\n\n```java\nimport static org.junit.Assert.*;\n```\n\n- 导入一个类的静态方法与静态变量\n\n## 自动装拆箱\n\n```java\nInteger a = 1;\n```\n\n- 该功能由编译器提供\n- 基础类型与封装类型运算时，会触发拆装箱\n\n## 多异常并列\n\n```java\ntry{\n    //...\n}catch(Exception1 | Exception2 e){\n    //...\n}\n```\n\n- 不能有直接或间接的继承关系\n\n## 数值新特性\n\n```java\nint a = 0b11100111; // 可直接使用二进制\nint b = 9999_99999; // 可使用下划线分割\n```\n\n# 接口方法\n\n```java\ndefault boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)\n\t\t\tthrows Exception {\n    return true;\n}\n```\n\n- 以default关键字标注，其他的定义和普通函数一样\n- 规则1：默认方法不能重写Object中的方法\n- 规则2：实现类可以继承/重写父接口的默认方法\n- 规则3：接口可以继承/重写父接口的默认方法\n- 规则4：当父类和父接口都有（同名同参数）默认方法，子类继承父类的默认方法，这样可以兼容JDK7及以前的代码\n- 规则5：子类实现了2个接口（均有同名同参数的默认方法），那么编译失败，必须在子类中重写这个default方法\n\n## 接口静态方法\n\n```java\npublic interface Runnable {\n    static void run(){\n        System.out.println(\"!111\");\n    }\n}\n```\n\n- 只能通过接口名来调用\n\n## 接口私有方法\n\n```java\npublic interface Runnable {\n    static void run(){\n        say();\n    }\n    \n    private static void say(){\n        System.out.println(\"say\");\n    }\n        \n}\n```\n\n## try-with-resource\n\n```java\ntry(FileOutputStream fos = new FileOutputStream(\"\")){ //JDK7\n            \n} catch (IOException e) {\n    e.printStackTrace();\n}\n```\n\n```java\n        FileOutputStream fos = new FileOutputStream(\"\"); // JDK9\n        try(fos){\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n```\n\n- 资源类必须实现AutoCloseable接口\n\n## var\n\n```java\nvar a = 1;\n```\n\n- 由编译器进行类型推断\n\n```java\nvar obj = new Object(){\n    public void print(){\n        System.out.println(\"print\");\n    }\n};\n\nobj.print();\n```\n\nvar 的限制\n\n- 可以用在局部变量上，非类成员变量\n- 可以用在for/for-each循环中\n- 声明时必须初始化\n- 不能用在方法（形式）参数和返回类型\n- 大面积滥用会使代码整体阅读性变差\n- var只在编译时起作用，没有在字节码中引入新的内容，也没有专门的JVM指令处理var\n\n## switch表达式\n\n```java\nint ret = switch (a){\n    case 1-> 100;\n    case 2 -> 200;\n    default -> -1;\n};\n```\n\n## 文本块\n\n```java\nString template =\n                \"\"\"\n                welcome,\n                hello \"${name}\"\n                \"\"\";\nSystem.out.print(template);\n```\n\n## Records\n\n```java\nrecord Person(String firstname, String lastname) {\n    Person {\n        if (firstname == null || lastname == null) {\n            throw new IllegalArgumentException(\"firstname or lastname cannot be null\");\n        }\n    }\n}\n\nPerson person = new Person(\"c\", \"xk\");\nperson.firstname();\nperson.lastname();\n```\n\n## instanceof模式匹配\n\n```java\nObject obj = \"cxk\";\nif (obj instanceof String s) {\n    System.out.println(s);\n}\nif (obj instanceof String s && s.length() > 2) {\n    System.out.println(s);\n}\n```\n\n## 密封类\n\n密封类允许你控制类的继承体系结构\n\n```java\nabstract sealed class Animal permits Dog, Cat {}\n\nfinal class Dog extends Animal{}\nfinal class Cat extends Animal{}\n```\n","metadata":"","hasMoreCommit":false,"totalCommits":8,"commitList":[{"date":"2024-11-18T16:40:55+08:00","author":"MY","message":"📦Java 高级","hash":"2b21c6566aa4db8dff3d81003dea531cbe044061"},{"date":"2022-06-09T21:51:44+08:00","author":"MY","message":"📦整理 Java","hash":"34c01b44e7566fa54773149765e3dd8420235279"},{"date":"2021-09-15T09:29:04+08:00","author":"cjiping","message":"✏更新 Java 语法糖","hash":"8771b3c6c3c43ee16e93db72bfed531f8c5bfadc"},{"date":"2019-10-23T11:55:10+08:00","author":"MY","message":"新增var、switch语法糖","hash":"72ac1ec59bfbdb2c9fc6b7d5537b795fcc468fbb"},{"date":"2019-10-21T22:33:35+08:00","author":"MY","message":"新增JDK9异常语法糖","hash":"dacc3f2205d5211fa327a7af412c2f0aa3b9740b"},{"date":"2019-10-20T22:41:14+08:00","author":"MY","message":"语法糖","hash":"586172e389f2fd0a39f23e076fea1f594e0f6e82"},{"date":"2019-10-20T16:57:04+08:00","author":"MY","message":"新增语法糖-静态导入","hash":"1437d17241bf89d8cf2d6512706fb88b76b50216"},{"date":"2019-10-18T17:04:31+08:00","author":"MY","message":"调整目录结构&新增JAVA语法糖部分","hash":"54e736c9e7032fb0c9db416269178d981d6e4abc"}],"createTime":"2019-10-18T17:04:31+08:00"}