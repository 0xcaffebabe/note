{"name":"DOM","id":"编程语言-JavaScript-DOM","content":"# DOM\n\n> DOM是W3C组织制定的一套处理 html和xml文档的规范\n\nDOM API 大致会包含 4 个部分:\n\n- 节点：DOM 树形结构中的节点相关 API。\n- 事件：触发和监听事件相关 API。\n- Range：操作文字范围相关 API。\n- 遍历：遍历 DOM 需要的 API\n\n## DOM树\n\n![202001232031](/assets/202001232031.png)\n\n- 核心DOM\n\n  - Document：文档对象\n  - Element：元素对象\n  - Attribute：属性对象\n  - Text：文本对象\n  - Comment:注释对象\n  - Node：节点对象，其他5个的父对象\n\n- XML DOM\n\n- HTML DOM\n\n## 获取元素\n\n### 根据ID获取\n\n```javascript\n语法：document.getElementById(id)\n作用：根据ID获取元素对象\n参数：id值，区分大小写的字符串\n返回值：元素对象 或 null\n```\n\n### 根据标签名获取元素\n\n```javascript\n语法：document.getElementsByTagName('标签名') 或者 element.getElementsByTagName('标签名') \n作用：根据标签名获取元素对象\n参数：标签名\n返回值：元素对象集合（伪数组，数组元素是元素对象）\n```\n\n### 根据name属性获取\n\n```javascript\ndocument.getElementsByName('name');\n```\n\n### H5新增获取元素方式\n\n```javascript\ndocument.getElementsByClassName('className');\ndocument.querySelector('selector'); // 根据指定选择器返回第一个元素\ndocument.querySelectorAll('selector'); // 根据指定选择器返回全部\n```\n\n### 获取特殊元素\n\n```javascript\ndocument.body; // 返回body对象\ndocument.documentElement; // 返回html对象\n```\n\n## 操作元素\n\n### 获取/改变元素内容\n\n```javascript\nelement.innerText; // 不包括html标签与空格和换行\nelement.innerHTML; // 包括html标签与空格换行\n```\n\n### 表单元素的属性操作\n\n```\ntype/value/checked/selected/disabled\n```\n\n### 样式属性操作\n\n```javascript\nelement.style.backgroundColor; // 直接修改样式\nelement.className; // 修改类属性\n```\n\n### 自定义属性操作\n\n```javascript\nelement.getAttribute('name'); // 获取自定义属性\nelement.removeAttribute('name'); // 移除自定义属性\nelement.setAttribute('name','value'); // 设置自定义属性\n```\n\n### HTML5自定义属性\n\n```html\n<div getTime=\"20\" data-index=\"2\" data-list-name=\"andy\"></div>\n```\n\n获取方法\n\n```javascript\n// 可以使用获取自定义属性的方式获取\nconsole.log(div.getAttribute('data-index'));\nconsole.log(div.getAttribute('data-list-name'));\n// 也可以使用专用API\nconsole.log(div.dataset.index);\nconsole.log(div.dataset['index']);\n// 需要使用驼峰命名\nconsole.log(div.dataset.listName);\nconsole.log(div.dataset['listName']);\n```\n\n###  classList 属性\n\n```js\nelement.classList.add('current');\nelement.classList.remove('current');\nelement.classList.toggle('current');\n```\n\n## 节点操作\n\n网页中的所有内容都是节点（标签、属性、文本、注释等），在DOM 中，节点使用 node 来表示\n\nHTML DOM 树中的所有节点均可通过 JavaScript 进行访问，所有 HTML 元素（节点）均可被修改，也可以创建或删除\n\n节点至少拥有nodeType（节点类型）、nodeName（节点名称）和nodeValue（节点值）这三个基本属性\n\n- 元素节点 nodeType=1\n- 属性节点 nodeType=2\n- 文本节点 nodeType=3（包括文字 空格 换行）\n\n### 父节点\n\n```javascript\n// 获取该节点最近的父节点\nnode.parentNode;\n```\n\n### 子节点\n\n```javascript\n// 获取所有子节点，包含 元素节点 文本节点等等\nnode.childNodes;\n// 只返回元素节点\nnode.children;\n```\n\n```javascript\n// 返回子节点，包含 元素节点 文本节点等等\nnode.firstChild;\nnode.lastChild;\n// 返回元素子节点\nnode.firstElementChild;\nnode.lastElementChild;\n```\n\n### 兄弟节点\n\n```javascript\n// 下一个\nnode.nextSibling;\n// 前一个\nnode.previousSibling;\nnode.nextElementSibling;\nnode.previousElementSibling;\n```\n\n### 创建元素\n\n```javascript\ndocument.write(); // 创建元素  如果页面文档流加载完毕，再调用这句话会导致页面重绘\nnode.innerHTML(); // 直接写HTML来创建元素\ndocument.createElement('tagName');// 创建成功将返回一个节点\n```\n\n### 节点新增\n\n```javascript\nnode.appendChild()\nnode.insertBefore(child,指定元素)\ndocument.replaceChild()\n```\n\n### 节点删除\n\n```javascript\n// 从 node节点中删除一个子节点，返回删除的节点\nnode.removeChild(childNode)\n```\n\n### 节点复制\n\n```javascript\n// 参数true深拷贝，false浅拷贝\nnode.cloneNode();\n```\n\n## 元素偏移量 offset 系列\n\n![202001281519](/assets/202001281519.png)\n\noffset\n\n- offset 可以得到任意样式表中的样式值\n- offset 系列获得的数值是没有单位的\n- offsetWidth 包含padding+border+width\n- offsetWidth 等属性是只读属性，只能获取不能赋值\n\nstyle\n\n- style 只能得到行内样式表中的样式值\n- style.width 获得的是带有单位的字符串\n- style.width 获得不包含padding和border 的值\n- style.width 是可读写属性，可以获取也可以赋值\n\n## 元素可视区 client 系列\n\n![202001281819](/assets/202001281819.png)\n\n![202001281820](/assets/202001281820.png)\n\n## 三大系列总结\n\n1. offset系列 经常用于获得元素位置 offsetLeft offsetTop\n2. client经常用于获取元素大小 clientWidth clientHeight\n3. scroll 经常用于获取滚动距离 scrollTop scrollLeft\n4. 注意页面滚动的距离通过 window.pageXOffset 获得\n\n## CSSOM\n\n是 CSS 的对象模型，在 W3C 标准中，它包含两个部分：描述样式表和规则等 CSS 的模型部分（CSSOM），和跟元素视图相关的 View 部分（CSSOM View）\n\n```js\n// styleSheets 是只读的，但是可以修改里面的规则\ndocument.styleSheets[0].insertRule(\"p { color:pink; }\", 0)\ndocument.styleSheets[0].removeRule(0)\n// 获取样式表的所有css规则\ndocument.styleSheets[0].cssRules\n// 获取一个元素经过CSS计算得到的属性\nwindow.getComputedStyle(document.body);\n```\n\n### 窗口API\n\n- moveTo(x, y) 窗口移动到屏幕的特定坐标；\n- moveBy(x, y) 窗口移动特定距离；\n- resizeTo(x, y) 改变窗口大小到特定尺寸；\n- resizeBy(x, y) 改变窗口大小特定尺寸\n\n```js\nwindow.open(\"about:blank\", \"_blank\" ,\"width=100,height=100,left=100,right=100\" )\n```\n\n### 视口滚动API\n\n- scrollX 是视口的属性，表示 X 方向上的当前滚动距离，有别名 pageXOffset；\n- scrollY 是视口的属性，表示 Y 方向上的当前滚动距离，有别名 pageYOffset；\n- scroll(x, y) 使得页面滚动到特定的位置，有别名 scrollTo，支持传入配置型参数 {top, left}；\n- scrollBy(x, y) 使得页面滚动特定的距离，支持传入配置型参数 {top, left}\n\n通过这些API 读取视口的滚动位置和操纵视口滚动，是页面的顶层容器的滚动，大部分移动端浏览器都会采用一些性能优化，它和元素滚动不完全一样\n\n### 元素滚动API\n\n使用 scroll 系列的相关属性可以动态的得到该元素的大小、滚动距离等\n\nscroll系列属性           | 作用\n-------------------- | -----------------------------------------------\nelementscrollTop     | 返回被卷去的上侧距离，返回数值不带单位\nelement.scrollLeft   | 返回被卷去的左侧距离，返回数值不带单位\nelement.scrollWidth  | 返回自身实际的宽度，不含边框，返回数值不带单位\nelement.scrollHeight | 返回自身实际的高度，不含边框，返回数值不带单位\nscroll(x, y)         | 使得元素滚动到特定的位置，有别名 scrollTo，支持传入配置型参数 {top, left}\nscrollBy(x, y)       | 使得元素滚动到特定的位置，支持传入配置型参数 {top, left}\nscrollIntoView(arg)  | 滚动元素所在的父元素，使得元素滚动到可见区域，可以通过 arg 来指定滚到中间、开始或者就近\n\n![202001281907](/assets/202001281907.png)\n\n如果浏览器的高（或宽）度不足以显示整个页面时，会自动出现滚动条。当滚动条向下滚动时，页面上面被隐藏掉的高度，我们就称为页面被卷去的头部。滚动条在滚动时会触发 onscroll事件\n\n### 全局尺寸信息\n\n- window.innerHeight, window.innerWidth 这两个属性表示视口的大小。- window.outerWidth, window.outerHeight 这两个属性表示浏览器窗口占据的大小，很多浏览器没有实现，一般来说这两个属性无关紧要。\n- window.devicePixelRatio 这个属性非常重要，表示物理像素和 CSS 像素单位的倍率关系，Retina 屏这个值是 2，后来也出现了一些 3 倍的 Android 屏。\n- window.screen （屏幕尺寸相关的信息）\n  - window.screen.width, window.screen.height 设备的屏幕尺寸。- window.screen.availWidth, window.screen.availHeight 设备屏幕的可渲染区域尺寸，一些 Android 机器会把屏幕的一部分预留做固定按钮，所以有这两个属性，实际上一般浏览器不会实现的这么细致。\n  - window.screen.colorDepth, window.screen.pixelDepth 这两个属性是固定值 24，应该是为了以后预留\n\n### 元素布局信息\n\n- getClientRects()：回一个列表，里面包含元素对应的每一个盒所占据的客户端矩形区域，这里每一个矩形区域可以用 x, y, width, height 来获取它的位置和尺寸\n- getBoundingClientRect()：返回元素对应的所有盒的包裹的矩形区域\n\n```js\n// 获取元素相对于视口的相对坐标\nvar offsetX = document.documentElement.getBoundingClientRect().x - element.getBoundingClientRect().x;\n```\n","metadata":"","hasMoreCommit":false,"totalCommits":10,"commitList":[{"date":"2022-07-06T14:29:39+08:00","author":"cjiping","message":"✏️更新 DOM","hash":"656a078122a7019d72f81cbd33318b60d09c6e4f"},{"date":"2020-02-14T21:53:58+08:00","author":"MY","message":"完成笔记结构重构","hash":"fa76a092bde3bf674471ba101d7e1d1dd2c7108b"},{"date":"2020-01-30T11:51:16+08:00","author":"MY","message":"增加click延时解决方案","hash":"2b92ad502698f34a0b80c2048dfa109b7d6aa4ba"},{"date":"2020-01-28T19:15:13+08:00","author":"MY","message":"JS增加三大系列","hash":"1b7c698cbab986096f88d2aed313becbf4712310"},{"date":"2020-01-26T11:40:58+08:00","author":"MY","message":"DOM完成节点操作","hash":"1c984ca47529b13993bdd7ee3391f17bb8a4435b"},{"date":"2020-01-24T21:39:20+08:00","author":"MY","message":"JS DOM 增加节点操作","hash":"2f7b2bc28d1a961afb41ee87675e9a76ba7677bd"},{"date":"2020-01-24T16:32:35+08:00","author":"MY","message":"JS DOM更新完属性操作","hash":"289a8bfe964614a7e531b9fdd1686323a42f6307"},{"date":"2020-01-23T15:37:10+08:00","author":"MY","message":"增加DOM操作元素","hash":"32dcffe588865e68bfcba7b6b891ff45856b77b6"},{"date":"2020-01-23T13:57:59+08:00","author":"MY","message":"更新完DOM","hash":"cae58d61468f1fef9501d072c8b411602174a77b"},{"date":"2020-01-22T20:42:32+08:00","author":"MY","message":"新增DOM","hash":"dbfec1b90864826de515282eff33e639f50699d4"}],"createTime":"2020-01-22T20:42:32+08:00"}