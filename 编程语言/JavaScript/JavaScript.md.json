{"name":"JavaScript","id":"编程语言-JavaScript-JavaScript","content":"# JavaScript\n\n## 类型\n\n除了 Object 类型是引用类型，其他类型都是原始类型\n\n原始类型的数据值都是直接保存在“栈”中的，引用类型的值是存放在“堆”中的\n\n栈主要管运行，堆主要管存储\n\n### Undefined \n\n该类型表示未定义，它的类型只有一个值，就是 undefined，由于undefined是一个全局变量，并非是一个关键字, 所以部分编程规范要求用 void 0 代替 undefined\n\n```js\nundefined = 2\n```\n\n在ES5之前的时候，undefined是可以被赋值的。在现代浏览器当中已经把undefined设置为一个non-configurable, non-writable属性的值了\n\n### Null\n\n类型也只有一个值，就是 null，它的语义表示空值\n\n### Boolean\n### String\n\n用于表示文本数据。String 有最大长度是 2^53 - 1，字符串的操作 charAt、charCodeAt、length 等方法针对的都是 UTF16 编码\n\n### Number\n\n有 18437736874454810627(即 2^64-2^53+3) 个值\n\n几个例外情况：\n\n1. NaN，占用了 9007199254740990，这原本是符合 IEEE 规则的数字\n2. Infinity，无穷大；\n3. -Infinity，负无穷大\n\n有效的整数范围是 -0x1fffffffffffff 至 0x1fffffffffffff，所以 Number 无法精确表示此范围外的整数\n\n对于浮点数的比较要注意浮点数的特点：\n\n```js\n// 误差是否在精度值之内\nMath.abs(0.1 + 0.2 - 0.3) <= Number.EPSILON\n```\n\n### Symbol\n\n是一切非字符串的对象 key 的集合\n\n```js\no[Symbol.iterator] = function() {\n  var v = 0 \n  return { \n    next: function() {\n       return { value: v++, done: v > 10 } \n    } \n  } \n};\n```\n\n### Object\n\n## 变量\n\n```javascript\nvar a = 5;\n```\n\n- typeof\n\n### 类型转换\n\nJavaScript 中的“ == ”运算，因为试图实现跨类型的比较，它的规则复杂到几乎没人可以记住，某些规范强制要求使用 ===\n\n类型不同的变量比较时==运算只有三条规则：\n\n- undefined 与 null 相等；\n- 字符串和 bool 都转为数字再比较；\n- 对象转换成 primitive 类型再比较。\n\n#### 字符串转数值\n\nparseInt默认只支持 16 进制前缀“0x”，而且会忽略非数字字符，也不支持科学计数法当传入第二个参数，可以解析：\n\n```js\nparseInt(\"1e3\", 30)\n```\n\n而 parseFloat 则直接把原字符串作为十进制来解析，它不会引入任何的其他进制\n\n#### 装拆箱\n\n```js\n// 使用内置的 Object 函数，我们可以在 JavaScript 代码中显式调用装箱能力\nObject(1)\n```\n\n拆箱转换会尝试调用 valueOf 和 toString 来获得拆箱后的基本类型。如果 valueOf 和 toString 都不存在，或者没有返回基本类型，则会产生类型错误 TypeError\n\n### 运算符\n\n- 一元运算符\n\n  ```javascript\n  ++ -- + -\n  ```\n\n- 算术运算符\n\n  ```javascript\n  + - * / % ...\n  ```\n\n- 赋值运算符\n\n  ```javascript\n  = += -+....\n  ```\n\n- 比较运算符\n\n  ```javascript\n  > < >= <= == ===\n  ```\n\n- 逻辑运算符\n\n  ```javascript\n  && || !\n  ```\n\n  - 其他对象转boolean\n\n    - number：0或NaN为假，其他为真\n    - string：除了空字符串(\"\")，其他都是true\n    - null&undefined:都是false\n    - 对象：所有对象都为true\n\n- 三元运算符\n\n## JS特殊语法\n\n### 分号自动插入\n\nJS的语句若没有分号，会按照以下规则插入分号：\n\n1. 要有换行符，且下一个符号是不符合语法的，那么就尝试插入分号。\n2. 有换行符，且语法中规定此处不能有换行符，那么就自动插入分号。\n3. 源代码结束处，不能形成完整的脚本或者模块结构，那么就自动插入分号\n\n#### no LineTerminator here 规则\n\n- 带标签的continue语句,不能在continue后插入换行\n- 带标签的break语句,不能在break后插入换行\n- return后不能插入换行\n- 后自增、后自减运算符前不能插入换行\n- throw和Exception之间不能插入换行\n- 凡是async关键字,后面都不能插入换行\n- 箭头函数的箭头前,也不能插入换行\n- yield之后,不能插入换行\n\n#### 一些不加分号容易出错的情况\n\n1. 以括号开头\n\n```js\n(function(a){\n   console.log(a);\n})()/*这里没有被自动插入分号*/\n(function(a){\n  console.log(a);\n})()\n```\n\n2. 以数组开头\n\n```js\nvar a = [[]]/*这里没有被自动插入分号*/\n[3, 2, 1, 0].forEach(e => console.log(e))\n```\n\n3. 以正则表达式开头\n\n```js\nvar x = 1, g = {test:()=>0}, b = 1/*这里没有被自动插入分号*/\n/(a)/g.test(\"abc\")\nconsole.log(RegExp.$1)\n```\n\n4. 以Template开头\n\n```js\nvar f = function(){\n  return \"\";\n}\nvar g = f/*这里没有被自动插入分号*/\n`Template`.match(/(a)/);\nconsole.log(RegExp.$1)\n```\n\n### 指令序言\n\n```js\n\"no lint\";\n\"use strict\";\nfunction doSth(){\n    //......\n}\n//......\n```\n\n## 流程控制语句\n\n- if..else...\n- switch\n- while\n- do...while\n- for\n\n## 基本对象\n\n### Function\n\n```javascript\nfunction f(x){\n    ...\n}\n\nvar f = function(){\n    ...\n}\n```\n\n### Array\n\n- 创建\n\n```javascript\nnew Array(元素列表);\nnew Array(长度);\n[1,2,3,4];\n```\n\n- 特点\n\n  - 元素类型可变\n  - 长度可变\n\n- 方法\n\n  - join：拼接成字符串\n  - push\n\n### Date\n\n- [常用方法](https://www.w3school.com.cn/jsref/jsref_obj_date.asp)\n\n### Math\n\n- [常用方法](https://www.w3school.com.cn/jsref/jsref_obj_math.asp)\n\n### Gloal\n\n- encodeURI\n- decodeURI\n- encodeURIComponent:编码范围更广\n\n- parseInt\n\n- isNaN\n\n- eval\n\n## 立即执行函数\n\n```javascript\n(\n    function(){\n        //...\n    }\n)()\n```\n\n### window\n\n### 方法\n\n与弹出框有关的方法：\n\n- alert() 显示带有一段消息和一个确认按钮的警告框。\n- confirm() 显示带有一段消息以及确认按钮和取消按钮的对话框。\n\n  - 如果用户点击确定按钮，则方法返回true\n  - 如果用户点击取消按钮，则方法返回false\n\n- prompt() 显示可提示用户输入的对话框。\n\n  - 返回值：获取用户输入的值\n\n与打开关闭有关的方法：\n\n- close() 关闭浏览器窗口。\n\n  - 谁调用我 ，我关谁\n\n- open() 打开一个新的浏览器窗口\n\n  - 返回新的Window对象\n\n## 动画函数封装\n\n> 核心原理：通过定时器 setInterval() 不断移动盒子位置。\n\n- 利用 JS 是一门动态语言，可以很方便的给当前对象添加属性来将定时器添加到对象中\n\n### 缓动效果\n\n- 核心算法： (目标值 - 现在的位置) / 10 做为每次移动的距离步长\n\n### 动函数添加回调函数\n\n回调函数原理：函数可以作为一个参数。将这个函数作为参数传到另一个函数里面，当那个函数执行完之后，再执行传进去的这个函数，这个过程就叫做回调\n\n### 完整代码\n\n```javascript\nfunction animate(obj,target,callback){\n    clearInterval(obj.timer);\n    obj.timer = setInterval(() => {\n        var step = Math.ceil((target - obj.offsetLeft)/10);\n        if (obj.offsetLeft >= target){\n            clearInterval(obj.timer);\n            callback();\n        }\n        obj.style.left = obj.offsetLeft + step + 'px';\n    }, 15);\n}\n```\n\n## JSON\n\n### 语法\n\n- 数据在名称/值对中：json数据是由键值对构成的\n- 数据由逗号分隔：多个键值对由逗号分隔\n- 花括号保存对象：使用{}定义json 格式\n- 方括号保存数组：[]\n\n### 获取数据\n\n- json对象.键名\n- json对象[\"键名\"]\n- 数组对象[索引]\n\n### 转换\n\n```javascript\nJSON.stringify({username:'name'}) // to text\nJSON.parse(str) // to obj\n```\n\n### 后端解析\n\n- 常见的解析器：Jsonlib，Gson，fastjson，jackson\n\n## 移动端常用插件\n\n- Swiper 插件：轮播图插件\n- lsuperslide：常用特效插件\n- l iscroll：平滑滚动\n- zy.media.js：移动端视频插件\n\n## 移动端常用框架\n\n- bootstrap\n\n## 本地存储\n\n### 特性\n\n1、数据存储在用户浏览器中\n\n2、设置、读取方便、甚至页面刷新不丢失数据\n\n3、容量较大，sessionStorage约5M、localStorage约20M\n\n4、只能存储字符串，可以将对象JSON.stringify() 编码后\n\n### sessionStorage\n\n1、生命周期为关闭浏览器窗口\n\n2、在同一个窗口(页面)下数据可以共享\n\n3、以键值对的形式存储使用\n\n```js\n// 存储\nsessionStorage.setItem(key, value);\n// 获取\nsessionStorage.getItem(key);\n// 删除\nsessionStorage.removeItem(key);\n// 清除所有\nsessionStorage.clear();\n```\n\n### localStorage\n\n- 生命周期永久，除非手动删除\n- 多窗口共享\n\n使用方式同sessionStorage\n","metadata":"","hasMoreCommit":true,"totalCommits":23,"commitList":[{"date":"2022-10-13T16:56:30+08:00","author":"cjiping","message":"✏️js","hash":"7e8f206a15db74dc7af4ecd23cb0332fa735c27f"},{"date":"2022-06-28T17:22:50+08:00","author":"cjiping","message":"✏️更新 JavaScript","hash":"6f2940a03d5f95f085da15e5c37b0a07d502959b"},{"date":"2022-06-24T16:49:12+08:00","author":"cjiping","message":"✏️更新 JavaScript","hash":"b6acfb9f3d904dd46d667f03e983083d9668ba62"},{"date":"2022-06-23T15:22:07+08:00","author":"cjiping","message":"✏️更新 JavaScript","hash":"b20858909ce1750ade8d4e269b0ac11e819650ef"},{"date":"2020-02-29T12:22:36+08:00","author":"MY","message":"JS增加正则表达式","hash":"92171dbdea1b4c5a9da80a22abf11a885336abcf"},{"date":"2020-02-14T21:53:58+08:00","author":"MY","message":"完成笔记结构重构","hash":"fa76a092bde3bf674471ba101d7e1d1dd2c7108b"},{"date":"2020-01-30T14:36:11+08:00","author":"MY","message":"JS增加本地存储","hash":"836ed47ac31f2c9695edd3f85cc8f9cffb775d12"},{"date":"2020-01-30T14:20:31+08:00","author":"MY","message":"增加JS常用插件及框架","hash":"fafb627cd0f4d1f9d2cd7dc9d764a347bb17a59d"},{"date":"2020-01-29T11:47:30+08:00","author":"MY","message":"更新js动画函数封装","hash":"0d1fd55ad54f4e02de25c1d10b7025e24e543986"},{"date":"2020-01-28T19:47:31+08:00","author":"MY","message":"JS增加动画函数封装","hash":"78a1dd9a23d603a560197e975bdb871e1f012fae"}],"createTime":"2019-08-07T11:59:00+08:00"}