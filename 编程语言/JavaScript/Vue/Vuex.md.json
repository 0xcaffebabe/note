{"name":"Vuex","id":"编程语言-JavaScript-Vue-Vuex","content":"# Vuex\n\nVuex是实现组件全局状态（数据）管理的一种机制，可以方便的实现组件之间的数据共享\n\n![202002071127](/assets/202002071127.png)\n\n## 使用vuex来管理全局状态\n\n### 访问共享数据\n\n```js\nthis.$store.state.count\n```\n\n```js\nimport { mapState } from 'vuex'\nexport default {\n  data () { return {} },\n  computed: {\n    ...mapState(['count'])\n  }\n}\n```\n\n### 更新共享数据\n\n- 向store触发一个事件\n\n```js\nimport store from '@/store';\n\nexport default {\n  name: 'info',\n  store,\n  methods: {\n    add() {\n      console.log('add');\n      store.commit('add');\n    },\n  },\n};\n```\n\n- vuex更新状态\n\n```js\n//...\nexport default new Vuex.Store({\n  state: {\n    count: 0\n  },\n  mutations: {\n    add() {\n      this.state.count++;\n    },\n  }\n  // ...\n});\n```\n\n- 传递参数\n\n```js\nthis.$store.commit('add', 1)\n```\n\n```js\nmutations: {\n    add (state, step) {\n      state.count += step\n    }\n}\n```\n\n```js\nimport { mapMutations } from 'vuex'\n\nexport default {\n  ...\n  methods: {\n    ...mapMutations(['sub']),\n    handleClick () {\n      this.sub()\n    }\n  }\n}\n```\n\n- 使用action异步更新数据\n\n```js\nactions: {\n  addAsync (context) {\n    setTimeout(() => {\n      // action不能直接修改共享数据\n      context.commit('add', 1)\n    }, 1000)\n  }\n}\n// 触发action\n this.$store.dispatch('addAsync')\n// action同Mutation一样，也可以通过map引入vue实例\n```\n\n- about组件通过vuex来获取状态\n\n```js\nimport store from '@/store';\n  \nexport default {\n  name: 'about',\n  store,\n  data() {\n    return { count: store.state.count };\n  },\n};\n```\n\n### getter\n\n```js\ngetters: {\n    showNum (state) {\n      return 'current val:' + state.count\n    }\n}\n```\n\n```html\n<h2>{{$store.getters.showNum}}</h2>\n```","metadata":"","hasMoreCommit":false,"totalCommits":1,"commitList":[{"date":"2020-03-31T17:02:52+08:00","author":"MY","message":"更新 vuex","hash":"511e4b48a6718e13da1a6ee6dce504afbc5c0ede"}],"createTime":"2020-03-31T17:02:52+08:00"}