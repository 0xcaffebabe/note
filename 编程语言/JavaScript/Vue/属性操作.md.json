{"name":"属性操作","id":"编程语言-JavaScript-Vue-属性操作","content":"# 属性\n\n## 计算属性\n\n```js\nnew Vue({\n   el:\"#app\",\n   data:{\n       msg:\"123\",\n       birthday:158536\n   }\n   ,\n    computed:{\n       birth(){\n           return new Date(this.birthday);\n       }\n    }\n});\n```\n\n- 与方法的区别\n\n>不同的是计算属性是基于它们的响应式依赖进行缓存的。只在相关响应式依赖发生改变时它们才会重新求值\n\n**getter与setter**\n\n```js\n// ...\ncomputed: {\n  fullName: {\n    // getter\n    get: function () {\n      return this.firstName + ' ' + this.lastName\n    },\n    // setter\n    set: function (newValue) {\n      var names = newValue.split(' ')\n      this.firstName = names[0]\n      this.lastName = names[names.length - 1]\n    }\n  }\n}\n// ...\n```\n\n## 侦听属性\n\n```js\nvar vm = new Vue({\n  el: '#demo',\n  data: {\n    firstName: 'Foo',\n    lastName: 'Bar',\n    fullName: 'Foo Bar'\n  },\n  watch: {\n    // 当firstName属性发生改变，该方法会被调用\n    firstName: function (val) {\n      this.fullName = val + ' ' + this.lastName\n    },\n    lastName: function (val) {\n      this.fullName = this.firstName + ' ' + val\n    }\n  }\n})\n```\n\n## 过滤器\n\n- 定义过滤器\n\n```js\n// 全局过滤器\nVue.filter('upper',function(v){\n      return v.toUpperCase();\n});\n```\n\n- 使用\n\n```html\n<div id=\"app\" :abc=\"msg | upper\">\n      {{msg | upper}}\n</div>\n```\n\n- 传递参数\n\n```html\n<div>\n    {{msg | f('a')}}\n</div>\n```\n\n```js\nVue.filter('f',function(v,a){\n    return v + a;\n});\n```","metadata":"","hasMoreCommit":false,"totalCommits":3,"commitList":[{"date":"2020-03-19T11:13:55+08:00","author":"MY","message":"增加 vue过滤器","hash":"2be5e5464bf7c300e1e7fd4042d7cc584dc69812"},{"date":"2020-02-14T21:53:58+08:00","author":"MY","message":"完成笔记结构重构","hash":"fa76a092bde3bf674471ba101d7e1d1dd2c7108b"},{"date":"2020-02-05T21:02:52+08:00","author":"MY","message":"重构vue","hash":"a5c325817abd7044d8ca02694aa967ee06969c7d"}],"createTime":"2020-02-05T21:02:52+08:00"}