{"name":"组件","id":"编程语言-JavaScript-Vue-组件","content":"# 组件\n\n![202002060849](/assets/202002060849.png)\n\n## 组件化\n\n利用组件化开发，拆分功能，封装组件，单独维护\n\n## 组件注册\n\n```js\n// 定义一个名为 button-counter 的全局组件\nVue.component('button-counter', {\n    data: function () {\n        // data必须是一个函数，如果data是一个对象的话，那么所有button-counter都会共享同一份数据\n        return { count: 0 }\n    },\n    template: '<button v-on:click=\"count++\">You clicked me {{ count }} times.</button>'\n});\nnew Vue({ el: '#app' });\n```\n```html\n<!-- 使用自定义组件,必须使用短横线的方式使用组件 -->\n<button-counter></button-counter>\n```\n\n- 局部注册\n\n```js\nnew Vue({\n     el: '#app' ,\n     components:{\n         'compomenta':{\n             template:`\n                <div>componenta</div>\n             `\n         }\n     }\n});\n```\n\n## 组件通信\n\n- 父子组件通信\n\n```js\nconst introduce = {\n    template:'<h1 @click=\"fun()\">{{msg}}</h1>',\n    methods: {\n        fun() {\n            // 触发上一层事件,第一个参数是事件名称,第二个参数是传递给父组件的参数\n           this.$emit('delete',\"delete it\");\n        }\n    },\n    props:['msg'] // 子组件需要声明要接收的参数\n}\nnew Vue({\n    el: '#app',\n    data:{ msg:'大家好，我是渣渣辉' },\n    methods: {\n        handleDelete(args) { console.log(args); }\n    },\n    components:{ introduce }\n});\n```\n```html\n<div id=\"app\">\n    <!-- 父组件向子组件传递msg -->\n    <!-- 父组件监听子组件的delete事件 -->\n    <introduce :msg=\"msg\" @delete=\"handleDelete\"></introduce>\n</div>\n```\n\n- 兄弟组件通信\n\n使用一个事件中心，这个事件中心可以监听事件、触发事件\n\n```js\nvar hub = new Vue();\n// 注册事件\nhub.$on('event', (val) => {\n    this.num += val;\n});\n// 触发事件\nhub.$emit('event', 2);\n// 销毁事件\nhub.$off('event');\n```\n\n### 组件参数校验\n\n```js\n//...\nprops: {\n    // 要求传递过来的msg必须是String类型\n    msg: String,\n    id: [Number,String], // 可以是数字或者字符串类型\n    content: {\n        type: String,\n        required: false, // 非必传\n        defaultValue: 'cxk', // required必须为false这个值才会生效\n        validator: function(val) {\n            // 自定义校验器\n            retrun val.length === 3;\n        }\n    }\n}\n```\n\n### 非props特性\n\n- 父组件向子组件传递参数，但是子组件没在props声明接收，所以子组件就无法使用\n- 非props特性的属性声明会在dom中显示\n\n## 插槽\n\n```html\n<child>\n    <!-- 给插槽起名 -->\n    <div slot='header'>header</div>\n    <div slot='footer'>footer</div>\n    <!-- 下面这个没有名字，所以会匹配到第一个slot（没有名字） -->\n    <div>no name</div>\n</child>\n```\n\n```js\n'child':{\n    template: `\n    <div>\n      <slot></slot>\n      <slot name=\"header\">default value</slot> \n      <slot name=\"footer\"></slot>\n    </div>\n    `\n}\n```\n\n## 动态组件\n\n```html\n<component v-bind:is=\"currentTabComponent\"></component>\n```\n\n- 添加v-once来提高性能\n\n## 组件事件\n\n当定义子组件时，默认的原生事件监听`@xxx`不会生效，可以加上`.native`修饰符\n\n## 组件使用中的细节\n\n- 使用`is='componentName'来解决html结构问题`\n- 子组件的data应该是一个函数，如果是对象的话，则所有的子组件的data都是共享的\n- 可以通过ref来获取到子组件的引用\n\n## 组件化带来的问题\n\n- 组件状态管理(vuex)\n- 多组件混合使用(vue-router)\n- 组件间的合作(props,emit/on,bus)\n\n## vue-router\n\n- 引入vue组件\n\n```js\nimport Info from '../views/Info.vue';\n```\n\n- 在router中添加\n\n```js\nconst routes = [\n  //...\n  {\n    path: '/info',\n    name: 'info',\n    component: Info,\n  },\n];\n```\n\n## 单文件组件\n\n```vue\n<template>\n\n    <!-- 组件代码区域 -->\n\n</template>\n\n<script>\n\n// js代码区域\nexport default {\n  ...\n}\n</script>\n\n<style scoped>\n\n    /* 样式代码区域 */\n\n</style>\n```\n\n- 安装\n\n```sh\nnpm install vue-loader vue-template-compiler vue -D\n```\n\n- 配置\n\n```js\nconst VueLoaderPlugin = require(\"vue-loader/lib/plugin\");\nconst vuePlugin = new VueLoaderPlugin();\nmodule.exports = {\n    ....\n    plugins:[\n        ...\n        new vueLoader()\n    ],\n    module : {\n        rules:[\n            ...\n            { \n                test:/\\.vue$/,\n                loader:\"vue-loader\"\n            }\n        ]\n    }\n}\n```\n\n- 使用\n\n```js\nimport Vue from 'vue';\nimport App from './App.vue';\n\nconst vm = new Vue({\n    el:'#app',\n    render:h=>h(App)\n})\n```","metadata":"","hasMoreCommit":false,"totalCommits":8,"commitList":[{"date":"2020-03-31T17:02:52+08:00","author":"MY","message":"更新 vuex","hash":"511e4b48a6718e13da1a6ee6dce504afbc5c0ede"},{"date":"2020-03-22T15:35:41+08:00","author":"MY","message":"增加 vue单文件组件","hash":"f6b7a8622484fa579753d68c62ef786e57954ecf"},{"date":"2020-03-20T10:28:23+08:00","author":"MY","message":"更新 vue组件化","hash":"525341e3316b01a21c081206d27a0e740c7e994b"},{"date":"2020-02-14T21:53:58+08:00","author":"MY","message":"完成笔记结构重构","hash":"fa76a092bde3bf674471ba101d7e1d1dd2c7108b"},{"date":"2020-02-07T11:31:19+08:00","author":"MY","message":"增加vuex图","hash":"f738395a1a9dc74c40ca10a4bc54fb3ed12d5640"},{"date":"2020-02-06T09:43:58+08:00","author":"MY","message":"vue增加插槽与动态组件","hash":"c62d7583c0202c99c46df9d5a38b2daf71c3a5bd"},{"date":"2020-02-06T08:44:16+08:00","author":"MY","message":"vue增加组件参数校验","hash":"21d8e523f81cd3c6cd53de0aac2afee55f8b6346"},{"date":"2020-02-05T21:02:52+08:00","author":"MY","message":"重构vue","hash":"a5c325817abd7044d8ca02694aa967ee06969c7d"}],"createTime":"2020-02-05T21:02:52+08:00"}