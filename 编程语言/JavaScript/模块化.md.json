{"name":"模块化","id":"编程语言-JavaScript-模块化","content":"# 模块化\n\n## 规范\n\n- 浏览器模块化\n  - AMD\n  - CMD\n- 服务端模块化\n  - NODEjs\n- ES6模块化\n\n## ES6模块化\n\n- 安装babel\n\n```sh\nnpm install --save-dev @babel/core @babel/cli @babel/preset-env @babel/node\nnpm install --save @babel/polyfill\n```\n\n- 导出\n\n```js\n// export default 只能用一次\nexport { firstName, lastName, year };\n// 注意，导出的的变量为引用，实际上仍然可以受到原来模块的控制\n// 如果使用export default 导出的就是值而非引用\nexport function multiply(x, y) {\n  return x * y;\n};\n```\n\n- 导入\n\n```js\nimport { stat, exists, readFile } from 'fs';\n// 一些混用\nimport m1, {a as x,c} from './m1.js';\n// 直接指向导入模块的代码\nimport './m2.js'\nexport a from \"a.js\"\n```\n\n语法要求不带 as 的默认值永远在最前\n\n## 脚本与模块\n\n- 脚本：是可以由浏览器或者 node 环境引入执行的\n- 模块：只能由 JavaScript 代码用 import 引入执行\n\n现代浏览器可以支持用 script 标签引入模块或者脚本，如果要引入模块，必须给 script 标签添加 type=“module”\n\n","metadata":"","hasMoreCommit":false,"totalCommits":2,"commitList":[{"date":"2022-06-24T16:49:12+08:00","author":"cjiping","message":"✏️更新 JavaScript","hash":"b6acfb9f3d904dd46d667f03e983083d9668ba62"},{"date":"2020-03-22T11:39:28+08:00","author":"MY","message":"增加 js模块化","hash":"41df1c1bf2a10bb3f8beb53b840e4ee529f75584"}],"createTime":"2020-03-22T11:39:28+08:00"}