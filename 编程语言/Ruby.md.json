{"name":"Ruby","id":"编程语言-Ruby","content":"# Ruby\n\n## 起步\n\n使用irb进入交互式命令行\n\n```ruby\nputs 'hello world'\nname = 'world'\nputs \"hello #{name}\"\n```\n\n## 编程模型\n\nRuby 是一门纯面向对象语言\n\n```ruby\nputs 4.class # Integer\nputs 4.methods\n```\n\n## 判断\n\n```rb\nx = 6\nif x > 5 # singleif\n  puts 'great than 5'\nend\nunless x < 5 # logic not\n  puts 'great than 5'\nelse\n  puts 'less than 5'\nend\nputs 'hello' if x == 6 # single line if\nputs x = x + 1 while x < 10 # single line while\n```\n\n除了nil和false之外 其他值都代表true\n\n```rb\nputs 'hello' && true # true\n```\n\nruby的逻辑运算可以为and or 或者 && ||\n\n```ruby\nputs true && false # false\nputs true and false # true\n```\n\n## 类型\n\nRuby是强类型语言 会对某些操作进行类型检查 Ruby是在运行时才检查\n\n```rb\nputs 4 + 'hello'\n```\n\n## 函数\n\n```rb\ndef say_sth\n  puts 'bark'\nend\nsay_sth\n```\n\n## 数组\n\n```rb\nlist = [1,2,3,4]\nputs list[0]\nputs list[-1] # desc order first\nputs list[0..-1] # 0-end\nlist.push(5)\nputs list.pop\nlist[10] = [1,2,3]\n```\n\n## 散列表\n\n```rb\nmap = {1 => 'cxk', 2 => 'k'}\nputs map[1]\n\nmap = {:string => 'string', :array => 'array'} # symbol 表示一种特殊对象\nputs map[:string]\nputs map[:array]\n```\n\n## 代码块与yield\n\n代码块就是一个匿名函数\n\n```rb\n3.times {puts 'hello world'} # 传给times一个代码块\n3.times {|i| puts i} # 传给代码块一个参数i\n```\n\n使用yield实现：\n\n```rb\ndef f\n  i = 0\n  while i < 10\n    i = i + 1\n    yield\n  end\nend\n\nf {puts 'ddd'}\n\ndef condition_yeild\n  i = 0\n  while i < 10\n    i = i + 1\n    yield if i > 5 # 条件执行\n  end\nend\n\ncondition_yeild {puts 'ddd'}\n```\n\n## 类\n\n```rb\nclass Animal\n  attr_accessor :name\n  def initialize(name)\n    @name = name\n  end\nend\n\ndog = Animal.new('dog')\nputs dog.name\n```\n\nmethod_mission方法 当调用的方法找不到 该方法会被调用\n\n```rb\nclass Man\n  def self.method_missing name, *args\n    puts \"oh, no such method:${name}\"\n  end\nend\n\nputs Man.go\n\n```\n\n### Mixin\n\n通过混入模块的方式隐式实现一些功能\n\n```rb\nmodule Human\n  def go\n    puts 'gogogo'\n  end\nend\n\nclass Person\n  include Human\nend\np = Person.new\np.go\n```\n\n## 集合的可枚举 可比较\n\n```rb\nlist = [1,2,3,4,5]\nputs list.sort\nputs list.any? {|i| i> 6}\nputs list.all? {|i| i> 6}\nputs list.collect {|i| i * 2} # 对每一元素进行此操作\nputs list.select {|i| i > 2} # 收集符合这个条件的元素\nputs list.member?(2) # 存在一个2\n\nputs list.inject {|sum,i| sum * i} # 求乘积\n```\n\n## 应用场景\n\n- 脚本\n- web开发\n\n## 不足\n\n- 性能\n- 并发与OOP\n- 类型安全\n","metadata":"","hasMoreCommit":false,"totalCommits":2,"commitList":[{"date":"2020-10-28T20:11:52+08:00","author":"MY","message":"✏更新 Ruby","hash":"4583433c2f51b76fb98c390702ec1b108926f85b"},{"date":"2020-10-27T19:54:59+08:00","author":"MY","message":"➕增加 Ruby","hash":"063783ef9856864cd9e2984b2e30601088798141"}],"createTime":"2020-10-27T19:54:59+08:00"}