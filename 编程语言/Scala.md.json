{"name":"Scala","id":"编程语言-Scala","content":"# Scala\n\n## 类型\n\n```scala\nobject Hello extends App {\n  println(\"hello world\")\n  println(1 + 1)\n  println(5 + 3*4)\n  println((5). + (3).*(4))\n  println(\"abc\".size)\n  println(\"abc\" + 4)\n}\n```\n\n- 强类型语言\n\n## 表达式与条件\n\n```scala\nobject ExpressionAndCondition extends App {\n  println(1 <= 2)\n  val a = 5 // 声明不变量\n  val b = 6\n  if (a < b) {\n    println(\"true\")\n  }else {\n    println(\"false\")\n  }\n}\n```\n\n- while 循环\n\n```scala\nvar i = 1\nwhile (i <= 3){\n  println(i)\n  i += 1\n}\n```\n\n- for 循环\n\n```scala\nfor(i <- args.indices){\n  println(args(i))\n}\nargs.foreach(str => println(str)) // 函数式\n```\n\n## 范围\n\n```scala\nval r1 = 1 to 10 by 2 // 步长为2\nval r2 = 1 to 10 // 步长为1\nval r3 = 1 until 10 by 2 // 步长为2 不包括10\n```\n\n## 元组\n\n```scala\nval name = (\"c\", \"xk\")\nprintln(name._1 + name._2)\nval (x, y) = (1, 2)\nprintln(x+y)\n```\n\n## 类\n\n```scala\nclass User(username: String, password: String) // pojo类\nclass UserService {\n  val user = new User(\"cxk\", \"123\")\n  def printUser(){\n    println(user)\n  }\n}\nnew UserService().printUser\n```\n\n### 构造器\n\n```scala\nclass User(username: String){\n  def this(username: String, password: String){\n    this(username)\n    println(password)\n  }\n}\n```\n\n## 扩展类\n\n- 单例\n\n```scala\nobject singleton { // 单例对象\n  def print = println(\"he\") // 类方法\n}\nsingleton.print\n```\n\n- 继承\n\n```scala\nclass Father(val name: String){\n  def say = println(\"i am f\")\n}\nclass Son(override val name: String, val age: Int) extends Father(name){\n  override def say: Unit = {\n    super.say\n    println(\"i am s\")\n  }\n}\nnew Son(\"cx\",1).say\n```\n\n- trait\n\n```scala\ntrait Part {\n  def say = println(\"i am say\")\n}\nclass Person extends Object with Part{}\nnew Person().say\n```\n\n## 函数定义\n\n```scala\ndef add(a: Int, b: Int): Int = a+b\nprintln(add(1,2))\n```\n\n## 集合\n\n- list\n\n```scala\nval list = List(1,2,3)\nprintln(list(2))\nprintln(list == List(1,2,3))\n```\n\n- set\n\n```scala\nval set = Set(1,2,3)\nprintln(set - 2) // 集合运算\nprintln(set + 5)\nprintln(set -- Set(1,2)) // 集合间运算\nprintln(set ++ Set(5,6))\nprintln(set == Set(1,2,3))\n```\n\n- map\n\n```scala\nval map = Map(\"name\" -> \"cxk\",\"age\" -> 18) // 不可变map\nprintln(map(\"name\"))\nval mMap = new mutable.HashMap[String, Any] // 可变map\nmMap += \"name\" -> \"cxk\"\nmMap += \"age\" -> 18\n```\n\n### 集合函数\n\n- 高阶函数：以函数作为输入或以函数作为输出\n\n```scala\nval list = List(1,2,3)\nprintln(list.isEmpty)\nprintln(list.length)\nprintln(list.size)\nprintln(list.head)\nprintln(list.tail) // 返回去除第一个元素的list\nprintln(list.last)\nprintln(list.init) // 返回去除最后一个元素的list\nprintln(list.reverse) // 都不会修改原列表\nprintln(list.drop(1))\nprintln(list.count(i => i >= 2)) // 计算符合条件的元素个数\nprintln(list.filter(i => i >=2)) // 将符合条件的元素拿出来\nprintln(list.map(i => i *2))\nprintln(list.exists(i => i > 2)) // 是否存在这一的一个元素\nprintln(list.sortWith((a,b) => a > b))\nprintln((0 /: list){(sum, i) => sum+i}) // 从初始值0开始累加\nprintln(list.foldLeft(0)((sum,i) => sum + i))\nlist.foreach(i => println(i))\n\nval map = Map(\"name\" -> \"cxk\", \"age\" -> 18)\nmap.foreach(entry => println(entry._1 + entry._2))\n```\n\n## Any 和 Nothing\n\nAny是所有类型的父类 Nothing是所有类型的子类 Null是一个Trait null是Null的实例\n\n![屏幕截图 2020-11-12 085642](/assets/屏幕截图%202020-11-12%20085642.png)\n\n## 模式匹配\n\n- switch\n\n```scala\ndef switch(i: String): String = i match {\n  case \"1\" => \"one\"\n  case \"2\" => \"two\"\n  case _ => \"none\"\n}\nprintln(switch(\"1\"))\nprintln(switch(\"ss\"))\n```\n\n- 正则表达式\n\n```scala\nval reg = \"\"\"\\w\"\"\".r // 创建一个正则\nprintln(reg.findFirstIn(\"i am your\"))\n```\n\n## 并发\n\n...\n\n## 核心优势\n\n- 并发\n- 继承了 Java 的生态\n- 语法灵活 有望自定义为DSL\n- 内置的XML支持\n\n## 不足\n\n- 静态类型不适合OOP\n- 虽然继承了 Java ，但某些语法还是很奇怪\n- 引入了可变性\n","metadata":"","hasMoreCommit":false,"totalCommits":3,"commitList":[{"date":"2020-11-13T09:01:27+08:00","author":"MY","message":"✏更新 Scala","hash":"c9e6e98abbde71952d780d4f5b5df1fe90d51721"},{"date":"2020-11-12T09:32:26+08:00","author":"MY","message":"✏更新 Scala","hash":"43ecc70d215945a781d856e6b896b8ff9be04234"},{"date":"2020-11-11T17:50:10+08:00","author":"MY","message":"➕增加 Scala","hash":"64b4afd3b8fbbad17638a9a18ea1ab450d0d46df"}],"createTime":"2020-11-11T17:50:10+08:00"}