{"name":"编程语言","id":"编程语言-编程语言","content":"# 编程语言\n\n- 语言的类型模型\n  - 强类型弱类型 静态类型静态类型\n- 语言的泛型\n  - 面向对象 函数式 过程式\n- 怎样与语言交互\n  - 编译还是解释\n- 判断结构与数据结构\n- 核心特性\n\n## 语言学习\n\n- 在比较中学习：编程语言的规则并不具有普遍意义，只是因为“在当前的特定情况下，做此规定能更方便\n- 在历史中学习：了解历史条件，以及历史变迁，能加深理解\n\n## 编程语言的历史\n\n从纸条打孔到高级语言\n\n各种各样编程语言出现的原因：懒惰 急躁 傲慢\n\n## 语法\n\n语法是语言设计者制定的规则，怎么方便就怎么来\n\n基于栈：\n\n```forth\n1 2 + 3 *\n```\n\n基于树：\n\n```lisp\n(+ 1 2)\n```\n\n设计不存在任何解析矛盾的语法体系是十分困难的。随后要再融入新的语法时不与既有的语法发生冲突，这个尤其困难\n\n## 流程控制\n\nelse语句的：goto 的危害\n\nwhile语句的：让反复执行的if更加简洁\n\nfor语句：让数值建增的while语句更简洁\n\nfor-wach语句：让for遍历更简洁\n\n## 函数\n\n作用：缩小关注点 代码复用\n\n返回：调用栈\n\n递归：递归完成的操作都可以转换为迭代操作\n\n## 错误处理\n\n程序所依赖的外部凡是可能出错的最后总会出错\n\n- 用特殊返回值表示错误\n  - 不需要编程语言的支持\n  - 这种方式并非强制 错误很容易被忽略\n  - 同时正常代码跟异常处理代码会混杂在一起\n- 统一跳转\n- 异常\n\n异常的使用：\n\n- 何时抛出异常\n- 异常的出口\n- 异常的传递\n\n## 名字与作用域\n\n为什么要名字？可读性\n\n为什么要作用域？管理名字\n\n作用域的演变：\n\n- 全局作用域\n\n```perl\n$i\n```\n\n- 动态作用域\n\n```perl\nlocal $i\n```\n\n- 静态作用域\n\n```perl\nmy $x\n```\n\n## 类型\n\n类型是数据的元数据\n\n```asm\ncvtsi2ssq %rax, %xmm1\n```\n\n类型的扩展：\n\n- 用户自定义（结构体）\n- 面向对象\n- 泛型或模板\n- 动态类型\n- 类型推断\n\n## 容器与字符串\n\n## 并发处理\n\n交替运行：\n\n- 协作式\n- 抢占式\n\n## 对象与类\n\n面向对象在不同语言下不一样\n\n模型的建立方法：\n\n- 模块/包\n- 函数\n- 闭包\n- 类\n\n### 闭包\n\n函数对象：\n- C中的函数指针\n- 其他语言中的高阶函数\n\n从函数对象中能够对外部变量进行访问（引用、更新），是闭包的构成要件之一\n\n从属于外部作用域中的局部变量，被函数对象给“封闭”在里面了\n\n## 继承与代码复用\n\n继承的实现策略：\n\n- 一般化与特殊化\n- 提取共同部分\n- 差异实现\n\n多重继承带来命名冲突的解决:\n\n- 禁止\n- 按某种顺序搜索\n\n## DSL\n\n> 利用为特定领域（Domain）所专门设计的词汇和语法，简化程序设计过程，提高生产效率的技术，同时也让非编程领域专家的人直接描述逻辑成为可能\n\n- 外部DSL：独立于开发语言存在\n- 内部DSL：依赖于一门宿主开发语言而存在, 这要求宿主语言必须足够简洁且灵活\n\n> 库设计就是语言设计（Library design is language design）\n\n```java\n// 用流畅接口在Java中实现DSL\nprivate void makeOrder(Customer\n  customer) {\n    customer.newOrder()\n      .with(6, \"TAL\")\n      .with(5, \"HPK\").skippable()\n      .with(3, \"LGV\")\n      .priorityRush();\n}\n```\n\n### DSL构成要素\n\n- 上下文\n- 语句\n- 单位\n- 词汇\n- 层次结构\n\n## 内存管理\n\n- 手动\n- 自动\n  - 根扫描\n  - 引用计数\n\nGC大一统理论：目前的GC收集方法只有根扫描和引用计数，两者相互对立，对一方有用的技术，对另一方跟定也有用。如根扫描的写屏障机制，以及引用计数的堆局部变量进行分代\n\n","metadata":"","hasMoreCommit":false,"totalCommits":7,"commitList":[{"date":"2020-12-21T15:49:10+08:00","author":"cjiping","message":"✏更新 编程语言","hash":"4928645d5b878b39916c4911a4d8322221ca58dc"},{"date":"2020-10-27T19:13:18+08:00","author":"MY","message":"✏更新编程语言","hash":"f55c0527ba584157c62ce1cd192b90c9edcf09ed"},{"date":"2020-10-25T19:25:30+08:00","author":"MY","message":"✏更新 编程语言","hash":"142be29f0938b23abe6809bdc4c54288510c6298"},{"date":"2020-10-21T19:39:19+08:00","author":"MY","message":"✏更新 编程语言","hash":"ac28c96aa8e1a270b72eb70412e93a0f66945638"},{"date":"2020-10-20T19:37:51+08:00","author":"MY","message":"✏更新 编程语言","hash":"53cbc233bf8497453f36be30f63a7164730bd3cf"},{"date":"2020-10-19T19:34:20+08:00","author":"MY","message":"✏更新 编程语言","hash":"3f0bc5124bfd805fe29728c7bb398a4c05aeea14"},{"date":"2020-10-18T19:51:48+08:00","author":"MY","message":"➕增加 编程语言","hash":"9ba7fb03a754f4f7a0d984c41ed04bbe7f194e82"}],"createTime":"2020-10-18T19:51:48+08:00"}