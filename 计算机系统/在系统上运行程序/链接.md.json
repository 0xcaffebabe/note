{"name":"链接","id":"计算机系统-在系统上运行程序-链接","content":"# 链接\n\n> 链接是将各种代码和数据片段收集并组合成为一个单一文件的过程，这个文件可被加载到内存并执行\n\n大致过程如下\n\n![20203219101](/assets/20203219101.jpg)\n\n![2022622212733](/assets/2022622212733.webp)\n\n- 预处理阶段：处理以 # 开头的预处理命令\n- 编译阶段：翻译成汇编文件\n- 汇编阶段：将汇编文件翻译成可重定位目标文件\n- 链接阶段：将可重定位目标文件和 printf.o 等单独预编译好的目标文件进行合并，得到最终的可执行目标文件\n\n## 一个链接的例子\n\n```c\n// main.c\nint sum(int *a, int n);\nint array[2] = {1,2};\nint main(){\n  int val = sum(array, 2);\n  return val;\n}\n\n// sum.c\nint sum(int *a, int n){\n  int i, s = 0;\n  for (i = 0; i < n; n++) {\n    s += a[i];\n    return s;\n  }\n}\n```\n\n```sh\ngcc -0g -o prog main.c sum.c\n```\n\n不管是读数据，调用函数还是读指令，对于 CPU 而言都是一个个的内存地址。因此，这里就需要一个连接 CPU 与程序员之间的桥梁，把程序中的符号转换成 CPU 执行时的内存地址。这个桥梁就是链接器，它负责将符号转换为地址\n\n链接器的第一个作用就是把多个中间文件合并成一个可执行文件，多个中间文件的代码段会被合并到可执行文件的代码段，它们数据段也会被合并为可执行文件的数据段。链接器在合并多个目标文件的时候并不是简单地将各个 section 合并就可以了，还需要考虑每个目标中的符号的地址，即重定位，就是当被调用者的地址变化了，要让调用者知道新的地址是什么\n\n## 两步链接\n\n1. 链接器需要对编译器生成的多个目标（.o）文件进行合并，一般采取的策略是相似段的合并，最终生成共享文件 (.so) 或者可执行文件。这个阶段中，链接器对输入的各个目标文件进行扫描，获取各个段的大小，并且同时会收集所有的符号定义以及引用信息，构建一个全局的符号表，根据符号表，也就能确定了每个符号的虚拟地址\n2. 对整个文件再进行第二遍扫描，这一阶段，会利用第一遍扫描得到的符号表信息，依次对文件中每个符号引用的地方进行地址替换。也就是对符号的解析以及重定位过程\n\n## 静态链接\n\n将程序的所有代码和库在编译时就结合成一个独立的可执行文件的过程\n\n- 符号解析：每个符号对应于一个函数、一个全局变量或一个静态变量，符号解析的目的是将每个符号引用与一个符号定义关联起来\n- 重定位：链接器通过把每个符号定义与一个内存位置关联起来，然后修改所有对这些符号的引用，使得它们指向这个内存位置\n\n![静态链接](/assets/20221020143916.png)\n\n## 目标文件\n\n- 可重定位目标文件（.o文件）：可与其它可重定位目标文件在链接阶段合并，创建一个可执行目标文件\n- 可执行目标文件（.out文件）：可以直接在内存中执行\n- 共享目标文件（.so文件）：一种特殊的可重定位目标文件，可以在运行时被动态加载进内存并链接\n\n## 可重定位目标文件\n\n![2022622212215](/assets/2022622212215.png)\n\nELF 文件格式把各种信息，分成一个一个的 Section 保存起来\n\n1. .text Section，也叫作代码段或者指令段（Code Section），用来保存程序的代码和指令\n2. .data Section，也叫作数据段（Data Section），用来保存程序里面设置好的初始化数据信息\n3. .rodata：只读数据，例如字符串常量、const 的变量\n4. .bss：未初始化全局变量，运行时会置 0\n5. .strtab：字符串表、字符串常量和变量名\n6. .rel.text Secion，叫作重定位表（Relocation Table）。重定位表里，保留的是当前的文件里面未知的一些函数跳转地址，比如printf函数\n7. .symtab Section，叫作符号表（Symbol Table）。符号表保留了我们所说的当前文件里面定义的函数名称和对应地址的地址簿\n\n## 符号和符号表\n\n- 全局符号\n- 外部符号\n- 局部符号\n\n```c\n/* ELF符号表条目 */\ntypedef struct {\n  int name; /* String table offset */\n  int value; /* Section offset,or VM address */\n  int size; /* Obiect size in bytes */\n  char type:4, /* Data,func,soction,or src file name (4 bits) */\n      binding:4; /* Local or global (4 bits) */\n  char reserved; /* Unused */\n  char section; /* Soction hoader index,ABS.UNDEF */\n} Elf_Symbol;\n\n```\n\n## 符号解析\n\n### 处理多重定义的全局符号\n\n- 不允许有多个同名的强符号\n- 如果强符号和弱符号同名，则选择强符号\n- 如果多个弱符号同名，则随意选择一个\n\n### 与静态库链接\n\n![](/assets/202339171837.png)\n\n### 链接器使用静态库解析引用\n\n## 重定位\n\n### 各种符号的处理方式\n\n- 局部变量：局部变量的内存分配与释放，都是在运行时通过 %rbp 的改变来进行的\n- 静态函数：静态函数的调用地址在编译阶段就可以确定\n- 外部变量、全局变量以及静态变量：初始生成时，编译器会将这些变了的地址填为0，以后链接器再将真正的地址回填\n\n### 占位符处理\n\n由编译器填 0 之后，链接器就会根据目标文件中的重定位表，链接器在处理目标文件的时候，需要对目标文件里代码段和数据段引用到的符号进行重定位，而这些重定位的信息都记录在对应的重定位表里\n\n每个重定位项都会包含需要重定位的偏移、重定位类型和重定位符号。重定位表的数据结构是这样的：\n\n```c\ntypedef struct {\n  Elf64_Addr›   r_offset; /* 重定位表项的偏移地址 */\n  Elf64_Xword›  r_info;   /* 重定位的类型以及重定位符号的索引 */\n  Elf64_Sxword› r_addend; /* 重定位过程中需要的辅助信息 */\n} Elf64_Rela;\n```\n\n对于类型为 R_X86_64_PC32 的符号，如全局变量、外部变量，重定位计算方式为：S + A – P\n\n- S 表示完成链接后该符号的实际地址。在链接器将多个中间文件的段合并以后，每个符号就按先后顺序依次都会分配到一个地址\n- A 表示 Addend 的值，代表了占位符的长度\n- P 表示要进行重定位位置的地址或偏移，可以通过 r_offset 的值获取到\n\n对于静态变量，由于只在本编译单元内可见，所以最终地址就是本编译单元的.data 段的最终地址\n\n## 可执行目标文件\n\n![20221020152013](/assets/20221020152013.png)\n\n## 加载可执行目标文件\n\n![](/assets/202339172137.png)\n\n## 动态链接\n\n指在程序运行时，动态地将外部的共享库（如 .dll、.so、.dylib 文件）与程序连接的过程\n\n动态链接常见共享库为 so 文件或 dll 文件\n\n在给定的文件系统中一个库只有一个文件，所有引用该库的可执行目标文件都共享这个文件，它不会被复制到引用它的可执行文件中\n\n在内存中，一个共享库的 .text 节（已编译程序的机器代码）的一个副本可以被不同的正在运行的进程共享\n\n![20203219214](/assets/20203219214.jpg)\n\n![2022622213753](/assets/2022622213753.webp)\n\n得益于[虚拟内存](/操作系统/内存管理.md#虚拟内存)的存在，使得不同进程即使内存地址不同，也能通过动态链接加载同一份代码与数据\n\n多了两个 section，一个是.plt，过程链接表（Procedure Linkage Table，PLT），一个是.got.plt，全局偏移量表（Global Offset Table，GOT）\n\n动态链接带来的代价：\n\n1. 每次对全局符号的访问都要转换为对 GOT 表的访问，进行间接寻址，会比直接寻址慢\n2. 动态链接将链接中重定位的过程推迟到程序加载时进行。因此在程序启动的时候，动态链接器需要对整个进程中依赖的动态库进行加载和链接\n\n### 从应用程序中加载和链接共享库\n\n_JNI_\n\n### 位置无关代码\n\n如果两个共享库之间有引用关系的话，引用者和被引用者之间的相对位置就不能确定了，这时就需要引入地址无关代码技术。对于内部函数或数据访问，因为其相对偏移是固定的，所以可以通过相对偏移寻址的方式来生成代码；对于外部和全局函数或数据访问，则通过 GOT 表的方式，利用间接跳转将对绝对地址的访问转换为对 GOT 表的相对偏移寻址\n\n![](/assets/202434143051.webp)\n\n> 可以加载而无需重定位的代码称为位置无关代码\n\n- PIC数据引用\n- PIC函数调用\n\n### 延迟绑定\n\n为了避免在加载时就把 GOT 表中的符号全部解析并重定位，就需要使用到延迟绑定，延迟绑定就是在 GOT 之前，插入了一个 plt\n\n`plt[x]->got[y](发现没有地址)->plt[0]->got[2](存了一个特殊的动态链接库ld-Linux.so，他会负责找到链接的函数)->将找到的地址存回got[y]`\n\nloader 通过动态修改 GOT 段，完成延迟绑定的功能\n\n### 库打桩机制\n\n- 编译时打桩\n- 链接时打桩\n- 运行时打桩\n","metadata":"","hasMoreCommit":true,"totalCommits":12,"commitList":[{"date":"2024-12-02T19:28:47+08:00","author":"MY","message":"📦计算机系统","hash":"120847197a4799fd4df9146d1579b956be153cae"},{"date":"2024-03-04T18:51:23+08:00","author":"MY","message":"✏链接","hash":"68ad351b7c35df0f7af3a65b94a6ec703c692c1e"},{"date":"2024-03-01T19:51:24+08:00","author":"MY","message":"✏链接","hash":"136fe197449b769f36be81d9fd30f3fd4115aabd"},{"date":"2023-03-09T09:41:00Z","author":"My","message":"🛠替换在线图片","hash":"0c8b08bc22fbe482ba02da2f1fcad211441d3c23"},{"date":"2022-10-20T20:33:01+08:00","author":"cjiping","message":"✏️内核","hash":"29831f7800f96fb03d4b3658f55c2caa5424811f"},{"date":"2022-06-22T21:41:04+08:00","author":"MY","message":"✏️更新 链接","hash":"f598c3a78e7db36db9cbe42fc9e57628cc921305"},{"date":"2020-03-02T19:22:07+08:00","author":"MY","message":"计算机系统 更新链接","hash":"d0a7e2bd3e896a5f08f78bca31d27e6bf723e448"},{"date":"2019-07-15T10:59:02+08:00","author":"My、","message":"20190715","hash":"1f3f5c1cdf18eb1eae8ca3f0cee4bc0fb8788a31"},{"date":"2019-07-14T12:42:11+08:00","author":"My、","message":"20190714","hash":"07fb0d8c0ca32d3f4a360448ab4e2368e5aee2b0"},{"date":"2019-07-13T21:14:07+08:00","author":"My、","message":"20190713","hash":"1be152f63f7d156d73de6428b78dd924051aadad"}],"createTime":"2019-07-11T21:41:49+08:00"}