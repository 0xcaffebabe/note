{"name":"处理器体系架构","id":"计算机系统-程序结构和执行-处理器体系架构","content":"# 处理器体系架构\n\n## 中央处理器\n\n**组成**\n\n-  运算器 主要功能是数据加工，包括算术/逻辑运算\n-  控制器\n    - 程序控制：程序中指令执行顺序控制\n    - 操作控制：将机器指令翻译成执行部件所需的操作控制信号\n    - 时序控制：控制操作信号的产生时间、持续时间\n    - 异常控制：异常处理，外设交互\n\n**主要寄存器**\n\n![批注 2020-02-13 164355](/assets/批注%202020-02-13%20164355.png)\n\n**操作控制器**\n\n取指令，将机器指令译码并生成执行部件控制信号序列 ，建立正确的数据通路，从而完成指令的正确执行\n\n### 数据通路\n\n- 执行部件间传送信息的路径\n- 不同指令、同一指令在执行的不同阶段的数据通路不同\n\n**分类**\n\n- 共享通路（总线）\n  - 主要部件都连接在公共总线上，各部件间通过总线进行数据传输\n  - 结构简单，实现容易，但并发性较差，需分时使用总线，效率低\n- 专用通路\n  - 并发度高，性能佳，设计复杂，成本高\n  - 可以看做多总线结构\n\n#### 数据通路抽象模型（寄存器传输）\n\n![批注 2020-02-13 165456](/assets/批注%202020-02-13%20165456.png)\n\n- 单总线结构：2个锁存器，3个时钟周期\n\n![批注 2020-02-14 083653](/assets/批注%202020-02-14%20083653.png)\n\n- 双总线结构：1个锁存器，2个时钟周期\n\n![批注 2020-02-14 083755](/assets/批注%202020-02-14%20083755.png)\n\n- 三总线结构：0个锁存器，1个时钟周期\n\n![批注 2020-02-14 084048](/assets/批注%202020-02-14%20084048.png)\n\n总线越多，性能越好\n\n### 指令周期\n\n不同指令功能不同，数据通路不同，执行时间不同，如何安排时序\n\n```mermaid\nstateDiagram-v2\n  state 指令周期 {\n  取指令 --> 指令译码\n  指令译码 --> 执行指令\n  执行指令 --> 取指令\n  }\n```\n\n1. 取指令：从 PC 寄存器里找到对应的指令地址，根据指令地址从内存里把具体的指令，加载到指令寄存器中，然后把 PC 寄存器自增，好在未来执行下一条指令\n2. 指令译码：根据指令寄存器里面的指令，解析成要进行什么样的操作\n3. 执行指令：根据特定的指令，进行算术逻辑操作、数据传输或者直接的地址跳转\n\n#### 基本概念\n\n时钟周期 = 节拍脉冲 = 震荡周期 能完成一次微操作\n\n机器周期 = CPU周期 从主存读出一条指令的最短时间 可完成 复杂操作\n\n指令周期：从主存取一条指令并执行指令的时间\n\n![批注 2020-02-14 091240](/assets/批注%202020-02-14%20091240.png)\n\n#### 指令控制同步\n\n- 定长指令周期：早期三级时序系统\n- 变长指令周期：现代时序系统\n\n#### 现代时序系统\n\n![批注 2020-02-14 092312](/assets/批注%202020-02-14%20092312.png)\n\n### 总线结构与CPU指令周期\n\n- 取指令\n\n![批注 2020-02-16 162730](/assets/批注%202020-02-16%20162730.png)\n\n- LOAD指令\n\n![批注 2020-02-16 162913](/assets/批注%202020-02-16%20162913.png)\n\n- MOVE指令\n\n![批注 2020-02-16 163645](/assets/批注%202020-02-16%20163645.png)\n\n- ADD指令\n\n![批注 2020-02-16 163854](/assets/批注%202020-02-16%20163854.png)\n\n- STORE指令\n\n![批注 2020-02-16 164053](/assets/批注%202020-02-16%20164053.png)\n\n- JMP指令\n\n![批注 2020-02-16 164238](/assets/批注%202020-02-16%20164238.png)\n\n### 硬布线控制器设计\n\n- 将控制器看成产生固定时序控制信号的逻辑电路\n- 输入信号：指令译码，时钟信号，反馈信号\n- 输出信号：功能部件控制信号序列\n- 设计目标：最少元件，最快速度\n- 理论基础：布尔代数\n- 组成器件：门电路，触发器\n\n#### 定长指令周期时序产生器\n\n- 时序产生器状态机\n\n![批注 2020-02-16 165147](/assets/批注%202020-02-16%20165147.png)\n\n- 硬布线控制器基本架构\n\n![批注 2020-02-16 165445](/assets/批注%202020-02-16%20165445.png)\n\n- 现代时序系统指令执行状态转换图\n\n![批注 2020-02-16 170058](/assets/批注%202020-02-16%20170058.png)\n\n### 微程序控制器\n\n- 硬布线：同步逻辑、繁，快，贵，难改\n  - 适合RISC计算机，如MIPS，ARM\n- 微程序：存储逻辑、简、慢、廉，易改\n  - 适合CISC等功能较复杂的系列机 X86、IBM S/360、 DEC VAX\n  - 可写控存方便修复出厂故障 Intel Core 2 、Intel Xeon\n\n#### 工作原理\n\n- 微程序是利用软件方法来设计硬件的技术\n- 存储技术和程序设计相结合，回避复杂的同步时序逻辑设计\n\n![批注 2020-02-16 190914](/assets/批注%202020-02-16%20190914.png)\n\n### 微程序设计\n\n用规整的存储逻辑代替不规则的硬接线逻辑来实现计算机控制器功能的技术\n\n### 微指令格式\n\n#### 设计原则\n\n- 有利于缩短微指令字长度\n- 有利于减少控制存储器容量\n- 有利于提高微程序执行速度\n- 有利于对微指令进行修改\n- 有利于提高微程序设计的灵活性\n\n#### 水平型微指令\n\n- 并行操作能力强，效率高，灵活性强，\n- 微指令字较长，微程序短，控存容量大，性能佳\n\n#### 垂直型微指令\n\n- 字长短，微程序长，控存容量小，性能差\n- 垂直型与指令相似，易于掌握\n- 基本被淘汰\n\n## 处理器所需的硬件电路\n\n1. ALU：一个没有状态的，根据输入计算输出结果的第一个电路\n2. 能够进行状态读写的电路元件，也就是寄存器，锁存器和 D 触发器电路\n3. 一个“自动”的电路，按照固定的周期，不停地实现 PC 寄存器自增，自动地去执行“Fetch - Decode - Execute“的步骤\n\n## 逻辑设计和硬件控制语言HCL\n\n### 逻辑门\n\n![](/assets/202339172920.png)\n\n### 组合电路和HCL布尔表达式\n\n限制：\n\n- 输入必须连接到下列之一：\n\n  - 系统输入\n  - 某个存储单元的输出\n  - 某个逻辑门的输出\n\n- 逻辑门的输出不能连接到一起\n\n- 网必须无环\n\n多路复用器：\n\n![](/assets/202339173140.png)\n\n### 字级的组合电路和HCL整数表达式\n\n```hcl\n[\n    select1:expr1;\n    select2:expr2:\n    ...\n]\n```\n\n### 集合关系\n\n![](/assets/202339173244.png)\n\n### 存储器和时钟\n\n### 将处理组织成阶段\n\n- 取指\n- 译码\n- 执行\n- 访存\n- 写回\n- 更新PC\n\n### SEQ硬件结构\n\n### SEQ时序\n\n## 流水线的通用原理\n\n![未流水线化](/assets/202262821248.png)\n\n![流水线化](/assets/2022628212429.png)\n\n用来同步简单指令与复杂指令的执行时长匹配，让所有步骤需要执行的时间尽量都差不多长，可以解决性能瓶颈来自于最复杂的指令的问题\n\n流水线带来的吞吐率提升，只是一个理想情况下的理论值。在实践的应用过程中，还需要解决指令之间的依赖问题\n\n每一级流水线对应的输出，都要放到流水线寄存器（Pipeline Register）里面，然后在下一个时钟周期，交给下一个流水线级去处理。所以，每增加一级的流水线，就要多一级写入到流水线寄存器的操作，由于这个原因，这个流水线级数也不能无线叠加上去\n\n### 超标量与多发射\n\n可以让 CPU 不仅在指令执行阶段是并行的，在取指令和指令译码的时候，也是并行的\n\n![2022629212531](/assets/2022629212531.webp)\n\n### 冒险与预测\n\n- 流水线所带来的问题\n\n#### 结构冒险\n\nCPU 在同一个时钟周期，同时在运行两条计算机指令的不同阶段。但是这两个不同的阶段，可能会用到同样的硬件电路\n\n![结构冒险](/assets/2022629204552.webp)\n\n对于访问内存数据和取指令的冲突，一个直观的解决方案就是把我们的内存分成两部分，让它们各有各的地址译码器。这两部分分别是存放指令的程序内存和存放数据的数据内存\n\n现代的CPU 没有对主存做划分，而是对内部的高速缓存部分进行了区分，把高速缓存分成了指令缓存（Instruction Cache）和数据缓存（Data Cache）两部分\n\n#### 数据冒险\n\n同时在执行的多个指令之间，有数据依赖的情况：\n\n1. 先写后读\n\n```c\nint main() {\n  int a = 1;\n  int b = 2;\n  a = a + 2;\n  b = a + 3;\n}\n```\n\n2. 先读后写\n\n```c\nint main() {\n  int a = 1;\n  int b = 2;\n  a = b + a;\n  b = a + b;\n}\n```\n\n3. 写后再写\n\n```c\nint main() {\n  int a = 1;\n  a = 2;\n}\n```\n\n最简单的一个办法，不过也是最笨的一个办法，就是流水线停顿（Pipeline Stall），或者叫流水线冒泡（Pipeline Bubbling）\n\n![流水线停顿](/assets/2022629204915.webp)\n\n另外一个方法就是操作数前推：\n\n通过在硬件层面制造一条旁路，让一条指令的计算结果，可以直接传输给下一条指令，而不再需要“指令 1 写回寄存器，指令 2 再读取寄存器“这样多此一举的操作\n\n![操作数前推](/assets/2022629205742.webp)\n\n对于没有依赖的指令，是完全可以乱序执行的，只需保证结果是有序的就行：\n\n![乱序并发](/assets/202262921730.webp)\n\n#### 控制冒险\n\n所有的流水线停顿操作都要从指令执行阶段开始。流水线的前两个阶段，也就是取指令（IF）和指令译码（ID）的阶段，是不需要停顿的。CPU 会在流水线里面直接去取下一条指令，然后进行译码\n\n但是如果遇到分支语句，CPU要如何决定取哪个分支的指令加入到流水线？只有等跳转指令执行完成，才能明确程序走的是哪个分支\n\n##### 缩短分支延迟\n\n将条件判断、地址跳转，都提前到指令译码阶段进行，这样就能更快拿到结果，知道怎么执行\n\n##### 分支预测\n\n仍然按照顺序，把指令往下执行。其实就是 CPU 预测，条件跳转一定不发生。这样的预测方法，其实也是一种静态预测技术，有50%的概率猜中，当然如果猜错了，就需要把执行完成或者正在执行的指令清除掉\n\n##### 动态分支预测\n\n根据之前条件跳转的比较结果来预测\n\n- 一级分支预测：用一个比特，去记录当前分支的比较情况\n- 双模态预测器\n\n## 超线程\n\n在一个物理 CPU 核心内部，会有双份的 PC 寄存器、指令寄存器乃至条件码寄存器。这样，这个 CPU 核心就可以维护两条并行的指令的状态\n\n![2022629213015](/assets/2022629213015.webp)\n\n超线程的目的，是在一个线程 A 的指令，在流水线里停顿的时候，让另外一个线程去执行指令。因为这个时候，CPU 的译码器和 ALU 就空出来了，那么另外一个线程 B，就可以拿来干自己需要的事情\n\n## SIMD\n\n是一种“数据并行”的加速方案。在处理向量计算的情况下，同一个向量的不同维度之间的计算是相互独立的，就可以并行读取数据，并行计算\n\n![2022629213436](/assets/2022629213436.webp)\n\n## CISC与RISC\n\nCISC               | RISC\n------------------ | --------------------\n以硬件为中心的指令集设计       | 以软件为中心的指令集设计\n通过硬件实现各类程序指令       | 通过编译器实现简单指令组合,完成复杂功能\n更高效地使用内存和寄存器       | 需要更大的内存和寄存器，并更频繁地使用\n可变的指令长度，支持更复杂的指令长度 | 简单、定长的指令\n大量指令数              | 少量指令数\n\n现代的CPU的指令集大多是 RISC 和 CISC 融合的产物\n\n- RISC-V：一个开源的指令集\n\n## GPU\n\n### 图像实时渲染原理\n\n1. 顶点处理：构成多边形建模的每一个多边形，都有多个顶点（Vertex），把这些顶点在三维空间里面的位置，转化到屏幕这个二维空间里面\n\n![顶点处理](/assets/2022630214337.webp)\n\n2. 图元处理：把顶点处理完成之后的各个顶点连起来，变成多边形\n\n![2022630214428](/assets/2022630214428.webp)\n\n3. 栅格化：把做完图元处理的多边形，转换成屏幕里面的一个个像素点\n\n![2022630214514](/assets/2022630214514.webp)\n\n4. 片段处理：计算每一个像素的颜色、透明度等信息，给像素点上色\n\n![202263021464](/assets/202263021464.webp)\n\n5. 像素操作：把不同的多边形的像素点“混合（Blending）”到一起。可能前面的多边形可能是半透明的，那么前后的颜色就要混合在一起变成一个新的颜色\n\n![2022630214644](/assets/2022630214644.webp)\n\n这里的1 3 4 都是可以并行操作的\n\n### 早期的GPU\n\n![2022630214757](/assets/2022630214757.webp)\n\n### 现代的GPU\n\n可编程管线：在整个的渲染管线（Graphics Pipeline）的一些特别步骤，能够自己去定义处理数据的算法或者操作\n\n![2022630215030](/assets/2022630215030.webp)\n\n1. 芯片瘦身：本质上CPU核心就是一个GPU核心，但是GPU并不需要CPU核心的一些功能，就可以去掉\n2. 多核并行和SIMT：由于核心精简了，所以就可以塞更多的核心提升并行度，并且可以一次取多条，计算多条数据\n3. 超线程：提供较多的执行上下文，同样也是为了并行度\n\n## FPGA\n\n- 现场可编程门阵列（Field-Programmable Gate Array）：可重复对电路进行编程\n\n1. 用存储换功能实现组合逻辑，通过 LUT 来实现各种组合逻辑\n\n![LUT](/assets/2022742154.webp)\n\n2. 对于需要实现的时序逻辑电路，使用 D 触发器，作为寄存器，组合了多个 LUT 和寄存器的设备，也被叫做 CLB（Configurable Logic Block，可配置逻辑块）\n3. 通过可编程逻辑布线，来连接各个不同的 CLB，最终实现我们想要实现的芯片功能\n\n![可编程逻辑布线](/assets/20227421822.webp)\n\n## ASIC\n\n有专门用途的场景，单独设计一个芯片。称之为 ASIC（Application-Specific Integrated Circuit），也就是专用集成电路\n\n矿机的芯片也是一种ASIC，专用集成电路在某些方面能效比更加出色\n","metadata":"tags: ['计算机系统']","hasMoreCommit":true,"totalCommits":19,"commitList":[{"date":"2024-12-03T17:16:06+08:00","author":"MY","message":"📦计算机系统","hash":"968238728e3c3b13116b44e2bdcaf504962841b9"},{"date":"2024-12-02T19:28:47+08:00","author":"MY","message":"📦计算机系统","hash":"120847197a4799fd4df9146d1579b956be153cae"},{"date":"2024-12-02T16:11:02+08:00","author":"MY","message":"📦处理器体系结构","hash":"8292a24663309b67f7b0431ae6d532b5eee79b2e"},{"date":"2023-03-09T09:41:00Z","author":"My","message":"🛠替换在线图片","hash":"0c8b08bc22fbe482ba02da2f1fcad211441d3c23"},{"date":"2022-07-04T21:28:45+08:00","author":"MY","message":"✏️更新 处理器体系结构","hash":"f925745754f699d6375166a4827dc618934ecf98"},{"date":"2022-06-30T21:55:10+08:00","author":"MY","message":"✏️更新 处理器体系结构","hash":"f758b1f515388f539f77e917d0820635827965aa"},{"date":"2022-06-30T21:41:51+08:00","author":"MY","message":"✏️更新 处理器体系结构","hash":"905034e8a9cdbbda63bfae991ae13fe81f5b138f"},{"date":"2022-06-29T21:37:26+08:00","author":"MY","message":"✏️更新 处理器体系结构","hash":"66bdeb6527dc0ce151b74584d9fece22a8846dac"},{"date":"2022-06-28T21:43:23+08:00","author":"MY","message":"✏️更新 处理器体系结构","hash":"48a94e7a6abe544a1b48fc6eb775ba28d136d196"},{"date":"2022-06-28T21:02:52+08:00","author":"MY","message":"✏️更新 计算机系统","hash":"21d96b6c47754215fb109c200a578f9968361e94"}],"createTime":"2019-07-09T12:04:41+08:00"}