{"name":"指令系统","id":"计算机系统-程序结构和执行-指令系统","content":"# 指令系统\n\n## 指令\n\n- 计算机能直接识别、执行的操作命令（机器指令）；\n- 冯诺依曼结构计算机 \"程序控制\"原理实现的载体\n\nCPU 就是一个执行各种计算机指令（Instruction Code）的逻辑机器\n\n### 指令字长\n\n- 指令中包含的二进制位数\n- 与机器字长相比: 单字长、双字长、半字长等长度指令\n- 多字长指令\n\n  - 解决寻址较大存储空间的问题\n  - 取指多次访问内存，影响速度，占用空间大\n\n- **等长指令**: 指令字长度固定。\n\n- **变长指令**: 指令字长度根据需要可变\n\n### 指令的分类\n\n- 根据计算机层次结构分类\n\n![批注 2020-02-10 160201](/assets/批注%202020-02-10%20160201.png)\n\n- 根据指令中地址码字段的个数分类\n\n![批注 2020-02-10 160415](/assets/批注%202020-02-10%20160415.png)\n\n- 根据指令中操作数的物理位置分类\n\n  - 存储器－存储器（SS）型\n  - 寄存器－寄存器（RR）型\n  - 寄存器－存储器（RS）型\n\n- 根据指令的功能分类\n\n  - 数据传送指令 MOV 、PUSH/POP、 IN/OUT等\n  - 定点算术运算指令 ADD、SUB、INC、CMP、MUL等\n  - 位运算指令 NOT、AND、OR、SHL、SAL等\n  - 控制转移指令 JMP 、JNE、CALL、RET等\n\n### 指令的格式\n\n- 指令要求计算机完成什么功能？ => 设置操作码\n- 指令要求计算机处理什么数据？ => 设置数据源/目\n- 计算机怎样得到要处理的数据？ => 设置寻址方式\n\n![批注 2020-02-10 161205](/assets/批注%202020-02-10%20161205.png)\n\n- 操作码字段的位数与支持的最大指令数量有关\n\n  - 支持变长操作码时，操作码向不用的地址码字段扩展\n\n- 寻址方式字段的位数与支持的寻址方式种类有关\n- 地址码字段的作用及影响与其位数和寻址方式有关\n\n## 指令系统\n\n一台计算机中所有机器指令的集合\n\n- 系列机：同一公司不同时期生产，基本系统结构和指令系统相同的计算机\n- 兼容机：不同公司生产，基本系统结构和指令系统相同的计算机\n\n## 寻址方式\n\n根据冯诺依曼计算机的工作原理，需要根据物理地址从内存中去取指令和数据。如何获得指令和数据的物理地址？\n\n### 指令的寻址方式\n\n- 顺序寻址\n\n程序的指令序列在主存顺序存放。执行时从第一条指令开始，逐条取出并执行\n\nCPU中设置程序计数器（PC）对指令的顺序号进行计数。PC开始时存放程序的首地址，每执行一条指令，PC 加\"1\"，指出下条指令的地址，直到程序结束\n\n需要深刻理解 \"+1\" => 存储1条指令占用的字节单元数与存储字长有关！\n\n- 跳跃寻址\n\n![批注 2020-02-10 162617](/assets/批注%202020-02-10%20162617.png)\n\n### 操作数的寻址方式\n\n当数据在主存中时， 需要计算其有效地址E\n\n#### 立即数寻址\n\n地址码字段是操作数本身\n\n特点：\n\n- 取指操作将数据与指令一并读入CPU内部的寄存器，指令执行速度快\n- 便于程序设计（变量赋初值）\n- 数据大小受字段位数限制\n\n#### 寄存器寻址\n\n操作数在CPU的内部寄存器中\n\n特点：\n\n- 操作数在寄存器中，指令执行速度快\n- 能访问的数据大小一般与计算机字长有关\n- 地址字段的位数与计算机通用寄存器数量相关\n\n#### 直接寻址\n\n地址码字段直接给出操作数在内存的地址\n\n- 提供访问主存的操作\n- 获得数据要访问主存，指令执行速度慢\n- 地址字段的位数决定了访存空间大小\n\n#### 间接寻址\n\n地址码字段给出的是操作数主存地址的地址\n\n- 解决了直接寻址方式下地址字段的位数限制访存范围大小的问题\n- 获得数据要访问主存2次，指令执行速度太慢\n\n#### 寄存器间接寻址\n\n 地址码字段给出的是寄存器编号R\n\n - 解决了直接寻址方式下地址字段的位数限制访存范围大小的问题\n - 获得数据只需访问主存1次\n\n#### 相对寻址\n\nE=D + (PC), D为指令中地址字段的值\n\n- 可节省指令中的地址位数，便于程序在内存中成块移动\n- 注意PC的改变对计算E的影响\n\n#### 基址寻址\n\n指定一个基址寄存器B，与本指令地址无关\n\nE= D + (B), D为指令中地址字段的值\n\n#### 变址寻址\n\n指定一个变址寄存器X，与本指令地址无关, 内容可随要求改变，E= D + (X), D为指令中地址字段的值\n\n- 不改变指令即可改变数据的有效地址，可在循环中使用\n- 在字符串处理，向量运算等等成批数据处理中非常有用\n\n![批注 2020-02-10 170009](/assets/批注%202020-02-10%20170009.png)\n\n使用寻址方式的好处 ： 有利于缩短指令字长、方便程序设计、扩展访存空间\n\n### 指令格式设计\n\n![批注 2020-02-10 161205](/assets/批注%202020-02-10%20161205.png)\n\n- 根据指令数量的要求及是否支持操作码扩展，确定操作码字段的位数\n- 根据对操作数的要求确定地址码字段的个数\n- 根据寻址方式的要求，为每个地址码字段确定寻址方式字段位数\n- 确定采用定长指令还是变长指令\n\n### MIPS指令\n\n早期主要用于嵌入式系统，如Windows CE的设备，路由器，家用网关和视频游戏机，现在已经在PC机、服务器中得到广泛应用\n\n**特点**\n\n- 简单的Load/Store结构\n- 易于流水线CPU设计\n- 易于编译器开发\n- MIPS指令的寻址方式非常简单，每条指令的操作也非常简单\n\n#### 指令格式\n\n**R型指令**\n\n![批注 2020-02-10 193600](/assets/批注%202020-02-10%20193600.png)\n\n操作数和保存结果均通过寄存器进行\n\n- op：操作码，所有R型指令中都全为0；\n- rs：寄存器编号，对应第1个源操作数；\n- rt：寄存器编号，对应第2个源操作数；\n- rd：寄存器编号，据此保存结果；\n- shamt：常数，在移位指令中使用；\n- funct：功能码，指定指令的具体功能\n\n**I 型指令**\n\n![批注 2020-02-10 194012](/assets/批注%202020-02-10%20194012.png)\n\n操作数中涉及立即数，结果保存到寄存器\n\n- op：标识指令的操作功能；\n- rs：第1个源操作数，是寄存器操作数；\n- rt：目的寄存器编号，用来保存运算结果；\n- imm：第2个源操作数，立即数\n\n**J 型指令**\n\n#### 寻址方式\n\nR型指令：由op和funct字段共同隐含说明当前的寻址方式\n\nI型和J型指令：由op字段隐含说明当前指令使用的寻址方式\n\n#### 数据通路\n\n- 不再区分指令存储器和数据存储器，分时使用部分功能部件\n- 主要功能单元输出端增加寄存器锁存数据\n- 传输通路延迟变小，时钟周期变短\n","metadata":"","hasMoreCommit":false,"totalCommits":3,"commitList":[{"date":"2024-12-03T17:16:06+08:00","author":"MY","message":"📦计算机系统","hash":"968238728e3c3b13116b44e2bdcaf504962841b9"},{"date":"2022-06-22T21:14:39+08:00","author":"MY","message":"✏️更新 指令系统","hash":"f5e2c48a99e9f15b2019fdf9f77373392ceb7dbf"},{"date":"2020-02-10T19:46:29+08:00","author":"MY","message":"增加指令系统","hash":"f46b58c13a1e4ed75bd249efbc324073aa089fc9"}],"createTime":"2020-02-10T19:46:29+08:00"}