{"name":"数据的表示","id":"计算机系统-程序结构和执行-数据的表示","content":"# 数据的表示\n\n组织数据,方便计算机硬件直接使用\n\n## 机器内的数据表示\n\n### 原码\n\n原码(true form)是一种计算机中对数字的二进制定点表示方法。原码表示法在数值前面增加了一位符号位（即最高位为符号位）：正数该位为0，负数该位为1（0有两种表示：+0和-0），其余位表示数值的大小\n\n### 反码\n\n反码跟原码是正数时，一样；负数时，反码就是原码符号位除外，其他位按位取反\n\n### 补码\n\n仍然通过最左侧第一位的 0 和 1，来判断这个数的正负。但是，不再把这一位当成单独的符号位，在剩下几位计算出的十进制前加上正负号，而是在计算整个二进制值的时候，在左侧最高位前面加个负号\n\n$$\n\\mathsf{B2T}_4[1101] = -1\\times2^3+1\\times2^2+0\\times2^1+1\\times2^0=-3\n$$\n\n1000 表示 -8，0010 代表 2\n\n- 正数的补码与其原码相同\n- 负数的补码，就是反码再加1\n\n在计算机系统中，数值一律用补码来表示和存储。原因在于，使用补码，可以将符号位和数值域统一处理；同时，加法和减法也可以统一处理\n\n### 移码\n\n对补码的符号位取反\n\n## 定点与浮点数据表示\n\n### 定点数\n\n- 可表示定点小数和整数\n\n一个 32 比特的可以代表8个 0 ~ 9的整数，最右边的 2 个 0～9 的整数，当成小数部分；把左边 6 个 0～9 的整数，当成整数部分\n\n用二进制来表示十进制的编码方式，叫作BCD编码\n\n这种方式有两个缺点：\n\n1. 表示的数值范围较小\n2. 没办法同时表示很大的数字和很小的数字\n\n### 浮点数\n\n![批注 2020-01-10 135646](/assets/批注%202020-01-10%20135646.png)\n\n- S是一个符号位，用来表示是正数还是负数\n- 偏指数E，用来表示2的e次方的取值空间\n- 尾数位数，代表有效数位\n\n不同系统可能根据自己的浮点数格式从中提取不同位数的阶码\n\n- IEEE 754格式\n\nS | 8位偏指数E | 23位有效尾数M | 单精度\n-|-|-|-\n  | S      | 11位偏指数E  | 52位有效尾数M | 双精度\n\n#### 加法\n\n两个浮点数的指数位可能是不一样的，在计算时要把两个的指数位变成一样的，然后只去计算有效位的加法，也就是把指数位都统一成两个其中较大的\n\n两个相加数的指数位差的越大，位移的位数越大，可能丢失的精度也就越大\n\n在实际计算的时候，只要两个数，差出 $2^{24}$，也就是差不多 1600 万倍，那这两个数相加之后，结果完全不会变化\n\n- Kahan Summation的算法\n\n在每次的计算过程中，都用一次减法，把当前加法计算中损失的精度记录下来，然后在后面的循环中，把这个精度损失放在要加的小数上，再做一次运算\n\n```java\nfor (int i = 0; i < 20000000; i++) {\n    float cur = 1.0f;\n    float needToAdd = cur + remain;\n    float nextRes = res + needToAdd;\n    remain = needToAdd - (nextRes - res);\n    res = nextRes;\n}\n```\n\n## 字符串的表示\n\n> 字符编码 Character Encoding : 就是一套自然语言的字符与二进制数之间的对应规则。 \n\n- 字符集 Charset ：也叫编码表。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符 号、数字等。\n\n```mermaid\nstateDiagram-v2\n  direction LR\n  GBK字节 --> GBK编码集\n  GBK编码集 --> 中文(你好)\n  中文(你好) --> GBK编码集\n  GBK编码集 --> GBK字节\n  UTF8字节 --> UTF8编码集\n  UTF8编码集 --> 中文(你好)\n  中文(你好) --> UTF8编码集\n  UTF8编码集 --> UTF8字节\n```\n\n### 常用编码\n\n- ASCII 码 使用7bit来表示 范围从0-127\n- ISO-8859-1 单字节编码 总共能表示256字符\n- GB2312 双字节编码\n- GBK 扩展了GB2312 增加了更多的汉字\n- UTF-16 两个字节表示一个字符 大大简化了字符串操作 是Java内存的存储格式\n- UTF-8 使用变长存储 不同的字符可以由1~6个字符组成\n\nGBK与GB2312对比：GBK范围更大\n\nUTF8与UTF16对比：16编码效率高 但不适合网络传输 8的容错性比16强\n\n## 数据校验\n\n受元器件的质量、电路故障或噪音干扰等因素的影响，数据 在被处理、传输、存储的过程中可能出现错误，若能设计硬件层面的错误检测机制，可以减少基于软件检错的代价\n\n### 基本原理\n\n- 增加冗余码\n\n### 码距\n\n- 同一编码中，任意两个合法编码之间不同二进数位数的最小值\n- 校验码中增加冗余项的目的就是为了增大码距\n\n1) 码距≥e+1:可检测e个错误\n2) 码距≥2t+1:可纠正t个错误\n3) 码距≥e+t+1:可纠正t个错误，同时检测e个错误(e >= t)\n\n### 奇偶校验\n\n用额外的一位去记录，这 8 个比特里面有奇数个 1 还是偶数个 1。如果是奇数个 1，那额外的一位就记录为 1；如果是偶数个 1，那额外的一位就记录成 0\n\n![批注 2020-01-11 091806](/assets/批注%202020-01-11%20091806.png)\n\n- 编码与检错简单\n- 编码效率高\n- 不能检测偶数位错误, 无错结论不可靠，是一种错误检测码\n- 不能定位错误，因此不具备纠错能力\n\n### CRC校验\n\n将字节数据产生简短固定位数校验码的一种散列函数，主要用来检测或校验数据传输或者保存后可能出现的错误\n\n### 海明校验\n\n海明码是采用奇偶校验的码，把这数据分了组，通过分组校验来确定哪一位出现了错误，[原理](https://blog.csdn.net/Yonggie/article/details/83186280)\n\n#### 7-4海明码\n\n一共是 7 位（Bit）有效数据并额外存储了 4 位数据，用来纠错\n\n#### 海明距离\n\n对于两个二进制表示的数据，之间有差异的位数，称之为海明距离\n","metadata":"tags: ['计算机系统']","hasMoreCommit":true,"totalCommits":11,"commitList":[{"date":"2024-12-03T17:16:06+08:00","author":"MY","message":"📦计算机系统","hash":"968238728e3c3b13116b44e2bdcaf504962841b9"},{"date":"2024-11-14T19:15:00+08:00","author":"MY","message":"📦计算机系统","hash":"5c5e65cc7dae2c91971a72f7a73dc3877be1a59c"},{"date":"2024-04-16T19:27:15+08:00","author":"MY","message":"✏C","hash":"99952a8ec19fca0df0f83df82488445c09f39e33"},{"date":"2023-11-24T11:45:52+08:00","author":"MY","message":"📦清理大图","hash":"e3ff900ed2a2e49e9f3bd316935fe853796f7e52"},{"date":"2022-07-07T20:59:41+08:00","author":"MY","message":"✏️更新 数据的表示","hash":"14c2cf55b20ce73090e9614d8f7d9f4579306dd5"},{"date":"2022-06-23T21:41:38+08:00","author":"MY","message":"✏️更新 数据的表示","hash":"51e62b1b7a5c1a6be9497caeb7d3965fadfcbd31"},{"date":"2022-06-23T21:09:40+08:00","author":"MY","message":"📦整理 数据的表示","hash":"f4f40ccc8edd6b4e554c4f373b57704bb126557f"},{"date":"2020-01-11T15:38:34+08:00","author":"MY","message":"增加定点数运算及溢出检测","hash":"f29d167349e589ca5dc33c07b2ac733e436ae9f1"},{"date":"2020-01-11T09:52:10+08:00","author":"MY","message":"增加奇偶校验与CRC校验","hash":"af0d3ffb9b14ee02dcbd8fc14df9e61a8dbbd19a"},{"date":"2020-01-10T14:25:26+08:00","author":"MY","message":"增加定点浮点&校验原理","hash":"899aaabd56c293074c44f91fe179e64c36585ff7"}],"createTime":"2020-01-07T16:00:07+08:00"}