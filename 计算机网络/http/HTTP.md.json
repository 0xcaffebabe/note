{"name":"HTTP","id":"计算机网络-http-HTTP","content":"# HTTP协议\n\n- 基于TCP/IP的高级协议\n- 默认端口号:80\n- 基于请求/响应模型的:一次请求对应一次响应\n- 无状态的：每次请求之间相互独立，不能交互数据\n\n## 基础概念\n\n- URI\n\n![批注 2020-03-07 204209](/assets/批注%202020-03-07%20204209.png)\n\n- 请求报文\n\n![202037204550](/assets/202037204550.png)\n\n- 响应报文\n\n![202037204611](/assets/202037204611.png)\n\n## HTTP方法\n\n- GET\n\n获取资源\n\n- HEAD\n\n与GET类似，但不返回报文的实体主体\n\n- POST\n\n主要用来传输数据\n\n- PUT\n\n上传文件\n\n- PATCH\n\n对资源进行部分修改\n\n- DELETE\n\n删除文件\n\n- OPTIONS\n\n查询指定的 URL 能够支持的方法\n\n- CONNECT\n\n要求在与代理服务器通信时建立隧道\n\n- TRACE\n\n服务器会将通信路径返回给客户端\n\n## 状态码\n\n分类  | 分类描述\n--- | -----------------------\n1** | 信息，服务器收到请求，需要请求者继续执行操作\n2** | 成功，操作被成功接收并处理\n3** | 重定向，需要进一步的操作以完成请求\n4** | 客户端错误，请求包含语法错误或无法完成请求\n5** | 服务器错误，服务器在处理请求的过程中发生了错误\n\n### 1XX\n\n100 Continue ：表明到目前为止都很正常，客户端可以继续发送请求或者忽略这个响应\n\n### 2XX\n\n- 200 OK\n- 204 No Content ：请求已经成功处理，但是返回的响应报文不包含实体的主体部分。一般在只需要从客户端往服务器发送信息，而不需要返回数据时使用\n- 206 Partial Content ：表示客户端进行了范围请求，响应报文包含由 Content-Range 指定范围的实体内容\n\n### 3XX\n\n- 301 Moved Permanently ：永久性重定向\n- 302 Found ：临时性重定向\n- 303 See Other ：和 302 有着相同的功能，但是 303 明确要求客户端应该采用 GET 方法获取资源\n- 304 Not Modified ：如果请求报文首部包含一些条件，例如：If-Match，If-Modified-Since，If-None-Match，If-Range，If-Unmodified-Since，如果不满足条件，则服务器会返回 304 状态码\n- 307 Temporary Redirect ：临时重定向，与 302 的含义类似，但是 307 要求浏览器不会把重定向请求的 POST 方法改成 GET 方法\n\n### 4XX\n\n- 400 Bad Request:语法错误\n- 401 Unauthorized:需要认证\n- 403 Forbidden:请求被拒绝\n- 404 Not Found\n\n### 5XX\n\n- 500 Internal Server Error ：服务器正在执行请求时发生错误\n- 503 Service Unavailable ：服务器暂时处于超负载或正在进行停机维护，现在无法处理请求\n\n## Cookie\n\nCookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器之后向同一服务器再次发起请求时被携带上，用于告知服务端两个请求是否来自同一客户端\n\n用途：\n\n- 会话状态管理\n- 个性化设置\n- 浏览器行为跟踪\n\n### 创建过程\n\n服务的响应头Set-Cookie头部：\n\n```html\nSet-Cookie: yummy_cookie=choco\nSet-Cookie: tasty_cookie=strawberry\n```\n\n客户端之后对同一服务器发送请求时，都会在请求头Cookie头部带上这个Cookie\n\n```html\nCookie: yummy_cookie=choco; tasty_cookie=strawberry\n```\n\n### 分类\n\n- 会话期Cookie：浏览器关闭之后它会被自动删除，没有指定过期时间就是会话期Cookie\n- 持久性 Cookie：指定过期时间（Expires）或有效期（max-age）之后就成为了持久性的 Cookie\n\n```html\nSet-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2020 07:28:00 GMT;\n```\n\n### 作用域\n\nDomain 标识Cookie在哪些域名下有效，如果不指定，默认是当前文档的主机\n\n如果指定了Domain，则一般包括子域名，如baidu.com，包含map.baidu.com\n\n### JS访问\n\nJavaScript可以通过document.cookie来创建cookie或者访问非HttpOnly的Cookie\n\n### HttpOnly\n\n标记为 HttpOnly 的 Cookie 不能被 JavaScript 脚本调用\n\n```html\nSet-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2020 07:28:00 GMT; Secure; HttpOnly\n```\n\n### Secure\n\n标记为 Secure 的 Cookie 只能通过被 HTTPS 协议加密过的请求发送给服务端\n\n### Session\n\nSession是通过在服务端生成一个key，使用这个key为索引在服务器端存放用户信息，后将这个key作为cookie返回给客户端，让客户端使用这个key来操作\n\n应该注意 Session ID 的安全性问题，不能让它被恶意攻击者轻易获取，那么就不能产生一个容易被猜到的 Session ID 值。此外，还需要经常重新生成 Session ID。在对安全性要求极高的场景下，还需要使用二重验证的方式\n\n#### Cookie与Session\n\n比较类别 | Session | Cookie\n---- | ------- | ------\n存储方式 | 服务端     | 客户端\n大小限制 | 无       | 有\n安全   | 较安全     | 较不安全\n\n- cookie一般用于存出少量的不太敏感的数据，在不登录的情况下，完成服务器对客户端的身份识别\n\n### cookie 压缩\n\ngzip只能对body进行压缩 cookie位于头上 需要手动编程对http header 进行处理\n\n### 浏览器禁用cookie\n\n当浏览器无法使用Cookie，只能使用session，此外，session id也不能通过cookie来传递，而是需要通过URL传参的方式来传递，如wap时代的sid\n\n### 注意事项\n\n- Cookie的Name不能和属性值一样 比如Doamin MaxAge等待\n- Name和Value不能设置成非ASCII字符\n- 不同的浏览器都会对Cookie的大小以及数量进行限制 需要注意\n\n## 连接管理\n\n### 连接类型\n\n#### 短连接\n\n每进行一次 HTTP 通信就要新建一个 TCP 连接\n\n#### 并行连接\n\n通过连续发起多个不同连接 来解决串行HTTP请求的长时延\n\n也并非并行连接就能更快 还需要考虑到带宽 服务器等因素\n\n#### 长连接\n\n- 减少了TCP连接建立的开销\n\n从 HTTP/1.1 开始默认是长连接的，如果要断开连接，需要由客户端或者服务器端提出断开，使用 Connection : close，HTTP/2 里，连接关闭是通过另外的机制实现的，与 Connection 头部无关\n\n加快VIP切换时的收敛速度：\n\n```mermaid\nsequenceDiagram\n  客户端 ->> LB: 请求\n  LB ->> 客户端: serverA\n  客户端 ->> serverA: HTTP\n  serverA ->> 客户端: Connection:Keep-Alive\n  客户端 ->> serverA: 其他事务\n  serverA ->> 客户端: Connection:Close\n  客户端 ->> LB: 请求\n  LB ->> 客户端: serverB\n  客户端 ->> serverB: HTTP\n```\n\n在 HTTP/1.1 之前默认是短连接的，如果需要使用长连接，则使用 Connection : Keep-Alive\n\n对于不认识Connection的代理服务器，会将Connection首部也一并转发，从而造成连接被挂住\n\n![哑代理挂住了请求](/assets/屏幕截图%202022-01-05%20181622.png)\n\n```http\nKeep-Alive: max=5, timeout=120 // 最多为5个事务保持连接状态 或最多保持120秒的空闲时间\n```\n\n#### 流水线\n\n流水线是在同一条长连接上连续发出请求，而不用等待响应返回，这样可以减少延迟\n\n![流水线连接](/assets/屏幕截图%202022-01-06%20171127.png)\n\n要求服务端必须按客户端发送的请求顺序响应数据\n\n### 连接关闭\n\nHTTP的连接可以在任意时刻关闭，针对HTTP编程要处理这种情况\n\n使用Content-Length 来提供接下去所传输的数据大小，从而让对方知悉传输情况\n\n基于TCP的HTTP继承了TCP的关关闭功能，也就是可以关闭输入或者输出通道，当对方的输入通道关闭后，己方若继续发送数据，就会得到一个连接被重置的错误\n\n良好的关闭实现应该是首先关闭己方的输出，然后等待对方的输出通道关闭，这样就可以安全地关闭\n\n## 内容协商\n\n### 服务端驱动\n\n客户端设置Accept、Accept-Charset、Accept-Encoding、Accept-Language等首部，服务端根据这些首部返回特定资源\n\n### 代理驱动\n\n服务器返回 300 Multiple Choices 或者 406 Not Acceptable，客户端从中选出最合适的那个资源\n\n### vary\n\n一个客户端发送了一个包含 Accept-Language 首部字段的请求之后，源服务器返回的响应包含 Vary: Accept-Language 内容，缓存服务器对这个响应进行缓存之后，在客户端下一次访问同一个 URL 资源，并且 Accept-Language 与缓存中的对应的值相同时才会返回该缓存\n\n## 内容编码\n\n内容编码有：gzip、compress、deflate、identity\n\n浏览器发送 Accept-Encoding 首部，其中包含有它所支持的压缩算法，以及各自的优先级。服务器则从中选择一种，使用该算法对响应的消息主体进行压缩，并且发送 Content-Encoding 首部来告知浏览器它选择了哪一种算法\n\n## 范围请求\n\n- Range\n\n请求报文中添加 Range 首部字段指定请求的范围\n\n```html\nRange: bytes=0-1023\n```\n\n成功的话服务器返回的响应包含 206 Partial Content\n\n请求的范围越界的情况下，服务器会返回 416 Requested Range Not Satisfiable 状态码\n\n不支持范围请求的情况下，服务器会返回 200 OK 状态码\n\n- Accept-Range\n\n用于告知客户端是否能处理范围请求，可以处理使用 bytes，否则使用 none\n\n### 分块传输\n\nChunked Transfer Encoding，可以把数据分割成多块，让浏览器逐步显示页面\n\n### 多部分对象集合\n\n一份报文主体内可含有多种类型的实体同时发送，每个部分之间用 boundary 字段定义的分隔符进行分隔\n\n如\n\n```html\nContent-Type: multipart/form-data; boundary=AaB03x\n\n--AaB03x\nContent-Disposition: form-data; name=\"submit-name\"\n\nLarry\n--AaB03x\nContent-Disposition: form-data; name=\"files\"; filename=\"file1.txt\"\nContent-Type: text/plain\n\n... contents of file1.txt ...\n--AaB03x--\n```\n\n## 缓存\n\n实现方法：\n\n- 代理服务器缓存\n- 客户端缓存\n\n### 缓存控制\n\n```mermaid\nsequenceDiagram\n  participant B as 浏览器\n  participant S as 服务器\n  \n  B ->> S: 请求资源（如果有缓存，包含ETag/If-None-Match或Last-Modified/If-Modified-Since）\n  alt 初次请求或缓存过期\n    S ->> B: 200 OK，返回资源，包含ETag和Last-Modified\n  else 使用缓存\n    S ->> B: 304 Not Modified（资源未修改）\n  end\n```\n\n#### 禁止对响应进行缓存\n\n```html\nCache-Control: no-store\n```\n\n#### 强制确认缓存\n\n只有当客户端确认缓存资源有效时，才能使用这个响应\n\n```html\nCache-Control: no-cache\n```\n\n- must-revalidate和proxy-revalidate\n\nmust-revalidate表示在资源过期后，一定需要从服务器中进行获取 proxy-revalidate用于提示代理、CDN等设备资源过期后的缓存行为\n\n#### 禁止修改\n\n```http\nCache-Control: no-transform\n```\n\n禁止代理服务器修改HTTP响应头或者响应体\n\n#### 私有缓存\n\n只能单独给用户使用，一般用在浏览器\n\n```html\nCache-Control: private\n```\n\n#### 公共缓存\n\n可以被多个用户使用，一般存储在代理服务器中\n\n```html\nCache-Control: public\n```\n\n#### 客户端缓存新鲜度限制\n\n- max-stale: 提供一个秒为单位的数字 代表这段时间内缓存不能过期\n- min-fresh: 后续跟随一个以秒为单位的数字，用于建议服务器能返回一个不少于该时间的缓存资源\n- only-if-cached: 表示客户端要求不发送网络请求，只使用缓存来进行响应\n\n#### HTML的HTTP-EQUIV\n\n可以控制服务器解析这个标签 然后将这个标签里的添加到首部响应返回给客户端\n\n### 缓存验证\n\n#### If-None-Match\n\nETag 是资源的唯一标识\n\n```http\nIf-None-Match: \"82e22293907ce725faf67773957acd12\"\n```\n\n如果服务器接收到ETage后，判断资源没有发生改变，会返回一个304\n\n弱验证器：\n\n```http\nIf-None-Match: W/\"82e22293907ce725faf67773957acd12\"\n```\n\n弱验证器当文件内容发生变化后，缓存也不会失效\n\n#### If-Modified-Since\n\nLast-Modified 首部字段也可以用于缓存验证，如果响应首部字段里含有这个信息，客户端可以在后续的请求中带上 If-Modified-Since 来验证缓存。服务器只在所请求的资源在给定的日期时间之后对内容进行过修改的情况下才会将资源返回，状态码为 200 OK。如果请求的资源从那时起未经修改，那么返回一个不带有实体主体的 304 Not Modified 响应报文\n\n![缓存验证-新鲜度检测](/assets/屏幕截图%202022-01-13%20174058.png)\n\n### 缓存过期\n\n出现在响应报文，超过这个时间 缓存就被认为过期\n\n```html\nCache-Control: max-age=31536000\n```\n\nExpires 首部字段也可以用于告知缓存服务器该资源什么时候会过期\n\n```html\nExpires: Wed, 04 Jul 2012 08:26:05 GMT\n```\n\n但Expires有如下问题：\n\n1. 受限于客户端的时间\n2. 无法缓存客户私有资源\n3. 无法描述“不缓存”，如js文件引用后面要加个版本号\n\n#### 试探性过期\n\n对于没有提供max-age跟Expires的响应\n\n- 许久不修改的 最近也认为不怎么修改\n- 最近修改的 最近修改的可能性更大\n\n### 浏览器缓存原则\n\n- **首页**可以看做是框架 应该禁用缓存，以保证加载的资源都是最新的\n- 还有一些场景下我们希望禁用浏览器缓存。比如轮训api上报数据数据\n- 浏览器缓存很难彻底禁用，大家的做法是加版本号，随机数等方法。\n- 只缓存200响应头的数据，像3XX这类跳转的页面不需要缓存。\n- 对于js，css这类可以缓存很久的数据，可以通过加版本号的方式更新内容\n- 不需要强一致性的数据，可以缓存几秒\n- 异步加载的接口数据，可以使用ETag来校验。\n- 在服务器添加Server头，有利于排查错误\n\n## 通信数据转发\n\n### 代理\n\n目的：\n\n- 缓存\n- 负载均衡\n- 网络访问控制\n- 访问日志记录\n\n![代理流量获取](/assets/屏幕截图%202022-01-06%20174916.png)\n\n#### 正向代理\n\n用户可以察觉正向代理的存在\n\n```mermaid\nsequenceDiagram\n  客户端 ->> 代理: 请求\n  代理 ->> 服务端: 请求\n  服务端 ->> 代理: 响应\n  代理 ->> 客户端: 响应\n```\n\n#### 反向代理\n\n反向代理一般位于内部网络中，用户察觉不到\n\n```mermaid\nsequenceDiagram\n  客户端 ->> 代理: 请求\n  opt 内部网络\n    代理 ->> 服务端: 请求\n    服务端 ->> 代理: 响应\n  end\n  代理 ->> 客户端: 响应\n```\n\n#### 客户端代理配置\n\n- 手动配置代理服务器地址及端口\n- [PAC](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Proxy_servers_and_tunneling/Proxy_Auto-Configuration_PAC_file) 自动代理配置 通过一段js脚本确定一个url要以怎样的方式使用什么代理访问\n- WPAD 代理发现 自动发现PAC并进行下载然后为请求使用代理\n\n#### 有关代理的一些问题\n\n- 客户端向代理发送请求时 需要在HTTP请求消息里面包含完整的URI信息 这样代理服务器才知道要转发到哪里\n\n```http\nGET http://baidu.com HTTP/1.0\n```\n\n- 如果代理接收到的URI不完整 也可以通过Host确定\n\n#### 报文追踪\n\n- Via首部\n\n```http\nVia: [ <protocol-name> \"/\" ] <protocol-version> <host> [ \":\" <port> ]\n```\n\n![经过多层代理 通过Via标识](/assets/屏幕截图%202022-01-07%20172607.png)\n\n每经过一层代理，代理都可以向该字段加入自己的标识 在多层代理的情况下，通过检查这个字段有没有自己，可以检测环路，该字段与Server的区别在于Server是源服务器信息，代理不应修改\n\n- TRACE\n\n![TRACE流程](/assets/屏幕截图%202022-01-07%20173637.png)\n\n通过指定Max-Forwards头部 每经过一层代理该值就会减1 当为0时，及时当前服务器不是源服务器，也必须马上将结果返回给客户端\n\n#### 认证\n\n- Proxy-Authenticate 首部\n\n#### 兼容性\n\n为了保证代理的兼容性，代理对于不认识的首部，必须原样转发，并且首部的顺序，也不能随意修改\n\n### 网关\n\n网关服务器会将 HTTP 转化为其它协议进行通信，从而请求其它非 HTTP 服务器的服务\n\n### 隧道\n\n使用 SSL 等加密手段，在客户端和服务器之间建立一条安全的通信线路\n\n```mermaid\nsequenceDiagram\n  客户端->>隧道网关: CONNECT请求 CONNECT baidu.com:888 HTTP/1.0\n  隧道网关->>客户端: HTTP/1.0 407 Proxy authentication required\n  客户端->>隧道网关: CONNECT带上凭证\n  隧道网关->>baidu.com: 打开888端口连接\n  baidu.com->>隧道网关: 连接已建立\n  隧道网关->>客户端: 连接就绪 HTTP/1.0 Connection established\n  客户端->>隧道网关: 非HTTP流量\n  隧道网关->>baidu.com: 非HTTP流量\n  baidu.com->>隧道网关: 非HTTP流量\n  隧道网关->>客户端: 非HTTP流量\n```\n\n### 中继\n\n- 由于HTTP的连接管理，单纯的盲中继可能会出现连接管理上的问题\n\n```mermaid\nsequenceDiagram\n    客户端->>中继: 二进制流A\n    中继->>目标服务器: 二进制流A\n    目标服务器->>中继: 二进制流B\n    中继->>客户端: 二进制流B\n```\n\n## 重定向原理\n\n当服务端对客户端进行重定向时，会设置一个Location响应头，并将状态码设置为302\n\n客户端（浏览器）接收到这样的响应之后，就会跳转到Location里面的网址\n\n## HTTPS\n\n### HTTP的问题\n\n- 明文通信\n- 无法确认通信方\n- 无法验证报文完整性\n\n### 原理\n\n1. 客户端向服务端发送HTTPS请求\n2. 服务端收到HTTPS请求返回公钥证书\n3. 客户端收到服务端的公钥证书，验证是否有效（验证颁发机构、过期时间等等）\n4. 如果有效，生成一个随机数用公钥加密，然后发送给服务端\n5. 服务端使用私钥将该随机数解密，然后用该随机数作为密钥加密一串字符给客户端\n6. 如果客户端解密这串字符成功，这串字符将作为接下来客户端与服务端通信的密钥\n\n这个过程的关键在于密钥传递使用了非对称加密，数据传输采用了对称加密\n\n所以这就保证了对称加密的密钥不会通过网络直接传输，之所以数据传输采用了对称加密，主要是因为非对称加密性能很低\n\n#### SSL记录\n\n![屏幕截图 2022-06-13 210046](/assets/屏幕截图%202022-06-13%20210046.png)\n\n#### 握手\n\n在初始阶段会进行协商选择对称加密算法来进行加密会话密钥，同时为了防止中间人篡改选择的对称加密算法，客户端在服务端完成会话密钥的校验后，还需要发送所有握手报文的一个MAC，服务端再回送一个MAC\n\n#### 挥手\n\n基于SSL的加密不断单纯地发送一个FIN关闭底层TCP连接，这是因为可能会被中间人伪造一个FIN，从而破坏数据的完整性，而是需要通过SSL记录的类型字段来确定是否关闭\n\n### 证书\n\n通过使用 证书 来对通信方进行认证\n\n数字证书认证机构（CA，Certificate Authority）是客户端与服务器双方都可信赖的第三方机构\n\n服务器的运营人员向 CA 提出公开密钥的申请，CA 在判明提出申请者的身份之后，会对已申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，并将该公开密钥放入公开密钥证书后绑定在一起\n\n#### 证书信任链\n\n![20231018163340](/assets/20231018163340.webp)\n\nTLS 证书都有签名部分，这个签名就是用签发者的私钥加密的, 客户端的 Trust store 里就有这个 CA 的公钥（在 CA 证书里），会使用证书指定的散列算法计算出证书的散列值，然后用这个公钥去尝试解开签名，解开的结果如果跟散列值一样，就说明这张叶子证书确实是这个 CA 签发的。\n\n用 根证书的公钥 去 解密验证 上一层证书的合法性，再拿上一层证书的公钥去验证更上层证书的合法性；递归回溯。最后验证服务器端的证书是可信任的\n\n### 完整性保护\n\nSSL 提供报文摘要功能来进行完整性保护\n\nCA将用户的个人身份跟公开密钥链接在一起 可以防抵赖\n\n通过操作系统内置的证书 可以在不通过网络的情况下对证书进行认证\n\nTLS1.3 只允许前向加密（PFS）的密钥交换算法，主要是为了防止黑客取得了服务端私钥，并且抓取了历史上的 TLS 密文，那么就可以用这个私钥和抓包文件，把这些 TLS 会话的对称密钥给还原出来，前向加密算法每次的私钥都不一样\n\n### HTTPS的缺点\n\n- 加解密有性能损失\n- 证书授权需要高额费用\n\n### nginx配置证书\n\n```\n server {\n     ....  \n     ssl on;\n     ssl_certificate fullchain.pem;\n     ssl_certificate_key privkey.pem;\n }\n```\n\n## HTTP/2.0\n\n### HTTP/1.x缺陷\n\n- 使用多个连接提升性能\n- 没有压缩请求与响应\n- 不支持资源优先级\n\n### 二进制分帧\n\n![20203894642](/assets/20203894642.png)\n\n只会有一个TCP连接，一个连接会有任意数量的双向数据流\n\n一个数据流会有一个一个唯一的标识符，一个数据流可以承载一来一回双向信息\n\n消息是请求消息或者响应消息\n\n帧是最小的通信单位，不同数据流的帧可以交错发送，然后根据唯一标识符来重新组装\n\n![20203895038](/assets/20203895038.png)\n\n### 服务端推送\n\nHTTP/2.0 在客户端请求一个资源时，服务端会把相关的资源一起发送给客户端\n\n![20203895124](/assets/20203895124.png)\n\n### 首部压缩\n\nHTTP/2.0 要求客户端和服务器同时维护和更新一个包含之前见过的首部字段表，从而避免了重复传输\n\n![2020389543](/assets/2020389543.png)\n\n不仅如此，HTTP/2.0 也使用 [哈夫曼编码](/算法与数据结构/字符串.md#哈夫曼编码)对首部字段进行压缩\n\n## HTTP3\n\n![HTTP/2 和 HTTP/3 协议栈](/assets/20221019164625.webp)\n\n- QUIC 协议\n\n解决的问题：\n\n1. 连接迁移：当网络环境发生变化，如果还使用原来的 TCP 连接，则会导致连接失败，QUIC 的连接不受四元组的影响，使用一个 64 位的随机数作为 Connection ID来表示连接\n2. 零 RTT 建立连接\n3. 队头阻塞：UDP接收没有顺序，中间丢包也不会影响其他资源的处理\n4. 拥塞控制：相比TCP的拥塞控制，QUIC可以在客户端动态调整算法\n\n![零 RTT 建立连接](/assets/20221019165349.jpg)\n\n## GET与POST\n\nGET 用于获取资源，而 POST 用于传输实体主体。\n\n### 参数\n\nGET是通过URL携带参数的，而 POST 的参数存储在实体主体中\n\n### 安全\n\nGET语义来说是安全的，因为GET操作只是获取资源\n\n而POST的语义是不安全的，因为POST是上传数据\n\n### 幂等性\n\n幂等方法不应该具有副作用，所有的安全方法也都是幂等的\n\n在正确实现的条件下，GET，HEAD，PUT 和 DELETE 等方法都是幂等的\n\n### 可缓存\n\n一般来说GET和HEAD是可缓存的，PUT和DELETE不可缓存，POST在大多数情况下不可缓存\n\n## 跨域问题\n\n同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互，所以通常情况下一个源无法通过ajax与另外一个源进行交互\n\n![批注 2020-02-29 141744](/assets/批注%202020-02-29%20141744.png)\n\n### 解决方案\n\n- JSONP（缺陷很多）\n\n服务端将返回数据封装成js函数调用并返回，客户端js通过动态加载script标签加载服务器的js数据，加载完成后执行封装的js函数获取数据\n\n所以jsonp这种请求方式与ajax有着本质的不同\n\n- 被调服务端设置响应头允许跨域\n\n```java\nresponse.setHeader(\"Access-Control-Allow-Origin\",\"*\");\n```\n\n- 后端请求转发\n\n前端所在的服务端调用被调服务端，将结果返回给前端\n\n- nginx反向代理\n\n```\nserver {\n    listen 80;\n    server_name api.domain;\n    location /api1 {\n        proxy_pass http://outter_server;\n    }\n}\n```\n\n- 使用应用网关\n\n使可以通过一个统一入口访问各个项目\n\n## 传输链路优化\n\n前端会通过一些诸如精灵图、文件合并、请求合并的方式方法来降低HTTP请求数 又或者是HTTP1.1引入的Keep-Alive机制 使用一条连接来处理请求 但这就会导致请求被阻塞的问题\n\nHTTP2的出现很好地解决了这个问题 它将数据拆分为小端 并且使用id标识 在客户端进行组装，这样多个请求阻塞整条连接的情况出现的概率就比较小了\n\n另外一种优化方式是通过压缩 但一旦压缩 并且只使用一个连接 那如何判断内容以及传输完毕？使用分块编码 最后以一个长度值为0的分块来表示资源结束\n\n### 快速UDP网络连接\n\nQUIC的可靠传输能力并不是由底层协议提供的，而是完全由自己来实现\n\nQUIC的另一个设计目标是面向移动设备的专门支持，使用了一个标识符来处理由于移动网络断开重新连接的客户端识别问题\n\n## DASH\n\n基于HTTP的动态自适应流（英语：Dynamic Adaptive Streaming over HTTP，缩写DASH，也称MPEG-DASH）\n\n将内容分解成一系列小型的基于HTTP的文件片段，每个片段包含很短长度的可播放内容，而内容总长度可能长达数小时。内容将被制成多种比特率的备选片段，以提供多种比特率的版本供选用。当内容被DASH客户端回放时，客户端将根据当前网络条件自动选择下载和播放哪一个备选方案\n\n## CDN\n\n>CDN加速意思就是在用户和我们的服务器之间加一个缓存机制,动态获取IP地址根据地理位置，让用户到最近的服务器访问\n\n![屏幕截图 2020-09-27 113806](/assets/屏幕截图%202020-09-27%20113806.png)\n\n### 原理\n\n1) 用户向浏览器提供要访问的域名；\n\n2) **路由解析**：浏览器调用域名解析库对域名进行解析，由于CDN对域名解析过程进行了调整，所以解析函数库一般得到的是该域名对应的CNAME记录（CDN地址），为了得到实际IP地址，浏览器需要再次对获得的CNAME进行解析以得到实际的IP地址；在此过程中，使用的全局负载均衡DNS解析，如根据地理位置信息解析对应的IP地址，使得用户能就近访问；\n\n3) 此次解析得到CDN缓存服务器的IP地址，浏览器在得到实际的IP地址以后，向缓存服务器发出访问请求\n\n4) 缓存服务器根据浏览器提供的要访问的域名，通过Cache内部专用DNS解析得到此域名的实际IP地址，再由缓存服务器向此实际IP地址提交访问请求\n\n5) 缓存服务器从实际IP地址得得到内容以后，一方面在本地进行保存，以备以后使用，二方面把获取的数据返回给客户端，完成数据服务过程\n\n6) 客户端得到由缓存服务器返回的数据以后显示出来并完成整个浏览的数据请求过程\n\n### 路由解析\n\n```mermaid\nsequenceDiagram \n  浏览器 ->> 本地DNS: 查询网站CNAME\n  loop 递归查询 \n    本地DNS ->> 域名的权威DNS: 查询网站CNAME \n  end \n  域名的权威DNS -->> 本地DNS: 查询到CNAME: cname.xx\n  本地DNS -->> CNAME的权威DNS: 查询CNAME：cname.xx\n  loop 递归查询 \n    CNAME的权威DNS ->> CNAME的权威DNS: 经过递归查询和负载均衡，确定合适的CDN \n  end \n  CNAME的权威DNS -->> 本地DNS: 地址:xx.xx.xx.xx \n  本地DNS -->> 浏览器: 地址:xx.xx.xx.xx \n  浏览器 ->> CDN服务器: 请求 \n  CDN服务器 ->> 源站服务器: 请求 \n  源站服务器 -->> CDN服务器: 响应 \n  CDN服务器 -->> 浏览器: 缓存并响应\n```\n\n### 内容分发\n\n缓存节点中必须有用户想要请求的资源副本，那么这些节点资源时如何获取以及存储的？\n\n- 主动分发：也被称为预热，分发由源站主动发起，将内容从源站或者其他资源库推送到用户边缘的各个CDN缓存节点上 这种分发不仅可以从源站分发到CDN节点 甚至能提前分发到用户浏览器 降低高峰时期压力\n- 被动回源：CDN缓存节点发现自己没有该资源，就会实时从源站中获取\n\n对于资源的管理，一般分为主动失效与被动失效：\n\n- 被动失效：一段时间后资源过期，需要重新回源\n- 主动失效：某些事件强行使资源失效\n\n### CDN 动态加速\n\n![路径优化模式：通过动态的链路探测来寻找回源最好的一条路径](/assets/屏幕截图%202020-09-27%20114519.png)\n\n边缘计算的模式：数据的逻辑计算和存储的放在边缘的节点。定时从源数据同步数据，然后在边缘进行计算得到结果\n\n### CDN应用\n\n- 加速\n- 协议升级 源站http 对外https...\n- 访问控制 基础DDos防御\n- 修改资源 功能注入\n\n### CDN容灾\n\n- CDN一挂 业务就会受到极大影响甚至停摆\n\n![美团CDN容灾方案](/assets/2022114155034.png)\n![美团CDN容灾流程](/assets/20221141699.png)\n\n#### 目标\n\n- 终端CDN域名自动切换\n- CDN域名之间隔离\n- CDN监控\n- 不同的CDN持续热备\n\n#### 端侧实现\n\nWeb端实现：\n\n传统的标签资源如css img等通过监听失败回调实现\n\n而js脚本则需要统一使用动态加载的方式\n\nNative端实现：\n\n- 适配多种http框架\n- 使用统一拦截\n\n域名动态计算：\n\n域名A -> 请求失败 -> 域名B -> 请求失败 -> 域名C\n\n## PCDN\n\n> 在CDN产品的基础上融合新一代P2P技术，充分利用边缘网络海量碎片化的计算、存储、网络等闲置资源\n\n对于诸如热门视频之类的文件，开头部分从CDN上获取，后续的数据跟其他用户进行P2P互相传输\n\n\n## RESTful\n\n一套关于设计请求的规范，本质上谈不上规范，更多的是一种风格\n\n- 资源：代表一个抽象实体\n- 表征（表现层）：资源的表现形式\n- 状态：在特定上下文下产生的信息\n- 转移：状态发生了变化\n- 超文本驱动：通过服务端返回的超文本来决定客户端行为\n\n>URI代表一种资源、客户端与服务器，传递资源的某种表现层、客户端通过HTTP动词，对服务器资源进行操作\n\nGET：      获取数据\nPOST：    添加数据\nPUT：      更新数据\nDELETE： 删除数据\n\n### 常见错误\n\n- URI包含动词\n- URI包含版本\n\n### 范例\n\n请求方式    | URL                              | 含义\n------- | -------------------------------- | -------------\nGET：    | <http://www.example.com/users>   | 获取用户列表数据\nPOST：   | <http://www.example.com/users>   | 创建(添加)用户数据\nGET：    | <http://www.example.com/users/1> | 获取用户ID为1的用户信息\nPUT：    | <http://www.example.com/users/1> | 修改用户ID为1的用户信息\nDELETE： | <http://www.example.com/users/1> | 删除用户ID为1的用户信息\n\n### RESTful的系统\n\n1. 服务端与客户端分离\n2. 无状态\n3. 可缓存\n4. 分层系统\n5. 统一接口\n6. 按需代码\n\n#### REST风格的好处\n\n1. 降低服务接口的学习成本\n2. 资源之间有天然的集合或者层次结构\n\n#### RMM成熟度\n\n- 0：每个请求都指明了需要执行的操作和必要的参数\n- 1：引入了资源的概念，对资源进行操作\n- 2：使用HTTP动词来执行操作\n- 3：基于HAEOAS，超文本驱动，客户端无需硬编码REST链接。让客户端自行遍历与发现API，可以很好地隐藏低层细节，使得客户端与服务端之间实现了松耦合\n\n#### 不足\n\n- 面向资源（也就是REST）更适合做CRUD，面向过程面向对象才能表达更加复杂的逻辑\n- REST绑定HTTP 既是优点，同时也是缺点，不适合用于高性能的场景\n- REST本身没有传输可靠性支持 需要自己做好幂等性处理\n- REST缺乏对资源进行“部分”和“批量”的处理能力\n\n","metadata":"tags: ['计算机网络']\nbooks: [\n  {name: '计算机网络:自顶向下方法'}\n]\nlinks: [\n  'https://icyfenix.cn/architect-perspective/general-architecture/diversion-system/cdn.html'\n]","hasMoreCommit":true,"totalCommits":33,"commitList":[{"date":"2024-11-25T14:06:28+08:00","author":"MY","message":"📦微服务","hash":"984b0cab1bfa9822163a0947a83e9fea875c581a"},{"date":"2024-11-21T19:38:10+08:00","author":"MY","message":"📦流控 & 缓存","hash":"ec18717ffca6c3c8867ce0cf6bbbeff241c19ff8"},{"date":"2024-11-08T16:23:39+08:00","author":"MY","message":"📦计算机网络应用层","hash":"db36530812209177b6a87243dfa274d323a73e82"},{"date":"2024-03-21T19:45:57+08:00","author":"MY","message":"✏Web安全","hash":"d5c0aa6eadac2e53bacd73205dd89ba17c5ed2f8"},{"date":"2023-10-18T16:50:26+08:00","author":"MY","message":"✏HTTP","hash":"0bb35cef1e81c867b90c05c4972a25304df76c45"},{"date":"2023-05-24T16:54:09+08:00","author":"MY","message":"✏计算机网络","hash":"af01305acc7b161960289554184c9a8ebf2c950b"},{"date":"2023-04-21T09:56:47+08:00","author":"MY","message":"📦HTTP","hash":"42bb3b29d1620f03a041d2f4556e2e11a87bd091"},{"date":"2022-10-19T17:24:50+08:00","author":"cjiping","message":"✏️HTTP","hash":"a93716aa9118cb2b1b732265cd8199dd72ceba22"},{"date":"2022-08-12T17:43:46+08:00","author":"cjiping","message":"✏️HTTPS","hash":"392390c40ee812cf6067b58f86580730962fb67e"},{"date":"2022-08-03T16:27:14+08:00","author":"cjiping","message":"✏️keep alive","hash":"fd78740ab0fbade2857fdfe23431db776b73807a"}],"createTime":"2019-08-09T12:14:53+08:00"}