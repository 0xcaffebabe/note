{"name":"反爬虫","id":"计算机网络-http-爬虫-反爬虫","content":"# 反爬虫\n\n- 反爬不仅单单是技术上的，还是法律上的、商业上的\n\n## 接口定制化反爬\n\n对于目的明确的爬虫，只访问特定的接口，这种特征意味着反爬方可以通过针对特定IP进行接口限流来防御\n\n但爬方可以通过访问其他接口来伪装，同时可以上代理服务器突破单个IP阈值\n\n最后，由于NAT的存在，这种方式可能会误杀正常用户\n\n### 数据投毒\n\n明确对方爬数据的意图，返回造成其无法达成目的、利于自身的假数据\n\n### 随机来回\n\n对于数据下毒混淆，对于识别出爬虫的客户端使用随机的策略来避免爬虫方通过数据的整体统计出正确值\n\n爬虫方此时若想跳出与反爬方一来一回的结局识别出假数据，只能通过更深的伪装，将伪装成真正的用户请求的数据与假数据比对来发现出假数据\n\n但一来一回，随着反爬措施升级，势必会误伤真实用户\n\n## 字体反爬\n\n- 使用自制字体将一个加密的结果映射为真实的结果\n\n这种方式对于网络有较高要求，在弱网环境下不仅会误伤真实用户，反爬效率也不高，当误杀真实用户时，甚至有陷入舆论风波的危险\n\n## 浏览器模拟反爬\n\n当爬虫直接使用模拟浏览器爬数据，通过canvas指纹、dom指纹，本质都是识别请求特征，对于这种特征的请求统统封杀\n\n更疯狂的可以故意拖慢浏览器性能，降低爬虫爬的量，只是苦了用户\n\n## 验证码反爬\n\n简单的字符验证码防不住OCR，复杂的验证码可以接入打码平台，而且愈复杂的验证码愈影响用户体验\n\n## 网络攻防反爬\n\n有些使用前端加密的反爬都有一段核心加密代码，这段代码在浏览器可以直接获取到，如果爬虫想模拟请求，可能会尝试执行摘下来这段代码在本地去执行从而去模拟加密发起请求，如果这段代码包含恶意分支，那么可以直接对爬虫的本地环境发起攻击，无论是格盘、还是什么恐怖的操作\n\n进行到这一步，就是从反爬转守为攻，可以是社工、可以是悄悄潜伏\n\n## 爬虫行为\n\n### 协议\n\n- HTTP 应用层的协议 基础平台都提供了支持\n- TCP 除了解决HTTP类库的细节封装问题 对于移动端软件 需要分析自由协议\n- FTP\n\n### 抓取\n\n- 定时 \n- 实时 对于有热点的数据 实时爬取这些 很容易造成本系统的核心数据外泄给反爬方 \n\n### 解析验证\n\n反爬方可以返回不标准的标签但浏览器可以识别的标签来干扰爬虫的解析\n\n此时直接使用浏览器的DOM解析虽然可以规避，但是效率很低\n\n而为了验证是不是假数据，通过机器进行交叉验证，也就说对比其多个端的接口看是否一致，也可以进行人工抽检，当发现假数据，应将本批数据全部作废\n\n## 爬虫检测\n\n### 网络层检测\n\n这一层一般就是对检测出属于爬虫的IP或者IP段进行封锁\n\n需要配合白名单机制防止误伤\n\n通过WHOIS识别出对方是不是公有云，或者进行端口扫描其有没有开放的端口，总之不属于正常用户的特征统统封杀\n\n### 应用层检测\n\n学习并聚合非爬虫的HTTP请求特征，爬虫很难一直模仿正常的浏览器\n\n像是请求头\n\n### 浏览器特征检测\n\n以DOM指纹为代表的技术就是通过发现爬虫渲染的DOM特征与正常用户的DOM特征不一样来检测\n\n具体的操作过程，其实就是从 Window 开始往下拉一棵树，循环引用跳掉，最终得到的 DOM 结构\n\n### 业务特征检测\n\n爬虫跟正常用户总是拥有不一样的行为，利用业务流程的特性，发现爬虫\n\n## 分布式爬虫\n\n分布式不仅可以使用更多的IP资源进行伪装 同时进行异构分布式也能使爬虫很好伪装自己 提升可用性\n\n## 爬虫的法律问题\n\n- 侵权\n- 破坏计算机系统\n- 侵犯个人隐私\n\n## 爬虫到道德问题\n\n- 降低对方站点压力\n- 不得牺牲用户体验\n\n## 后端反爬\n\n### 特征检测模块\n\n- 在线检测 针对近期的流量做样本，合并做一个集合。在集合中取特征平均值，最后拿当前流量做比较就可以了。如果后续单个流量过来后，特征不符合统计分布，那么这个流量就是有问题的\n- 离线检测 流量放到线下，抽时间慢慢算，算好了给线上用就可以了\n- 混合检测 在线检测的问题是对于生产的压力有点大，对于实时性高的规则，可以使用在线检测，对于低的则可以在业务低谷利用空闲服务器来计算\n\n### key生成\n\n某些操作总是需要前端向后端传递一个特殊看似随机的key的 为了防爬虫 这个key要如何生成？\n\n一个很重要的点就是需要引入随机跟混淆 随机又不能真随机 否则后端无法校验\n\n这点跟一些接口使用签名的方式是一样的\n\n```js\nvar left = md5(sku+current_hour+fingerprint(http-header))// 32位\nvar right = md5(random())// 取一个随机值，并md5掉，用于混淆key\nvar result = xor(left, right)+right// 两个key异或作为新key的left，right不变。\n```\n\n为了更加变态的反爬，可以通过后端下发预定义的n个加密策略，随机组合来进行加密\n\n但是这些加密策略最终也是要在前端变成js代码执行的，如何保护代码：\n\n- 变量名混淆 主要是为了降低可读性\n- eval\n- js实现解释虚拟机\n\n### 随机\n\n对于后端反爬，不做百分百封杀 而是通过返回小部分假数据的方式 只要存在一定假数据 对方爬取的这批数据就无法真正地敢用在生产环境\n\n### 效果检测\n\n- 误伤率：对于检测出爬虫的客户端 使用Cookie标记出来 在只有用户才可能访问的页面看能不能拿到 Cookie 中的内容来计算，在这里Cookie存放的信息也需要加密\n- 爬虫熔断：当发现误伤过高 赶紧关掉爬虫检测\n\n#### 快速下线\n\n在设计爬虫检测拦截时，降低反爬虫系统的入侵性，减少与业务代码的耦合，是反爬虫代码的重中之重\n\n```mermaid\nstateDiagram-v2\n  客户端 --> SLB\n  SLB --> 应用层\n  SLB --> 规则引擎\n  规则引擎 --> 应用层\n  应用层 --> 反爬SDK\n  反爬SDK --> 规则引擎\n  反爬SDK --> 业务层\n```\n\n## 前端反爬\n\n### 信息收集\n\n为了收集足够多的信息来对抗爬虫，需要注意的有：\n\n- 这些信息最终应该计算成指纹 避免明文被反攻\n- 指纹计算应该加入盐\n","metadata":"","hasMoreCommit":false,"totalCommits":5,"commitList":[{"date":"2024-11-08T16:23:39+08:00","author":"MY","message":"📦计算机网络应用层","hash":"db36530812209177b6a87243dfa274d323a73e82"},{"date":"2022-06-01T12:36:07+08:00","author":"cjiping","message":"✏️更新 反爬虫","hash":"f9998deaeee82d484a2417b277a714f8676542e8"},{"date":"2022-05-31T21:33:34+08:00","author":"MY","message":"✏️更新 反爬虫","hash":"baf95ab3e0901783621f8aec655680cd543529dd"},{"date":"2022-05-31T18:20:53+08:00","author":"cjiping","message":"✏️更新 反爬虫","hash":"e3aed6baf7c139db006d214cebb6103e815f5247"},{"date":"2022-05-30T21:47:18+08:00","author":"MY","message":"➕新增 反爬虫","hash":"dcd6e2734f84340b6bd2ada94f724449c7090dd1"}],"createTime":"2022-05-30T21:47:18+08:00"}