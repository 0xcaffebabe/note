{"name":"网络协议安全","id":"计算机网络-网络安全-网络协议安全","content":"# 网络协议安全\n\n## ARP\n\n- ARP窃听\n  - 从ARP的协议过程来看，ARP请求消息将通过交换机或集线器以广播形式进行发送，因此网络上所有主机均可以收到ARP请求消息\n- ARP欺骗\n  - 如果某个ARP消息中的IP-MAC对是不真实的，则造成ARP欺骗攻击（ARP Spoofing），或称为ARP污染攻击（ARP Poisoning）\n- GARP滥用攻击\n  - 者利用GARP技术，主动发送虚假的GARP请求消息（即伪造的IP地址和MAC地址的映射）\n\n### 防御\n\n- 采用静态绑定的方式防止ARP欺骗\n  - 手工绑定IP-MAC映射\n- 采用ARP代理服务器\n  - 以引入可信的ARP代理服务器（Proxy ARP），对本网络中或跨网段的ARP请求提供服务\n- 在网络设备上对ARP消息进行检测和控制\n- 禁用GARP功能\n\n## IP\n\n- IP窃听\n\nIP协议在传输过程中没有加密\n\n- IP地址假冒攻击\n\n任意节点均可以构造IP分组\n\n- IP碎片攻击\n\n攻击者可以利用IP协议的拆包合包，将IP包切分为非常小的碎片，然后发送给被攻击目标\n\n### 防御\n\n- 入口过滤\n\n过滤掉进来的非法IP地址的分组\n\n- 出口过滤\n\n过滤掉发出去的非法IP地址的分组\n\n- IP回溯\n\n追踪IP分组的路径\n\n## TCP\n\n- SYN泛洪攻击（SYN Flooding）\n\n这是一种利用TCP协议缺陷，发送大量伪造的TCP连接请求，使被攻击方资源耗尽(CPU满负荷或内存不足)的攻击方式\n\n![批注 2020-06-04 094929](/assets/批注%202020-06-04%20094929.png)\n\n- ACK泛洪攻击（ACK Flooding）-随机IP \n\n![批注 2020-06-04 095019](/assets/批注%202020-06-04%20095019.png)\n\n- ACK泛洪攻击（ACK Flooding）-伪造IP\n\n![批注 2020-06-04 095111](/assets/批注%202020-06-04%20095111.png)\n\n- 序列号预测攻击\n\n![批注 2020-06-04 095215](/assets/批注%202020-06-04%20095215.png)\n\n- LAND攻击\n\n![批注 2020-06-04 095306](/assets/批注%202020-06-04%20095306.png)\n\n## UDP\n\n- 假冒\n\n![批注 2020-06-04 095801](/assets/批注%202020-06-04%20095801.png)\n\n- 劫持\n\n![批注 2020-06-04 095820](/assets/批注%202020-06-04%20095820.png)\n\n- 泛洪\n\n![批注 2020-06-04 095836](/assets/批注%202020-06-04%20095836.png)\n\n## 安全协议技术\n\n安全协议是在消息交换和处理过程中使用了若干密码算法的协议\n\n\n- 按目的\n  - 密钥交换协议\n  - 认证协议\n  - 电子商务协议\n- 按参与者\n  - 仲裁协议\n    - 借助于一个称之为仲裁者的可信第三方（Trusted Third Party）来完成消息交换\n  - 裁决协议\n    - 裁决人必须是协议主体均信赖的可信第三方，但是它不需要参与协议的整个过程，只有当协议中出现争议之后，裁决人才参与到协议中来\n  - 自动执行协议\n    - 议不需要任何第三方（如仲裁者和裁决者）的参与，在协议主体之间完成协议过程\n\n### 安全协议缺陷\n\n#### 攻击者模型\n\n攻击者可以以各种方式来获取到协议主体之间的通信信息，Dolev-Yao 攻击者模型假设攻击者具有的能力：\n\n1. 截获并延迟消息的发送\n2. 截获并重新发送消息到任意接收者\n3. 截获并修改消息，并可转发给任意接收者\n4. 可以产生新的消息(包括新鲜的消息)\n5. 可以对消息进行分离\n6. 可以对多个消息进行组合\n7. 知道密钥后可解密消息和重新加密消息\n8. 可以查看和掌握协议相关的公用信息\n\n由于存在攻击者，因此设计一个安全的协议是非常困难的\n\n#### 常见缺陷\n\n- 基本协议缺陷：协议中没有或者很少考虑对攻击者的防范而引发的协议缺陷（如TCP/IP协议的安全缺陷问题等）\n- 陈旧消息缺陷：在协议设计过程中，未考虑消息的时效性（即新鲜性），从而使得攻击者可以利用协议过程中产生的过时消息来对协议进行重放攻击\n- 并行会话缺陷：协议设计对仅考虑单个协议执行的情况，对多个协议（或同一个协议的多个运行实例）并行会话缺乏考虑，使得攻击者可以相互交换适当的协议消息来获得更为重要的消息\n- 内部协议缺陷：协议中缺少足够的信息让协议参与者能够区分消息的真实性而导致缺陷\n- 密码系统缺陷：协议中使用的密码算法的安全强度问题导致协议缺陷\n\n### 中间人攻击\n\n攻击者位于协议通信双方中间而发动的攻击\n\n### 重放攻击\n\n指攻击者利用其消息再生能力生成诚实用户所期望的消息格式，并重新发送，从而达到破坏协议安全性的目的\n\n- 协议轮内攻击\n- 协议轮外攻击\n\n#### 对策\n\n- 挑战应答机制\n  - 挑战者能够通过他自己输入消息的新鲜性来验证应答者通信的真实性\n\n```mermaid\nsequenceDiagram\n  participant Alice as Alice(挑战者)\n  participant Bob as Bob(应答者)\n  Alice->>Bob: 这是包含新鲜随机数(Nonce)的挑战\n  Bob->>Alice: 这是对该新鲜随机数(Nonce)进行变换后的应答\n```\n\n- 时间戳机制\n  - 指发送者在消息中嵌入发送消息的本地时刻，而接收者在消息达到后，通过对比消息中所包含的时间信息和本地时间信息的差值，来决定该消息是否为新鲜消息\n\n```mermaid\nsequenceDiagram\n  Alice ->> Bob: 这是包含时间戳的消息\n  Bob ->> Alice: 这是对时间戳进行变换后的消息\n```\n\n- 序列号机制\n  - 协议主体之间首先协商一个一致的初始序列号协议过程中每条协议消息均带上序列号，每条消息的序列号必须进行保护\n\n### 交错攻击\n\n### 平行会话攻击\n\n### 反射攻击\n\n当一个诚实的主体给某个意定的通信方发送消息时，攻击者截获该消息，并将该消息返回给消息的发送者\n\n### 类型错误攻击\n\n攻击者欺骗某个主体，使得他把一次性随机数、时戳或者身份等信息嵌入到某个密钥中去，从而导致协议安全性被破坏\n\n### 姓名遗漏攻击\n\n如果与消息相关的主体的名字不能从消息中推断出来，则攻击者利用此缺陷所发动的攻击称之为“归因与姓名遗漏攻击”\n\n### 安全协议设计原则\n\n- 消息独立性原则\n  - 即消息的含义应该是一目了然，且消息含义的翻译直接通过该消息就可以完成\n- 消息前提准确原则\n  - 消息所依赖的条件必须明确地定义出来，从而使得协议的评价者知道这些条件是否可以接受。\n- 协议主体身份标识原则\n  - 如果协议主体的身份对于理解消息的含义是必须的，那么协议主体身份就应该在消息中明确地标识出来\n- 加密目的明确原则\n  - 必须使用加密，则必须明确加密在协议安全中的作用和目的\n- 签名原则\n  - 如果在一个安全协议中需要同时进行加密和签名，一般的原则是先加密后签名\n- 随机数使用原则\n  - 对抗重放攻击，还是用来绑定时间上邻接的两条消息\n","metadata":"","hasMoreCommit":false,"totalCommits":4,"commitList":[{"date":"2024-11-12T18:27:42+08:00","author":"MY","message":"📦网络安全","hash":"db44b92d02443bd3bd78d520b9daaa427d4010f4"},{"date":"2022-03-10T14:44:34+08:00","author":"cjiping","message":"📦整理 网络安全","hash":"0627c76525382c476b79af5063e287699dfd8be6"},{"date":"2020-06-04T10:24:31+08:00","author":"MY","message":"更新 网络协议安全","hash":"563c265e86daeac5b5f8527263a3dcb874a7e9a3"},{"date":"2020-06-03T10:30:34+08:00","author":"MY","message":"更新 网络安全 arp","hash":"3145ca46009a623afcdb152de95bb722bfc11786"}],"createTime":"2020-06-03T10:30:34+08:00"}