{"name":"网络层","id":"计算机网络-网络层","content":"# 网络层\n\n网络层是整个互联网的核心，因此应当让网络层尽可能简单。网络层向上只提供简单灵活的、无连接的、尽最大努力交互的数据报服务\n\nIP协议可以将异构的物理网络连接起来，看起来就像是一个统一的网络\n\n- 数据平面：控制数据报从路由器输入链路转发到输出链路\n- 控制平面：控制数据在端到端之间的路由方式，有手动配置路由表或由软件定义的方式来实现\n\n## 路由器工作原理\n\n![路由器结构](/assets/202036111917.jpg)\n\n### 分组转发流程\n\n![202036112047](/assets/202036112047.jpg)\n\n### 输入\n\n- 线路链接\n- 对数据报进行拆封\n- 查找转发排队\n\n路由器通过IP的前缀来确定数据包的转发目的地，当前缀存在重叠时，使用最长前缀\n\n这里路由器还会对数据包进行一些必要的检查，还会重写TTL和校验和\n\n### 交换\n\n- 通过内存转发\n- 通过总线转发\n- 通过互联网络转发\n\n![屏幕截图 2022-06-09 195400](/assets/屏幕截图%202022-06-09%20195400.png)\n\n前两种在同一时刻内只有一个分组能被处理，最后一种如果输出端口不同，则能并行转发\n\n### 分组调度\n\n- 先进先出\n- 优先权排队\n  - 即分为两个队列，一个优先级较高，较高优先级的队列如果有分组，则立马处理\n- 循环和加权公平排队\n  - 优先级队列不固定，在各个队列之间的轮流\n\n### ECMP\n\n- equal-cost multi-path\n\n可以让路由器同时使用多条链路，一方面极大地提升了网络带宽，而另一方面也带来了新的挑战，也就是网络路径的数量上升了一个数量级，排错的复杂度也明显上升\n\n![2022816153835](/assets/2022816153835.webp)\n\n## 网际协议\n\n### IPV4数据报格式\n\n```mermaid\n---\ntitle: IPV4数据报格式\n---\npacket-beta\n  0-4: \"版本号\"\n  5-8: \"首部长度\"\n  9-16: \"区分服务\"\n  17-31: \"总长度\"\n  32-48: \"标识\"\n  49-52: \"标志\"\n  53-63: \"片偏移\"\n  64-72: \"生存时间\"\n  73-80: \"协议\"\n  81-95: \"首部检验和\"\n  96-127: \"源IP地址\"\n  128-159: \"目的IP地址\"\n  160-191: \"选项与填充(可变长度)\"\n  192-255: \"数据部分(可变长度)\"\n```\n\n- 版本号 固定为4\n- 首部长度 用来确定载荷开始的偏移量\n- 区分服务 分离实时流量与非实时流量\n- 总长度 IP数据报的总长度 理论最大为65535字节 由于链路层的限制 一般不会超过1500\n- 标识 标志 片偏移 用来处理数据分片的情况\n- 生存时间 数据报每经过一台路由器 改值会被减1 当为0时会被丢弃 主要是为了防止在网络中循环\n- 协议 6代表TCP 17代表UDP\n- 首部校验和 将首部里的每2个字节当做一个数 使用反码算术进行求和\n- 源和目的地址 也就是32位的IP地址\n\n### 分片\n\n由于某些链路的帧可承载的字节比某些链路更小，故在路由器会将数据载荷分为几个部分，后一一发送，并把组装数据的任务交给接收端\n\n![202036105520](/assets/202036105520.png)\n\n### IPV4编址\n\n#### 分类\n\n由两部分组成，网络号和主机号，其中不同分类具有不同的网络号长度，并且是固定的\n\n![ABC为有分类寻址编址, 网络号长度是固定的](/assets/20203610578.png)\n\n#### 子网划分\n\n通过在主机号字段中拿一部分作为子网号，把两级 IP 地址划分为三级 IP 地址\n\n#### 无分类\n\nCIDR 的记法上采用在 IP 地址后面加上网络前缀长度的方法，例如 128.14.35.7/20 表示前 20 位为网络前缀\n\n通过使用网络前缀来减少路由表项的方式称为路由聚合，也称为 构成超网\n\n### 网络地址转换NAT\n\n![202036111610](/assets/202036111610.png)\n\n### IPV6\n\n```mermaid\n---\ntitle: IPv6数据报格式\n---\npacket-beta\n  0-3: \"版本号\"\n  4-11: \"流量类别\"\n  12-31: \"流标签\"\n  32-47: \"有效载荷长度\"\n  48-55: \"下一个头部\"\n  56-63: \"跳数限制\"\n  64-191: \"源地址\"\n  192-319: \"目的地址\"\n  320-383: \"扩展头部和数据部分(可变长度)\"\n\n```\n\n相比于IPV4:\n\n- 更大的地址空间\n- 简洁高效的首部\n- 使用流标签标志流数据（语音流、视频流）\n- 不允许在路由器进行分片与组装\n- 去除了首部校验和\n- 去除了选项\n\n![IPV4到IPV6之间的过渡：建隧道](/assets/202269203741.png)\n\n## 路由选择算法\n\n- 集中式与分散式\n  - 迪杰斯特拉算法得出最短路径 必须要有整个网络的全局状态信息\n  - 距离向量算法 局部最优\n- 静态路由与动态路由\n  - 手工编辑\n  - 随网络流量变化而更改路由策略\n- 负载敏感与负载迟钝\n  - 对于网络拥塞会做出反应与否\n\n### 内部网关协议RIP\n\nRIP 按固定的时间间隔仅和相邻路由器交换自己的路由表，经过若干次交换之后，所有路由器最终会知道到达本自治系统中任何一个网络的最短距离和下一跳路由器地址\n\n#### 距离向量算法\n\n- 只存储距离信息没有拓扑信息\n\n![距离向量算法](/assets/202271015542.webp)\n\n每个节点都会不断地从邻居那里获得最新的距离信息，然后尝试更新自己的距离矩阵，如果发现自己的距离矩阵有变化，才会通知邻居\n\n但这个算法如果没有做跳数限制，由于没有路由拓扑信息，当某个链路断掉后，无法扩散出去，会造成路由环路，无限计算\n\n### 内部网关协议OSPF\n\n自治系统内部的路由选择，路由器会周期性或者当链路发生变化时向系统内的所有路由器广播路由选择信息，这样每台路由器都有整个自治系统的完整链路图\n\n- 集中式算法，使用[Dijkstra算法](/算法与数据结构/图.md#Dijkstra算法)\n\n#### 链路状态算法\n\n1. 发现节点\n\n直接向网络广播一条hello消息，我们称为hello包。所有能直接收到这条消息的一定都是一跳的邻居\n\n2. 测量链路成本\n\n每个节点只需要统计一下自己从发出 echo 到收到 echo 的时间差，就可以用它来估计和邻居之间的网络传输时延\n\n3. 封装链路状态包\n\n把每个节点已知的信息封装成一个数据包，本机 ID、序号、生存期、邻居｜成本，使用序号是为了防止网络阻塞导致老数据比新数据还晚到达\n\n4. 泛洪广播当链路状态包\n\n每个节点都会把自己封装好的包和收到的包，发送或转发给所有除了该包发送方的节点，逐渐扩散，像[Goossip协议](/软件工程/架构/系统设计/分布式/分布式共识算法.md#Goossip协议)\n\n广播的时机：\n\n- 定时的周期，如30s\n- 节点上下线，网络变化\n\n使用这样的算法可以达到动态变化网络拓扑，提升网络的利用率，避免拥塞\n\n\n### 外部网关协议BGP\n\n![202036112459](/assets/202036112459.png)\n\n除了是自治系统之间的路由选择协议，BGP还能被用于IP任播：就像IP地址为8.8.8.8的DNS服务器，访问它时并不会真的通过这个IP找到一台物理唯一的服务器，而是通过路由选择在附近找到一台自称是这个IP的DNS服务器\n\n## SDN\n\n> 软件定义网络（Software Defined Network，SDN）是由美国斯坦福大学CLean State课题研究组提出的一种新型网络创新架构，是网络虚拟化的一种实现方式。其核心技术OpenFlow通过将网络设备的控制面与数据面分离开来，从而实现了网络流量的灵活控制，使网络作为管道变得更加智能，为核心网络及应用的创新提供了良好的平台\n\n跨越层次，功能更加强大的转发，不仅可以选择丢弃、复制、转发到特定端口，也就是拥有可被编程的能力，\n\n[ServiceMesh](/软件工程/微服务/ServiceMesh/ServiceMesh.md)是SDN在应用层的扩展\n\n![屏幕截图 2022-06-10 110611](/assets/屏幕截图%202022-06-10%20110611.png)\n\n![架构](/assets/屏幕截图%202022-06-10%20113154.png)\n\n### 特征\n\n- 基于流的转发 横跨多个协议层 能获取到的信息更多\n- 数据平面与控制平面分离\n- 网络控制\n- 南向接口与北向接口使得网络可编程\n\n### 实现\n\n![](/assets/2023525113538.webp)\n\n![](/assets/2023525113638.webp)\n\n## ICMP\n\n```mermaid\n---\ntitle: ICMP报文格式\n---\npacket-beta\n  0-8: \"类型\"\n  9-15: \"代码\"\n  16-31: \"校验和\"\n  32-63: \"标识(取决于ICMP报文的类型)\"\n  64-127: \"ICMP的数据部分(长度取决于类型)\"\n```\n\n- 差错报告 如路由器发现某个主机不可达时 就会回送一个错误报文给源主机\n- 询问报文 如ping就是发送一个echo报文 主机收到这个报文再回送一个echo\n- 源抑制报文 很少使用 路由器发送一条报文来要求某一主机降低发送速率 拥塞控制在[运输层](/计算机网络/运输层.md)已经做了而且做的更好\n\nICMP报文种类|类型值|ICMP报文类型\n---|---|---\n差错报告报文|3|终点不可达\n差错报告报文|11|超时\n差错报告报文|12|参数问题\n差错报告报文|5|改变路由(Redirect)\n询问报文|8或0|回送请求或回答\n询问报文|13或14|时间戳请求或回答\n\n### traceroute\n\n发送的 IP 数据报封装的是无法交付的 UDP 用户数据报，并由目的主机发送终点不可达差错报告报文\n\n当TTL为0时，路由器将不会继续转发报文，traceroute通过第一次将TTL设为1，然后把报文发送给下一台路由器，路由器将ttl-1之后告诉主机报文不可达，这样以此类推得到整个路由链路\n\n## SNMP\n\n简单网络管理协议, 一般使用UDP，所以会出现不可靠的问题，所以必须要安全幂等地重试\n\n使用的请求响应模型，跟HTTP一样\n\n## 虚拟专用网VPN\n\n![20203611147](/assets/20203611147.jpg)\n\n### IPSec\n\n在网络层提供的了CIA保障\n\n![客户端发送的明文的 IP 包，都会被加上 ESP 头和 IP 头，在公网上传输](/assets/202352317925.webp)\n\n多协议标签交换（MPLS，Multi-Protocol Label Switching）：在原始的 IP 头之外，多了 MPLS 的头，支持这个头的路由器，就可以采取跟传统IP层不同的转发策略，提高转发效率\n","metadata":"tags: ['计算机网络']\nbooks: [\n  {name: '计算机网络:自顶向下方法'}\n]","hasMoreCommit":true,"totalCommits":11,"commitList":[{"date":"2024-11-12T14:25:11+08:00","author":"MY","message":"📦计算机网络","hash":"1ce5935bd6b1e4411336dcbbe6fb19ef37f59a22"},{"date":"2023-05-25T16:41:11+08:00","author":"MY","message":"✏计算机网络","hash":"9fa90391b4921ad8f18525bfe368c17388ae7582"},{"date":"2023-05-23T17:26:34+08:00","author":"MY","message":"✏计算机网络","hash":"3b4ce4e0592ec2485ab9ff276a35a56c7ef3400b"},{"date":"2022-08-16T15:55:47+08:00","author":"cjiping","message":"✏️计网","hash":"80defab3e4e06f348f8e315048f75fd194c4135a"},{"date":"2022-07-10T16:05:00+08:00","author":"MY","message":"✏️更新 计算机网络算法","hash":"61bd4c9bf67fd790d9670c1a59424404f6ee214c"},{"date":"2022-06-13T21:25:34+08:00","author":"MY","message":"✏️更新 网络安全相关","hash":"b63f8d14136140a18b8f72fbe7e5aad417ff0328"},{"date":"2022-06-10T14:40:52+08:00","author":"MY","message":"✏️更新 网络层","hash":"0c15327c2489b95903ad0d8d9a30805ddd13d1ae"},{"date":"2022-06-09T20:47:24+08:00","author":"MY","message":"✏️更新 计算机网络","hash":"7516992a8ff093d5aa9423860fd6db89bb8f04e4"},{"date":"2020-03-06T11:26:06+08:00","author":"MY","message":"更新 计算机网络 链路层 网络层","hash":"157864541040bcbb285c0de88e281aaa689d8594"},{"date":"2019-11-01T19:24:57+08:00","author":"MY","message":"暂时完结计算机网络","hash":"c92b52aea076cd82a127e383344ec42b50bd4363"}],"createTime":"2019-10-28T10:59:37+08:00"}