{"name":"容量保障","id":"软件工程-容量保障","content":"# 容量保障\n\n- 容量规划：以尽可能小的成本确保系统当前和未来的容量充足\n- 容量治理：解决已知的容量问题，预防未知的容量问题\n\n## 容量管理\n\n![](/assets/202492194154.webp)\n\n容量水位：\n  - 业务容量水位：指的是系统中业务负载与业务容量之间的比率，计算公式为：业务容量水位 = 当前承载的请求量（事务量）/ 能承载的最大请求量（事务量） * 100%。这一指标主要衡量整个服务链路的流量，从用户接入到后端数据库。\n  - 资源容量水位：指的是系统中具体资源的使用情况，计算公式为：资源容量水位 = 当前消耗的资源量 / 总体可用的资源量 * 100%。这一指标关注的是CPU、内存、I/O等资源的使用情况，以识别潜在的资源瓶颈。\n\n容量观测：\n\n系统容量的实时监控和长期趋势预测。通过实时的容量监控大盘和定期的容量巡检，可以密切关注系统的水位状态和关键性能指标，及时发现并处理如性能退化和流量上升等问题。此外，容量管理平台和压测平台也是容量观测的重要工具，分别用于数据累积、管理和系统压测\n\n容量分析：\n\n评估当前资源是否满足需求、制定资源补充策略以及确定资源补充的时间节点。这一过程需要结合动态规划和最优化理论等数学模型，深入分析系统的服务特性，构建服务画像，并基于这些分析来制定精准的资源补充计划\n\n容量处置：\n\n指在系统容量不足时采取的应对策略，包括增加资源、内部调度、限流丢弃、功能降级和缓存优化\n\n## 量化指标\n\n### SLA\n\n- SLI 定义测量的具体指标，如 QPS、带宽等\n- SLO 定义服务提供功能的期望状态，如 QPS 99 线≤100ms\n\n### QPS/TPS\n\n通常说的系统容量是否足够，一般就是指系统或服务能否在可接受的响应时间和成功率下支撑目标 QPS/TPS\n\n### 用户体验\n\n大多数用户体验是可以与系统指标或业务指标挂钩的，这些指标就可以作为目标的一部分\n\n## 容量测试\n\n### 范围\n\n1. 关键路径上的核心服务\n2. 有明显流量峰值特征的服务\n3. 对响应时间敏感的服务\n4. 占用资源大的服务\n5. 历史上曾经发生过容量事故的服务、目前高峰期已经存在容量隐患的服务、新上线对容量情况未知的服务\n\n### 重点链路\n\n1. 同步链路：强依赖的，调用方需要等待被调用方执行完成，各服务的容量最容易互相影响\n2. 异步链路：需要明确异步流量是从哪里过来的，量级有多大，高压期间否要做蓄洪，是否会由于消息重投而引起雪崩效应\n3. 旁支业务链路：一个很不起眼的业务，在特定的场景下被反复调用后，会形成很高的终端延时\n4. 高并发链路：需要做的比较多，参考[高性能](/软件工程/架构/系统设计/高并发.md)\n\n![2022719111617](/assets/2022719111617.webp)\n\n### 线上测试\n\n```mermaid\nflowchart TD\n  测试开始 --> 单线程调试\n  单线程调试 --> 是否有异常\n  是否有异常 -->|是| 是否能现场解决\n  是否能现场解决 -->|否| 测试结束\n  是否能现场解决 -->|是| 逐步加压\n\n  是否有异常 -->|否| 逐步加压\n  逐步加压 --> 监控业务指标\n  逐步加压 --> 达到目标值\n  监控业务指标 --> 指标是否可接受\n  指标是否可接受 -->|否| 解决后继续加压\n  指标是否可接受 -->|是| 达到目标值\n  达到目标值 --> 摸高/脉冲/限流验证\n  摸高/脉冲/限流验证 --> 测试结束\n```\n\n### 线下基线测试\n\n将当前各服务的主干版本部署在基线环境上，并通过容量测试的方式获取容量指标记录备案，这些指标记录为基线指标\n\n当有服务准备发布新版本时，就可以在基线环境上部署这个新版本，再执行同样的容量测试，将所获得的指标与基线指标进行对比，如果出现关键指标的异动，就需要介入排查，可以整合进[CI](/运维/持续集成.md)流水线\n\n## 容量规划预测\n\n- 参考历史的相关数据，建立合适的模型，预测未来的容量需求，定期地和实际的数据做对比，从而调整和纠正以前的预测\n\n针对时间序列的 ARIMA 模型\n\n挑战：\n\n1. 不仅是钱，大容量规划还需要建数据中心，这些砸钱解决不了\n2. 数据中心地域的规划\n3. 服务器种类规划\n4. 流量高峰低估有季节性\n5. 还要考虑灾备\n\n## 云上的容量保障\n\n- 弹性扩缩容，缩容是有风险的\n\n![动态伸缩](/assets/2022718155631.webp)\n\n![预测伸缩](/assets/2022718155652.webp)\n\n前进的方向：减少应用冷启动时间（GraalVM），结合传统的容量规划手段，准实时的进行扩缩容\n\n## 组织建设\n\n- 中心化容量保障团队\n- 全员容量保障意识\n\n## 小规模的容量保障\n\n1. 粗放式保障：择性价比高的“大头”去优先保障\n2. 利用好云服务商的按使用收费机制\n","metadata":"","hasMoreCommit":false,"totalCommits":5,"commitList":[{"date":"2024-09-02T20:06:33+08:00","author":"MY","message":"✏可用性","hash":"140f6425596cadfafd5801ad3c2f41fa3b2ce0d8"},{"date":"2022-08-04T17:04:09+08:00","author":"cjiping","message":"✏️更新 容量保障","hash":"18192c8715e18ae3cf20a813f6567400e45f415e"},{"date":"2022-07-19T14:04:43+08:00","author":"cjiping","message":"✏️更新 容量保障","hash":"8c314803cf54c9fae5bd5d1d939bb0d7e1ffb6b0"},{"date":"2022-07-18T16:02:45+08:00","author":"cjiping","message":"✏️更新 容量保障","hash":"6a11bbc932886fc5499f116a2ee6146711b8ff2b"},{"date":"2022-07-14T18:04:54+08:00","author":"cjiping","message":"➕新增 容量保障","hash":"081f7677a75e1c7c1a48e528113be65143315ff5"}],"createTime":"2022-07-14T18:04:54+08:00"}