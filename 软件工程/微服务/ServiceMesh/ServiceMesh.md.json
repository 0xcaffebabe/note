{"name":"ServiceMesh","id":"软件工程-微服务-ServiceMesh-ServiceMesh","content":"# Service Mesh\n\n微服务(架构风格) -> service mesh（基础设施）\n\nSpringCloud Dubbo 等微服务框架的痛点：\n\n- 侵入性强 业务代码与框架代码混合在一起\n- 升级成本高 一旦框架升级，就需要重新进行测试 重新部署上线而跟业务没有太大的关系\n- 版本碎片化严重 服务自己独立演化 线上中间件或者框架版本不一，难以统一治理\n- 中间件演变困难 由于需要兼容老版本 历史包袱沉重\n- 学习曲线不够平滑 单单一个SpringCloud就有大大小小几十个组件\n- 功能不全 一些功能现有的微服务框架并没有\n\n从容器到服务网格，一个原因就是因为环境的异构性\n\n**痛点往往是技术发展到一定的程度必然要经历的阶段，这些痛点促使技术不断发展、不断前进**\n\n## 基本概念\n\n>Service Mesh 是一个专门处理服务通讯的基础设施层。它的职责是在由云原生应用组成服务的复杂拓扑结构下进行可靠的请求传送。在实践中，它是一组和应用服务部署在一起的轻量级的网络代理，并且对应用服务透明\n\n服务网格带来的变革：\n\n- SDK轻量化\n- 由于只需要少量的SDK 微服务治理与业务逻辑的解耦\n- 同样由于SDK轻量 异构系统的统一治理，编写不同语言的SDK更加轻松\n\n服务网格相比传统微服务框架的优势：\n\n- 由于服务网格是一个基础设施层 所有的服务间通信都要通过它 所以带来了良好的可观察性\n- 通过服务网格 可以很好地通过这个基础设施来对服务间的流量进行控制或者进行故障模拟\n- 服务网格提供了保护网络调用的能力和基础设施\n- 应用层可以更专注于业务逻辑\n\n服务网格带来的问题：\n\n- 复杂度更高\n- 对运维要求更高\n- 增加了一个中间层 肯定会有延迟问题\n- 平台适配的侵入性\n\n## 透明通讯\n\n### 分布式通讯的演化\n\n第一阶段：控制逻辑和业务逻辑耦合\n\n![202012214381](/assets/202012214381.png)\n\n第二阶段：将控制逻辑抽取到独立的库中\n\n![202012214408](/assets/202012214408.png)\n\n第三阶段：抽离出进程外的网络代理\n\n![2020122144218](/assets/2020122144218.png)\n\n第四阶段：将网络代理以边车的形式注入到应用容器\n\n![202012214445](/assets/202012214445.png)\n\n第五阶段：服务网格\n\n![20201023152156](/assets/20201023152156.png)\n\n### 数据平面\n\n- 直接处理入站（业务应用）和出站数据包，转发、路由、健康检查、负载均衡、认证、鉴权、产生监控数据等\n- 对应用透明\n\n#### 代理注入\n\n- 基座模式：对应用程序不透明 至少需要一个SDK\n- 注入模式：通过在pod注入一个辅助容器实现\n\n#### 流量劫持\n\n- iptables拦截流量交给sidecar处理\n- eBPF：在Socket层面直接完成数据转发\n- CNI插件\n\n#### 可靠通讯\n\nEnvoy在这方面进行了创新，它将代理的转发的行为规则抽象成Listener、Router、Cluster三种资源\n\n### 控制平面\n\n- 不直接解析数据包\n- 与控制平面中的代理通信，下发策略和配置\n- 负责网络行为的可视化\n- 常提供 API 或者命令行工具可用于配置版本化管理，便于持续集成和部署\n\n![202012214595](/assets/202012214595.png)\n\n## ServiceMesh K8S Istio\n\n### Kubernetes vs Service Mesh\n\n![20201024153146](/assets/20201024153146.png)\n![20201024153524](/assets/20201024153524.png)\n\n- K8S通过kube-proxy组件进行流量转发\n- Istio Service Mesh 可以沿用 Kubernetes 中的 service 做服务注册，还可以通过控制平面的平台适配器对接其他服务发现系统\n\nService Mesh的劣势：为了细粒度地进行流量管理，必将添加一系列新的抽象，从而会进一步增加用户的学习成本\n\nService Mesh的优势：kube-proxy 的设置都是全局生效的，无法对每个服务做细粒度的控制， Service Mesh 通过 sidecar proxy 的方式将 Kubernetes 中对流量的控制从 service 一层抽离出来，可以做更多的扩展\n\n### xDS 协议\n\n![20201024154155](/assets/20201024154155.png)\n\n### Envoy\n\nEnvoy 是 Istio Service Mesh 中默认的 Sidecar\n\n![20201024154334](/assets/20201024154334.png)\n\n### Istio Service Mesh\n\n![20201024154437](/assets/20201024154437.png)\n\n## Istio\n\n>它是一个完全开源的服务网格，以透明的方式构建在现有的分布式应用中。它也是一个平台，拥有可以集成任何日志、遥测和策略系统的 API 接口。Istio 多样化的特性使你能够成功且高效地运行分布式微服务架构，并提供保护、连接和监控微服务的统一方法。\n\n### 负载均衡\n\n![Istio 负载均衡的实现](/assets/屏幕截图%202021-11-04%20205623.png)\n\n### 故障注入\n\n![Istio故障注入实现(超时与错误状态码)](/assets/屏幕截图%202021-11-04%20205752.png)\n\n### 数据包重放\n\n![通过在边车复制流量到影子容器](/assets/屏幕截图%202021-11-04%20210512.png)\n","metadata":"","hasMoreCommit":false,"totalCommits":5,"commitList":[{"date":"2021-11-04T22:22:37+08:00","author":"My","message":"✏️更新 服务网格","hash":"aea8646e0e29ed23c219e37c4a8d6eaf9f5e9d18"},{"date":"2021-11-03T22:29:45+08:00","author":"My","message":"✏️更新 服务网格","hash":"291eacd9295b74cd5888db5647b863576b9c0f2f"},{"date":"2020-12-02T15:04:50+08:00","author":"cjiping","message":"✏更新 ServiceMesh","hash":"c7fbd01ce359715f8254de45edfcaf236518edde"},{"date":"2020-10-24T15:56:50+08:00","author":"MY","message":"✏更新 Service Mesh","hash":"16b4476abf7bbe87c0e217f1ca20f38b0a85e059"},{"date":"2020-10-23T15:39:09+08:00","author":"MY","message":"➕增加 ServiceMesh","hash":"5e5b10a139fe9b1a8cfa446eb5ab3af8eefcf1e1"}],"createTime":"2020-10-23T15:39:09+08:00"}