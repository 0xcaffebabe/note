{"name":"微服务","id":"软件工程-微服务-微服务","content":"# 微服务\n\n集中式架构 -> 垂直拆分 -> 分布式服务 -> 服务治理（SOA） -> 微服务\n\n## 选择微服务的动力\n\n外部因素：\n\n- 没有技术银弹可以解决一切需求\n- 团队个人技术因素制约着系统发展\n- 外部商业环境提出的需求\n\n内部因素：\n\n- 变化十分快的业务\n- 大规模 业务复杂的系统\n\n## 微服务的弊端\n\n- 服务的拆分与定义并不简单，没拆分好的话很有可能构建出一个分布式单体应用\n- 分布式系统带来的复杂性\n  - 分布式事务\n  - 运维测试\n  - ...\n\n## 微服务需要的条件\n\n- 决策者与执行者都能意识到康威定律在软件设计中的关键作用\n- 组织中具备一些的对微服务有充分理解、有一定实践经验的技术专家\n- 系统应具有以自治为目标的自动化与监控度量能力\n\n## 概念\n\n- 足够小，内聚性高\n- 自治，一个服务就是一个独立的实体\n\n### 微服务的粒度\n\n1. 微服务粒度的下界是它至少应满足独立——能够独立发布、独立部署、独立运行与独立测试，内聚——强相关的功能与数据在同一个服务中处理，完备——一个服务包含至少一项业务实体与对应的完整操作\n2. 微服务粒度的上界是一个2 Pizza Team能够在一个研发周期内完成的全部需求范围\n\n在这种开发模式中，技术人员也会快速积累业务知识，业务会沉淀到技术人员个人层面。每个人负责某个特性从开发到测试再到运维各方面，也就是[DevOps](/软件工程/DevOps.md)\n\n## 原则\n\n- 围绕业务建模而非技术建模\n- 自动化文化\n- 隐藏实现细节\n- 去中心化\n- 独立部署\n- 隔离失败\n  - 当进行远程调用时，要有机制当调用失败时能将错误隔离在一定的范围内\n- 可观察\n  - 一个服务应提供一定的接口来反映其运行情况\n\n## 什么时候不适合微服务\n\n对要构建的系统越不熟悉，对系统的各个组件划分也就越困难\n\n所以还是先构建单体系统，再逐步对其拆分\n\n### 什么时候转微服务\n\n- 单体系统严重制约了研发效率\n\n## 好处\n\n- 技术异构性\n- 弹性，一个服务不可用不会导致级联故障\n- 可扩展，一个服务可以运行多个实例\n- 简化部署\n- 符合组织结构\n- 可组合性\n- 容易替换\n\n## 面向服务的架构(SOA)\n\n>SOA是一种设计方法，其中包含多个服务，而服务之间通过配合最终会提供一系列功能。一个服务通常以独立的形式存在于操作系统进程中。服务之间通过网络调用，而非采用进程内调用的方式进行通信。\n\n微服务架构可以看做是实现SOA的一种特定方法\n\n## 其他的分解技术\n\n- 共享库\n- 模块\n\n## 架构师的视角\n\n软件不同于建筑，相对来说，软件的不可预测因素更多，我们应该设计出一个合理的框架，在这个框架可以慢慢演化出正确的系统，也就是生长的架构。\n\n避免对所有事情做出过于详尽的设计，将注意力专注在大方向上\n\n同时，架构设计就是在做取舍，要有原则及实践来指导设计\n\n### 分区\n\n相对来说，应该多担心区域之间发生的交互，而非区域内的事情\n\n### 良好的服务应该具有的属性\n\n- 监控\n  - 每个服务都应该有标准的方式报告其健康状态\n- 接口\n- 架构的安全性\n  - 应该有良好的隔离性\n\n### 代码治理\n\n- 提供范例来指导开发人员如何编写代码\n- 提供服务代码模板来简化开发人员的工作\n\n### 技术债务\n\n短期的利益，长期来看是要付出代价的，应该要维护好这个债务列表\n\n### 例外管理\n\n一次例外是例外，多次例外就是规则了\n\n## 系统设计\n\n微服务的架构决定了对架构者的能力要求非常高 而允许平庸开发者的存在\n\n这点与软件工艺理论不谋而合\n\n**康威定律**\n\n>即系统设计本质上反映了企业的组织机构。系统各个模块间的接口也反映了企业各个部门之间的信息流动和合作方式\n\n![批注 2020-03-24 092008](/assets/批注%202020-03-24%20092008.png)\n\n![批注 2020-03-24 092048](/assets/批注%202020-03-24%20092048.png)\n\n### 服务所有权\n\n拥有服务的团队可以对服务做出修改，只要不影响服务的消费者\n\n### 为什么要共享服务\n\n多个团队共同维护一个服务\n\n- 难以拆分\n- 团队的组建是基于技术的，而不是业务\n- 人员流动更自由\n\n### 内部开源\n\n不再采取团队结构，而是让一小部分人称为核心提交者，其他人可以提交PR\n\n### 孤儿服务\n\n孤儿服务指的是一段时间没有更改的服务\n\n如果团队的组织是按照限界上下文的话，那一个团队可能拥有多个服务，这个孤儿服务在这个团队手上，当发生需求变更时，修改是很容易的。同时，采取了微服务的架构，很多服务都可以进行快速重写\n\n### 反向的康威定律\n\n- 系统设计会影响组织结构吗？\n\n### 主链路规划\n\n- 保证最小业务可用性\n\n开源：将边缘计算资源调配给主链路业务\n\n节流：[限流](/软件工程/架构/系统设计/流量控制.md)、[降级](/软件工程/架构/系统设计/可用性.md)、[熔断](/软件工程/架构/系统设计/可用性.md)\n\n## 挑战\n\n- 如何划分服务\n- 分布式架构带来新的问题\n- 运维挑战\n\n## 生命周期\n\n### 设计\n\n- 单体应用是否先行\n- 划分服务范围\n- 服务通信方式\n- 可恢复性\n\n### 部署\n\n- 部署操作标准化\n- 持续交付流水线\n\n### 监控\n\n## 四层架构\n\n![批注 2020-06-18 155555](/assets/批注%202020-06-18%20155555.png)\n\n### 平台层\n\n![批注 2020-06-18 155742](/assets/批注%202020-06-18%20155742.png)\n\n### 服务层\n\n实现业务功能或者技术功能的微服务\n\n- 聚合服务与多元服务\n- 关键路径：业务线上重要的服务点\n\n## 通信\n\n- 同步\n- 异步\n\n## 服务边界\n\n用来屏蔽内部实现细节，提供一个外部统一访问点\n\n- API网关\n- Backend for frontend\n  - 为特定群体服务的网关\n\n## 客户端\n\n- 传统单体客户端\n- 微前端\n\n## 查询\n\n远程调用接口的代价很大，需要对一些查询接口提供批量查询接口\n\n## 高可靠微服务\n\n- 负载均衡与服务监控\n- 限流\n- 服务网格\n  - 引入一个代理来代替服务间的直接通信\n\n### 故障类型\n\n- 硬件\n- 网络通信\n- 外部依赖服务\n- 内部代码\n\n### 后备方案\n\n- 降级\n- 缓存\n- 调用其他服务完成\n\n### 超时\n\n### 断路器\n\n为了保护服务\n\n### 异步通信\n\n## 可复用的微服务框架\n\n- 服务发现\n- 信息收集（可观测性）\n- 负载均衡与限流","metadata":"","hasMoreCommit":true,"totalCommits":14,"commitList":[{"date":"2022-05-11T21:00:43+08:00","author":"MY","message":"✏️更新 微服务","hash":"1e43e63826e87adfd590c28aeaf8b2c57edd93b9"},{"date":"2021-10-25T23:39:47+08:00","author":"My","message":"✏️更新 微服务","hash":"2f8a1c56e0f12af165104810f21b8666aaec001f"},{"date":"2021-01-15T15:40:53+08:00","author":"cjiping","message":"✏更新 微服务","hash":"87c3bf91c403e715a40c2795549ad3db32fb66e2"},{"date":"2020-12-03T14:48:48+08:00","author":"cjiping","message":"✏更新 微服务","hash":"2ce43db7f196de871269497c34d9bce2e91e77b7"},{"date":"2020-06-19T14:32:42+08:00","author":"MY","message":"更新 微服务","hash":"4707a0f37d943d750dd1298ee96726028b05412d"},{"date":"2020-06-18T16:38:09+08:00","author":"MY","message":"更新 微服务","hash":"e9ad88d1d8b4c922ef0b61ccef6ba19ee7994201"},{"date":"2020-06-17T15:16:42+08:00","author":"MY","message":"增加 微服务 生命周期","hash":"382dd80624e9ba56f8604ab922a45dbbab7348ad"},{"date":"2020-03-24T09:37:28+08:00","author":"MY","message":"更新 康威定理","hash":"2a198c603551450270049727dff018e2d4d712b3"},{"date":"2020-02-16T15:44:23+08:00","author":"MY","message":"更新微服务的总结","hash":"1e83d23661700fdafddc1c38d51c528e232f9a8b"},{"date":"2020-02-15T15:30:37+08:00","author":"MY","message":"微服务增加系统设计相关内容","hash":"e3146c5ab2148e8ed638eb8213bfc9a350bcc084"}],"createTime":"2019-09-12T22:13:56+08:00"}