{"name":"配置中心","id":"软件工程-微服务-服务治理-配置中心","content":"# 配置中心\n\n> 在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件\n\n```mermaid\nstateDiagram-v2\n  用户 --> 配置中心: 推送配置\n  配置中心 --> 微服务1: 获取配置\n  配置中心 --> 微服务2: 获取配置\n  配置中心 --> 微服务3: 获取配置\n```\n\n```mermaid\n---\ntitle: 一个配置中心的使用例子\n---\nsequenceDiagram\n    participant Client as 客户端\n    participant ConfigAPI as 配置中心接口\n    participant Storage as 配置存储\n\n    Client->>ConfigAPI: /config/service?action=register (Group, Key, Value)\n    ConfigAPI->>Storage: 保存配置 (Group, Key, Value)\n    Storage-->>ConfigAPI: 配置存储成功\n    ConfigAPI-->>Client: 返回注册成功\n\n    Client->>ConfigAPI: /config/service?action=unregister (Group, Key)\n    ConfigAPI->>Storage: 删除配置 (Group, Key)\n    Storage-->>ConfigAPI: 配置删除成功\n    ConfigAPI-->>Client: 返回反注册成功\n\n    Client->>ConfigAPI: /config/service?action=lookup (Group, Key)\n    ConfigAPI->>Storage: 查询配置 (Group, Key)\n    Storage-->>ConfigAPI: 返回配置值 (Value)\n    ConfigAPI-->>Client: 返回查询结果 (Value)\n\n    loop 周期性检查\n        Client->>ConfigAPI: /config/service?action=getSign (Group)\n        ConfigAPI->>Storage: 获取 Group 的 sign 值\n        Storage-->>ConfigAPI: 返回 sign 值\n        ConfigAPI-->>Client: 返回 sign 值\n        alt sign 值变更\n            Client->>ConfigAPI: 拉取最新配置 (Group)\n            ConfigAPI->>Storage: 获取最新配置\n            Storage-->>ConfigAPI: 返回最新配置\n            ConfigAPI-->>Client: 返回最新配置\n        end\n    end\n\n```\n\n## 配置管理场景\n\n- 属性分发\n- 动态开关\n  - 金丝雀 降级 蓝绿部署\n\n## 配置中心应该提供的功能\n\n- 服务端与客户端支持\n- 集中管理各环境的配置文件\n- 修改之后可以快速生效\n- 版本管理\n- 并发查询\n- 多语言支持\n\n## 配置中心高可用\n\n> 启动多个配置中心实例\n\n- 对配置中心进行服务治理\n- 配置中心本地缓存配置项\n\n## 分布式配置中心\n\n将配置文件信息注册到配置中心平台上，可以使用分布式配置中心实时更新配置文件信息，统一管理配置文件，不需要重新打包发布。\n\n### 资源隔离\n\n- 配置与业务逻辑隔离\n- 服务与环境间的配置隔离\n\n## SpringCloudConfig\n\n在Spring Cloud中，有分布式配置中心组件spring cloud config ，它支持配置服务放在配置服务的内存中（即本地），也支持放在远程Git仓库 中。在spring cloud config 组件中，分两个角色，一是config server，二是config client\n\n## Apollo\n\n>Apollo（阿波罗）是携程框架部门研发的分布式配置中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，适用于微服务配置管理场景\n\n## Nacos\n","metadata":"tags: ['服务架构', '微服务', '服务治理']","hasMoreCommit":false,"totalCommits":2,"commitList":[{"date":"2024-11-22T14:18:29+08:00","author":"MY","message":"📦服务治理","hash":"a28d217a6122f8f7c8a9254f8b2c0e32dccf9f6f"},{"date":"2022-06-14T17:31:57+08:00","author":"cjiping","message":"📦整理 服务治理","hash":"fc48f7a898c8786caea55f15b6345b63aa941f01"}],"createTime":"2022-06-14T17:31:57+08:00"}