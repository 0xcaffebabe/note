{"name":"服务计算","id":"软件工程-服务计算","content":"# 服务计算\n\n## 服务\n\n服务时为客户所执行的非持久的，无形的体验\n\n### 服务模型与制造模型\n\n![批注 2020-05-17 133252](/assets/批注%202020-05-17%20133252.png)\n\n单纯的制造持续减少，服务产业持续增长\n\n## 服务系统\n\n用以实现业务服务的IT软件系统\nIT使能服务：业务服务由服务系统提供\n\n### 问题\n\n- 复杂\n- 灵活\n- 专业化与外包\n- 计算环境演化\n- IT专家与领域专家的沟通\n- 价值与创新\n- 服务系统家族\n\n### 面向泛型\n\n使用软件工程相关方法工具进行开发\n\n- 复用\n\n命令式（过程式）泛型\n面向对象泛型\n\n使用设计模式应对可以预料到的变化\n\n#### 基于构件的泛型\n\n\\          | 基于构件                                       | 面向对象\n-|-|-\n抽象视角       | 构件是对客观世界的实体或者实体联合能提供的功能和服务的建模;仅仅关注实体的功能和服务 | 对象是对客观世界基本实体的抽象,强调对实体的对应及对实体的建模;涉及实体的静态属性特征\n可复用程度和复用机制 | 以组合的方式实现复用                                 | 以继承的方式实现复用\n粒度不同       | 大                                          | 小\n\n构件:模块化的、可部署、可替换的软件系统组成部分，它封装了内部的具体实现并对外提供统一接口。\n\n好处：\n\n- 接口稳定，内部实现发生变化不会导致变化扩散\n\n#### 面向服务的泛型\n\n服务：自治、开放、自描述、与实现无关的网络构件\n\n![批注 2020-05-18 134151](/assets/批注%202020-05-18%20134151.png)\n\n## 服务组合\n\n面向服务的应用逻辑,遵循面向服务的设计原则,采用服务和服务组合加以实现。\n\n由于面向服务倾向于将服务打造为无关的企业资源, -一个服务可能被多个消费者程序所调用,它们能在不同的服务组合中组合同一个服务。\n\n## 服务库存\n\n服务库存，是在组织或组织的合理部分边界内一组独立标准化并治理的完备服务。\n\n### 分层\n\n- 应用服务层\n- 业务服务层\n- *编排服务层（非必须）*\n\n### 演化\n\n龙卷风模型\n\n- 各个服务按需独立开发\n- 依赖先前的服务进行开发\n- 使用开发完成的服务进行组合，达到快速开发\n\n## 服务生态系统\n\n当服务库存按照面向服务的方式进行良好规划和设计、经过长时间演化、已经基本完备;该组织的服务系统均已合理地转向面向服务的实现,那么该组织内的服务生态系统就被构建起来。\n\n垂直服务：可以被消费者直接调用，满足消费者需求\n水平服务：需要组合多个服务才能提供服务\n\n### 生命周期\n\n- 分析\n- 设计\n- 开发\n- 测试\n- 部署\n- 管理\n\n### 服务层次\n\n![批注 2020-05-28 112723](/assets/批注%202020-05-28%20112723.png)\n\n### 交付策略（开发方式）\n\n- 自顶向下：分析优先\n- 自底向上：按需交付，封装并集成遗留系统\n- 敏捷策略\n\n![批注 2020-05-28 113229](/assets/批注%202020-05-28%20113229.png)\n\n## 面向服务的计算\n\n快速、低成本。在异构环境中分布式应用的灵活组合\n\n## 面向对象 vs 面向服务\n\n特点        | 面向对象的计算                                            | 面向服务的计算\n--------- | -------------------------------------------------- | ---------------------------------------------------------------------------------------------\n方法论       | 通过定义紧耦合的类来进行应用开发应用架构为基于继承关系的层次式架构从构造函数一通过类或模型到系统设计 | 通过定义松耦合的服务来进行应用开发,并将服务组装成可执行的应用从系统模型到服务模块,从服务抽象定义到服务实现绑定通过搜索获得可用的服务实现\n抽象和协作层次   | 往往由一个团队来负责应用的开发,并负责整个生命周期开发者必须了解应用领域知识和编程          | 开发任务由三个独立方承担:应用程序开发者,服务提供方和服务代理。其中,应用程序开发者需要了解应用逻辑,但不需要了解具体的服务是如何实现的。服务提供者需要编程能力,但不必了解使用服务的应用\n代合共享和复用   | 代码复用通过类成员的继承和库函数加以实现。其中库函数在编译时引入,且往往是平台相关的         | 代码在服务层次复用。 服务使用标准的结构,并发布在Internet库中。服务是平台无关的，且能够被查找并远程调用。服务代理支持系统的服务共享\n动态绑定和重新组合 | 在运行时将名称和方法进行关联。方法必须在应用部署前链接到可执行的代码                 | 在运行时将服务调用和服务进行绑定。可以在应用部署后,再进行服务选定。这一特色使得应用可以在运行时重组\n重组        | 躲在设计时决定导入的组件                                       | 可以动态改变应用系统中服务的组合关系,以及服务定义与服务实现之间的绑定关系,即实现动态地添加、修改、删除各个服务节点\n组件通讯和接口   | 与平台和语言有关,例如C++程序难以直接和Java程序通信                      | 与平台和语言无关。组件间通过标准协议通信，如XML，WSDL和SOAP\n系统维护      | 用户需要时常升级软件,且在执行升级时,应用必须停止                          | 通过互联网升级系统,因为服务多运行在远程服务器上,用户通过互联网进行访问。维护对用户透明\n可靠性       | 在设计时决定可靠性的方法                                       | 对于服务提供者,每个服务相对简单，更加可靠。对于应用程序存在多个满足同一-需求的服务可用过将故障服务的节，点断开并重新绑定到备选服务节点上，获得不间断的应用系统\n软件拥有      | 软件作为产品销售,为用户所拥有                                    | 软件存在并执行于独立的服务提供商的设备上,用户按照每次对服务使用付费,而不是按照软件产品付费\n耦合        | 提倡重用和松耦合,但是预先定义的类依赖导致更多的对象紧密绑定                     | 服务的松耦合由功能和服务合约给定\n粒度        | 为支持不同规模的任务,支持细粒度接口( API)                           | 鼓励粗粒度的接口( 服务描述) ,通讯消息中包含尽可能多的任务相关信息\n作用域       | 对象作用域更小，更有针对性(往往基于一个软件系统)                          | 服务作用域显著不同(往往基于一个服务生态系统)\n前瞻性       | 鼓励处理逻辑与数据的绑定从而产生对象                                 | 鼓励创建活动无关的、由消息驱动的服务\n状态性       | 数据和逻辑的绑定,导致带状态的对象                                  | 服务尽可能保持无状态性\n组合        | 在支持对象组合的同时也支持对象的继承,从而导致紧耦合                         | 支持松散耦合服务的组合\n\n## 面向服务的架构SOA\n\n- 面向服务的企业\n- 使用服务对应用封装\n\n### SOA三角操作模型\n\n![批注 2020-05-26 141818](/assets/批注%202020-05-26%20141818.png)\n\n### 分层\n\n![批注 2020-05-26 143411](/assets/批注%202020-05-26%20143411.png)\n\n- 操作型系统层：只为一个目的服务一类特定用户\n- 服务组件层：提供用以实现服务层中所定义服务的代码容器\n- 服务层：服务层将SOA三角操作模型，扩展为综合的逻辑层次,以支持服务注册、服务分解、服务发现、服务绑定、接口聚合和生命周期管理。\n- 业务过程层：以组合和分解的方式处理业务逻辑\n\n**编排**\n\n![批注 2020-05-26 143841](/assets/批注%202020-05-26%20143841.png)\n\n**编导**\n\n![批注 2020-05-26 143925](/assets/批注%202020-05-26%20143925.png)\n\n- 消费者层：通过业务服务快速构建用户接口来满足消费者需求\n\n## web service\n\n- xml：定义数据，信息交换\n- xml schema：定义数据结构\n- soap：平台无关消息传送\n- wsdl：平台技术无关服务描述\n- ws-bpel/ws-cdl:脚本\n- uddi，wsil：服务发布与查找\n\n![批注 2020-05-27 143400](/assets/批注%202020-05-27%20143400.png)\n\n### 抽象模型\n\n![批注 2020-05-27 143916](/assets/批注%202020-05-27%20143916.png)\n\n### SOAP\n\n提供了单向、不带状态的消息交互范式\n一个定义了消息传输的数据抽象接口\n\n![批注 2020-05-28 103107](/assets/批注%202020-05-28%20103107.png)\n\n### WSDL\n\n提供了一种基于XML的标准接口定义语言/服务能力定义语言,用以在服务的提供者/调用者/服务注册之间,交换必要的有关Web Service的信息\n\n## 面向服务的分析\n\n需要构建哪些服务，每个服务需要封装哪些逻辑\n\n- 定义流程自动化需求\n- 识别现有自动化系统\n\n### 业务服务\n\n- 以任务为核心\n- 以实体为核心\n\n### 服务建模\n\n## 面向服务设计\n\n从服务候选中派生出具体的服务设计，装配到实际业务流程\n\n- 以实体为核心\n- 应用服务\n- 以任务为核心\n\n## 服务开发\n\n特定平台及语言：\n\n- 开发定制服务\n- 包装遗留系统\n- 构建应用系统\n\n## 服务设计\n\n### 标准化服务合约\n\n- 技术性\n- 非技术性\n\n版本问题：服务合约的演化\n技术依赖\n\n### 标准化服务策略\n\n### 服务耦合\n\n- 逻辑-合约耦合\n  - 先设计合约，再设计底层方案逻辑\n- 合约-逻辑耦合\n  - 根据实际设计生产合约，是一种反模式\n- 合约-技术耦合\n- 合约-实现耦合\n- 合约-功能耦合\n  - 服务没有可复用性\n- 消费者-合约耦合\n  - 接口粒度\n\n### 服务抽象\n\n为了获得信息隐藏的正确平衡点\n\n- 抽象度量：合约内容\n  - 详细合约\n  - 简明合约\n  - 优化合约\n\n### 服务可复用性\n\n- 计划的可复用\n- 针对的可复用\n- 完全可复用\n\n无关服务与周围环境之间保持中立或者无关\n服务越是无关，复用潜能越大\n\n服务可复用性原则倾向于降低服务粒度\n\n### 服务自治\n\n当前服务不依赖于其他因素\n\n- 运行时自治\n- 设计时自治\n  - 服务拥有者对服务修改的自由度\n\n风险：\n\n- 错误判断了服务的范围，导致修改困难\n- 对遗留系统的封装，修改困难\n- 过度设计\n\n### 服务无状态性\n\n- 使用状态库保存状态\n- 使用消息保存状态\n\n代价：\n性能代价\n设计代价\n\n### 服务可发现性\n\n### 服务可组合性\n\n","metadata":"","hasMoreCommit":true,"totalCommits":14,"commitList":[{"date":"2021-12-22T14:42:46+08:00","author":"cjiping","message":"✏️更新 服务计算","hash":"d05d5279a123c4eb0b4b0065da00d6550f1a279f"},{"date":"2021-03-12T18:10:30+08:00","author":"cjiping","message":"✏更新 服务计算","hash":"926e7f9a48f9fac1c9136e6098d867665b5d6fa7"},{"date":"2020-06-02T11:10:29+08:00","author":"MY","message":"完成 服务计算","hash":"e8d17a50f2732a1c5a6ce5e9902d640f27239353"},{"date":"2020-06-01T10:32:03+08:00","author":"MY","message":"更新 服务计算","hash":"06872dda4560f70ffa1bd2b22780e4f29e1dedea"},{"date":"2020-05-31T16:38:17+08:00","author":"MY","message":"更新 服务计算","hash":"f4ce9af171796c7c96879c64e567ffb31c6e9cd9"},{"date":"2020-05-30T10:22:46+08:00","author":"MY","message":"更新 服务计算","hash":"5a5ccb00e0d16f2bdb3fe365a75d2d694507ada3"},{"date":"2020-05-29T11:09:22+08:00","author":"MY","message":"增加 服务计算 面向服务分析","hash":"94f0a70ed60ba069ed277583ef70c69a7fecfd28"},{"date":"2020-05-28T11:42:27+08:00","author":"MY","message":"更新 服务生态系统","hash":"58737cb87102de11748ce25565fd25c46d343ba2"},{"date":"2020-05-28T11:18:35+08:00","author":"MY","message":"更新 服务计算 web service","hash":"205d970fd54d85053ab8767a4d324a41e45a7298"},{"date":"2020-05-27T15:15:49+08:00","author":"MY","message":"增加 服务计算 web service","hash":"ab9627a7bc860d5e112c53579a24b9e64c019517"}],"createTime":"2020-05-17T14:13:18+08:00"}