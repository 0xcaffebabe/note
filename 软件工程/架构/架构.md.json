{"name":"架构","id":"软件工程-架构-架构","content":"# 架构\n\n架构满足了应用程序的非功能性需求：可维护性、可测试下、可扩展性、可部署性等。\n\n软件架构的最高优先级是保持系统正常工作，软件架构的策略就是京可能长时间保留尽可能多的可选项\n\n## 架构是什么\n\n### 开发\n\n一个软件系统的开发，应该就是要方便其开发团队\n\n- 流行的不一定好，适合的才是最好的\n\n一个系统的架构，反映了开发该系统的团队组织结构\n\n### 部署\n\n良好的软件结构可以让系统构建完成就能部署，同时实现一键式的轻松部署是设计软件架构的一个目标\n\n### 运行\n\n设计良好的架构能明确地反映出系统运行时的需求\n\n架构是系统运行时的一个表示\n\n### 维护\n\n维护的主要成本\n\n- 探秘：解决问题的最佳方式\n- 风险：解决问题衍生出的新问题\n\n### 保持可选项\n\n**用例**：对系统如何响应外接请求的描述\n\n软件系统可降解为\n\n- 策略：业务逻辑\n- 细节：具体实现技术，数据库、web等\n\n在大部分时间，无法预知系统的所有用例，越晚决定实现细节，就能掌握更多信息，更有利于决策\n\n### 设备无关性\n\n高层策略与低层实现细节分离\n\n### 解耦\n\n系统可以被按层解耦，将不同层隔离开来，避免变化扩散到其他层\n\n当对用例进行分组时，增加新用例就会对旧的用例影响降低\n\n#### 解耦模式\n\n- 源码解耦：控制源代码模块的依赖关系\n- 部署层次解耦：控制可部署模块的依赖关系\n- 服务解耦：依赖关系降低到服务层次\n\n软件架构是生长的，从单体到相互独立可部署单元，再到服务化\n\n设计良好的架构应该允许软件系统从单体到服务，也可以从服务退化到单体\n\n### 重复\n\n重复需要分清表面重复还是实际重复，随着软件的演进，两段重复的代码可能会变得不同\n\n### 独立性\n\n- 开发独立性：当对系统进行解耦时，不同的模块就可以由多个团队来分工开发\n- 部署独立性：同样，解耦之后部署就可以互不影响\n\n## 分类\n\n### 基础架构\n\n- 以云平台 操作系统等基础设施为主\n\n### 中间件与大数据架构\n\n### 业务系统架构\n\n- 通用软件系统 办公软件 浏览器等一类\n- 离线业务系统 大数据分析 数据挖掘系统\n- 在线业务系统 在线为特定业务服务的系统\n\n这些不同分类的架构界限不是很清晰 随着时间演进 各个类型之间的系统边界会互相渗透\n\n## 架构视图\n\n- 架构的表现形式通常是各种图\n\n绘图原则4R：\n\n- 明确 Rank：也就是说，不要事无巨细地把一个大系统的方方面面都在一张架构图中展现出来，而应该明确你要阐述的系统所属的级别（L0～L4），然后只描述这个级别的架构信息。\n- 画出 Role：从不同的角度来分解系统，看看系统包含哪些角色，角色对应架构图中的区块、图标和节点等。\n- 画出 Relation：有了角色后，画出角色之间的关系，对应架构图中角色之间的连接线，不同的连接线可以代表不同的关系。\n- 最后画出 Rule：挑选核心场景，画出系统角色之间如何协作来完成某项具体的业务功能，对应系统序列图。\n\n### 四加一\n\n![4+1视图](/assets/屏幕截图%202021-01-18%20170117.png)\n\n- 逻辑视图：对系统职责进行划分，通常还要求对各逻辑元素间的关系，也就是接口进行描述\n- 实现视图：描述逻辑架构元素代码位置 描述代码构建相关的包括构建依赖、构建工具链、构建环境信息\n- 部署视图\n- 进程视图：组件之间的交互 常见的如时序图描述\n- 场景视图：从用户角度看系统需要实现的需求\n\n### 业务架构图\n\n描述系统对用户提供了什么业务功能\n\n![2022511135653](/assets/2022511135653.webp)\n\n- 通过不同颜色来标识业务状态\n- 业务分组管理\n- 区块对齐\n\n### 前端架构图\n\n描述客户端和前端的领域逻辑架构\n\n![2022511135951](/assets/2022511135951.webp)\n\n- 不同颜色来标识不同角色\n- 通过连接线来表示关系\n- 分层或分组\n\n### 系统架构图\n\n描述后端的逻辑架构\n\n![用来表示系统角色](/assets/202251114154.webp)\n![用来表示角色之间的关系](/assets/20225111423.webp)\n\n- 不同颜色来标识不同角色\n- 连接线来表示关系\n- 逻辑分组\n\n### 应用架构图\n\n跟系统架构图很像，唯一需要注意的点就是复杂系统分域来画\n\n![202251114521](/assets/202251114521.webp)\n\n### 部署架构图\n\n描述后端系统具体是如何部署的\n\n![202251114630](/assets/202251114630.webp)\n\n- 用图标代替区块，这样看起来更加美观和容易理解\n\n### 系统序列图\n\n描述某个业务场景下，系统各个角色如何配合起来完成业务功能\n\n![202251114746](/assets/202251114746.webp)\n\n### 架构立方体\n\n- 逻辑\n- 物理\n- 应用\n- 技术\n- 功能\n- 部署\n\n## 架构体系框架\n\n- ABSD\n- DSSA\n- AT\n\n## 架构的演进\n\n站在后端开发人员的角度上软件架构风格从大型机（Mainframe），到原始分布式（Distributed），到大型单体（Monolithic），到面向服务（Service-Oriented），到微服务（Microservices），到服务网格（Service Mesh），到无服务（Serverless）\n\n谈起微服务，会想到技术异构，便于部署，高性能等等，但这些似乎都只是锦上添花，架构的核心在于解决软件的存活问题，如果一个软件压根就不能提供服务，这些锦上添花的功能也毫无作用\n\n## 架构认知派别\n\n### 组成派\n\n架构由 模块/服务/领域 组成\n\n本质在描述组件与组件之间的交互（画各种架构图）\n\n### 决策派\n\n软件架构由一个个决策组成的有机整体（把架构比作城市规划）\n\n每个做的决策都有它背后的原因\n\n## 架构的目标\n\n用最小的人力成本来满足构建和维护该系统的需求，主要目的是为了解决软件系统复杂度带来的问题\n\n复杂性的来源：\n\n- [高并发](/软件工程/架构/系统设计/高并发.md)\n- [可用性](/软件工程/架构/系统设计/可用性.md)\n- 扩展性\n- 成本 安全性 规模大小\n\n在乱麻系统下工作，过度的自信导致软件维护成本持续上升\n\n软件的两个价值：\n\n- 行为价值 让系统正常运行 完成需求\n- 架构价值 让系统更容易修改\n\n维护架构价值，是研发人员所需要进行斗争的\n\n## 架构的意义\n\n### 项目干系人交流的手段\n\n语境不同、立场不同、渠道问题等导致的语义失真 所以使用架构作为手段沟通\n\n### [架构演进](/软件工程/架构/演进式架构.md)有助于原型的确定与设计\n\n### 早期设计决策的体现\n\n如果做架构决策：\n\n- SWOT分析\n- RASCI决策\n\n### 明确系统实现的约束条件\n\n![202191322132](/assets/202191322132.jpg)\n\nRAID矩阵：\n\n|-|Risk | Assumption | Issue | Dependency\n-|-|-|-|-\n决策1|||||\n决策2|||||\n决策3|||||\n\n### 是组织架构的反映 会影响组织架构\n\n- 康威定律\n\n### 是可复用、可传递的模型\n\n- 方法论\n- 模型\n\n架构可复用的内容一般都是比较少的，每个项目的架构肯定不能照搬 需要裁剪\n\n为了复用，需要对架构资产进行更新与保留，拥有一个知识传承的平台\n\n## 实现细节\n\n### 数据库\n\n- 为系统中的数据设计结构\n\n### web\n\n- web只是一种io设备\n\n### 应用程序框架\n\n- 引入框架带来的风险\n\n## 架构边界\n\n### 边界划分\n\n软件架构设计就是一门划分边界的艺术\n\n为了划分划分边界线，软件系统被分割成组件，这些组件的一部分是核心的业务相关组件，另一部分是非核心的但是是提供必要功能的组件，让这些非核心组件去依赖系统的核心组件\n\n通过划清边界，可以推迟一些细节性的决策\n\n- 领域划分\n- 按需求划分\n- 定制裁剪\n\n#### 何时何地划分\n\n- 画在不相关的事情中间\n\nIO是无关紧要的，软件系统的核心，是业务逻辑\n\n#### 插件式架构\n\n软件开发技术发展的历史就是如何想方设法增加插件，这些插件要么可以去掉，要么要多种实现\n\n### 跨边界调用\n\n边界线一侧的函数调用另外一侧的函数\n\n- 自律式的组件划分\n\n### 边界形式\n\n- 部署层次的组件\n- 线程\n- 进程\n- 服务\n\n### 单向边界\n\n设计架构时，往往需要使用反向接口来维护边界两侧组件的隔离性\n\n![202002031612](/assets/202002031612.png)\n\n### 边界与层次\n\n作为架构师，需要考虑：\n\n- 什么地方需要设计架构边界设计\n- 设计这些边界会带来多大的成本\n\n同时，设计边界需要深思熟虑，过度的工程设计往往比工程设计不足还要糟糕\n\n## 策略与层次\n\n本质上，软件系统是一组策略语句的集合\n\n软件架构的重点之一，是将策略彼此分离\n\n直接管理IO的策略，层次是最低的\n\n- 高层策略一般变更没有低层策略频繁\n\n当源码依赖方向统一调整低层指向高层策略，可以大幅度降低系统变更带来的影响\n\n## 业务逻辑\n\n业务逻辑就是系统中真正用于赚钱或者省钱的过程，这些过程被称为关键业务逻辑，关键业务逻辑通常会处理一些数据，这些数据叫做关键业务数据，关键业务逻辑与关键业务数据通常是紧密相连的，所以将他们两个放在一起，这种对象称之为业务实体\n\n### 用例\n\n- 输入\n- 步骤\n- 输出\n\n### 请求和响应模型\n\n对用例的输入输出对象，应该保持独立\n\n## [COLA](https://github.com/alibaba/COLA)\n\n- 阿里提出的一套通用架构方案，吸收了DDD、整洁架构、六边形架构\n\n### 扩展设计\n\n在系统设计时，针对业务或者场景预留一些扩展点\n\n## 整洁架构\n\n许多架构都是按照不同关注点对软件进行切割\n\n- 分离技术复杂度与业务复杂度\n\n### 特点\n\n- 独立于框架\n- 独立于UI\n- 独立于数据库\n- 独立于外部机构\n- 可测试\n\n### 依赖关系规则\n\n![202002031554](/assets/202002031554.png)\n\n- 内层圆不应该依赖外层圆\n- 外层圆的变更不应影响到内层圆\n\n### 谦卑对象\n\n谦卑对象模式是让单元测试的编写者区分容易测试的行为与难以测试的行为\n\n一个优秀的架构，应该拥有强大的可测试性\n\n- 展示器与视图\n\n### Main组件\n\n系统中，至少需要一个组件来负责创建、协调、监督其他组件，这个组件称为Main组件\n\nMain组件是系统中细节信息最多的组件，即Main组件是一个底层模块，处于架构圈的外层\n\n### 测试\n\n测试组件，可以视为最外圈的最外圈程序\n\n#### 可测试设计\n\n**脆弱的测试问题**\n\n不良的测试设计，会导致一个对通用组件的修改产生许多测试错误\n\n解决方法就是测试不要依赖于多变的东西\n\n### 整洁的嵌入式架构\n\n固件程序也可以指针对具体平台的编码\n\n#### 程序适用测试\n\n仅仅停留在让代码能跑起来的阶段\n\n## 架构的未来\n\n- 云化：XaaS\n- 演进式\n\n## 具体技术下的架构\n\n- 单体架构：Spring Boot\n\n使用传统的分层，打成一个jar包 运行它\n\n![20201027154734](/assets/20201027154734.png)\n\n- 微服务：Spring Cloud\n\n高可用 高性能等需求使我们不得不对系统进行拆分，在前面的单体架构下，分成多个工程 业务代码与服务基础设施代码耦合在一起 构成了传统的微服务，也是目前最流行的架构\n\n![20201027154755](/assets/20201027154755.png)\n\n- 微服务：K8S\n\n在传统的微服务下，基础设施代码与业务代码耦合在一起，这个阶段下使用了K8S的容器基础设施来完成大部分服务治理功能，应用程序可以更专注我们的业务\n\n![20201027154819](/assets/20201027154819.png)\n\n- 服务网格：Istio\n\nK8S将服务治理沉淀到基础设施只是第一步，接下来服务网格将这事做的更加彻底，更加可管理 可观测\n\n![20201027154819](/assets/20201027154819_k1n1l7oa8.png)\n\n- 另外一条支线：无服务\n\n上传代码，某些事件会触发你的代码运行它，彻底不用管理基础设施，一切交给云\n","metadata":"tags: ['架构']\nstandardName: 'Architecture'\nbooks: [\n  {name: '架构整洁之道'}\n]","hasMoreCommit":true,"totalCommits":26,"commitList":[{"date":"2022-06-20T16:45:40+08:00","author":"cjiping","message":"✏️更新 演进式架构","hash":"6409b9e77578b3aa8538a4192b63142380472e61"},{"date":"2022-05-30T16:08:47+08:00","author":"cjiping","message":"✏️更新 架构","hash":"8b3b269539a8a44ec471be887b2a697e8eae431e"},{"date":"2022-05-21T18:04:56+08:00","author":"MY","message":"✏️更新 架构","hash":"13b78f2e751f5fc16074ccd248e6fb7140174f75"},{"date":"2022-05-16T17:51:56+08:00","author":"cjiping","message":"✏️更新 架构","hash":"609399450834fa88477558036a74e3dad7084fd7"},{"date":"2022-05-11T15:01:31+08:00","author":"cjiping","message":"✏️更新 架构","hash":"afb18fe967347f815b204ee9dec1c48fcd250b35"},{"date":"2022-05-03T16:55:06+08:00","author":"MY","message":"✏️更新 架构","hash":"6fd9e1ee0dc0d30595be0a9691ec375cd5496551"},{"date":"2022-01-27T11:38:09+08:00","author":"cjiping","message":"📦整理随手","hash":"f5ec44c039a7d8dec55ca7b4885582d06c059e22"},{"date":"2022-01-04T17:17:52+08:00","author":"cjiping","message":"✏️更新 架构","hash":"962f1333943196348c09245905c86029a6716e3e"},{"date":"2022-01-04T10:28:49+08:00","author":"cjiping","message":"📦整理 架构 相关","hash":"086a4c105f4e473d80fa2d44e5416a06fd30cc5c"},{"date":"2021-10-06T16:51:38+08:00","author":"My","message":"✏️更新 架构模式","hash":"1fe68df435ca36f118a60aa439272509c6789b9c"}],"createTime":"2020-01-24T15:25:31+08:00"}