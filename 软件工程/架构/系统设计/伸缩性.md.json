{"name":"伸缩性","id":"软件工程-架构-系统设计-伸缩性","content":"# 伸缩性（Scalability）\n\n> 伸缩性描述了系统在应对负载变化时，通过调整资源（硬件或软件）来维持性能与稳定性的能力。\n> 一个具备良好伸缩性的系统，能够“按需增长、按需缩减”，在性能、成本与复杂度之间达到平衡。\n\n---\n\n## 一、伸缩性的核心概念\n\n### 1.1 定义与衡量\n\n* **高伸缩性**：系统能在增加计算、存储或网络资源时，近似线性地提升吞吐能力。\n* **伸缩性差**：系统性能增长缓慢或成本高昂，扩容效率低下。\n* **衡量指标**：\n\n  * **吞吐量提升比**（Scaling Efficiency）\n  * **响应时间变化曲线**\n  * **扩容成本与收益比**\n\n### 1.2 伸缩类型\n\n| 类型                           | 描述         | 示例                                |\n| ---------------------------- | ---------- | --------------------------------- |\n| **垂直伸缩（Vertical Scaling）**   | 提升单节点性能    | 增加 CPU、内存、磁盘性能                    |\n| **水平伸缩（Horizontal Scaling）** | 增加节点数量     | 扩展服务实例、副本或分片                      |\n| **弹性伸缩（Elastic Scaling）**    | 根据负载自动调整规模 | Kubernetes HPA、Auto Scaling Group |\n\n---\n\n## 二、热点问题（Hotspot）\n\n> 热点是伸缩性问题中最常见的瓶颈来源。\n> 热点会引发链式反应，从局部压力到系统崩溃。\n\n### 2.1 热点链路\n\n```\n行为热点 → 链路热点 → 数据热点 → 热点压力 → 瓶颈限制 → 系统崩溃\n```\n\n### 2.2 热点类型\n\n* **行为热点**：某一类用户行为（如秒杀、签到）集中触发。\n* **链路热点**：同一条调用链（如下单链路）频繁被请求。\n* **数据热点**：某个 Key 或 ID 被大量并发访问（如同一商品）。\n\n---\n\n## 三、热点治理策略\n\n### 3.1 热点预测\n\n* 基于历史 PV/UV 数据进行建模，提前识别高风险点；\n* 可结合 **舆情监控、运营活动计划、搜索热度** 等进行预测。\n\n### 3.2 热点发现\n\n* **实时监控日志**：统计接口 QPS、延迟、错误率；\n* **聚合分析**：对调用链数据聚合，计算访问集中度；\n* **事件触发**：当阈值超标时发布热点数据事件。\n\n### 3.3 热点预案\n\n* 缓存预热：提前加载可能成为热点的数据；\n* 动态扩容：热点发现后对相关服务、缓存实例扩容；\n* 限流保护：设置动态阈值，防止局部流量冲垮全局；\n* 非热点降级：优先保证热点服务资源。\n\n### 3.4 热点逻辑优化\n\n* 异步化：高并发情况下，将写操作或非关键逻辑改为异步；\n* 消息通知：利用消息队列削峰填谷；\n* 局部降级：在热点冲击下暂停非核心功能。\n\n### 3.5 热点分散策略\n\n* **分库分表 / Key 拆分**：将热点 Key 分布到多个物理节点；\n* **Hash 映射**：对 Key 做随机扰动；\n* **多层缓存**：本地缓存 + 分布式缓存 + 数据库；\n* **全链路压测**：验证分散策略的有效性与极限阈值。\n\n---\n\n## 四、无状态应用（Stateless Application）\n\n> 无状态是伸缩性的基础前提。\n> 每个实例都能独立处理请求，不依赖于本地状态。\n\n### 4.1 特点\n\n* 请求无上下文依赖；\n* 可随时水平扩容或缩容；\n* 故障节点替换简单。\n\n### 4.2 实现手段\n\n* **Serverless 架构**：按需运行、自动伸缩；\n* **Kubernetes HPA（Horizontal Pod Autoscaler）**：基于 CPU/MEM/自定义指标自动扩缩；\n* **Istio + Knative**：实现细粒度流量控制与事件驱动伸缩。\n\n### 4.3 负载均衡\n\n详见：[负载均衡](/软件工程/架构/系统设计/高并发.md#负载均衡)\n\n负载均衡提供：\n\n* **高可用性**：节点故障自动转移；\n* **弹性伸缩**：动态增加/移除节点；\n* **会话路由策略**：支持随机、轮询、最少连接等算法。\n\n---\n\n## 五、有状态应用（Stateful Application）\n\n> 有状态应用的伸缩复杂度更高，需要同时考虑数据一致性与可用性。\n\n### 5.1 常见策略\n\n#### 共享数据架构\n\n* **结构化数据**：使用数据库（如 MySQL、PostgreSQL）；\n* **非结构化数据**：使用对象存储或搜索引擎；\n* 注意：共享资源会形成单点瓶颈，需考虑读写分离或分区。\n\n#### Share-Nothing 架构\n\n* 每个节点独立持有数据副本；\n* 无共享资源，扩容简单；\n* 面临一致性与副本同步的挑战。\n\n### 5.2 Session 管理模式\n\n#### Sticky Session（会话绑定）\n\n优点：实现简单\n缺点：单节点宕机会话丢失、负载不均\n\n```mermaid\nflowchart LR\n    C1[Client1] --> LB[[Load Balancer]] --> S1[Server1]\n    C2[Client2] --> LB --> S1\n    C3[Client3] --> LB --> S2[Server2]\n```\n\n#### Session Replication（会话同步）\n\n优点：容灾性强\n缺点：内存消耗大、同步开销高\n\n```mermaid\nflowchart LR\n    C1[Client1] --> LB[[Load Balancer]]\n    LB --> S1[Server1]\n    LB --> S2[Server2]\n    S1 -.Session Sync.-> S2\n```\n\n#### Session Server（会话集中存储）\n\n优点：应用无状态化、伸缩灵活\n缺点：依赖外部系统、增加一次网络访问\n可使用 Redis、Memcached、MySQL 等存储。\n\n```mermaid\nflowchart LR\n    C1[Client] --> LB[[Load Balancer]]\n    LB --> App1[App Server 1]\n    LB --> App2[App Server 2]\n    App1 -.-> SS[(Redis / MySQL Session Store)]\n    App2 -.-> SS\n```\n\n---\n\n## 六、消息解耦与异步伸缩\n\n> 消息队列不仅用于系统解耦，也是一种“时间维度上的伸缩手段”。\n\n### 6.1 解耦价值\n\n* 生产者与消费者独立伸缩；\n* 异步处理高峰流量；\n* 提供可靠重试、顺序保证等特性。\n\n### 6.2 常见应用场景\n\n* 订单、支付等高峰业务；\n* 日志、埋点等非实时任务；\n* 广播式通知（发布-订阅模型）。\n\n### 6.3 实现组件\n\nKafka / RabbitMQ / RocketMQ / Pulsar 等。\n\n---\n\n## 七、伸缩性设计的系统思维\n\n1. **分层伸缩**：前端层、服务层、数据层各自独立伸缩；\n2. **弹性自动化**：基于指标自动扩缩容（CPU、QPS、延迟）；\n3. **监控与回溯**：必须有实时可观测性；\n4. **成本优化**：避免“为峰值买单”，追求“弹性成本”；\n5. **灰度验证**：伸缩策略需通过压测与灰度实验验证。\n\n---\n\n## 八、总结\n\n| 类别    | 伸缩策略       | 优点       | 缺点     |\n| ----- | ---------- | -------- | ------ |\n| 无状态应用 | 动态扩缩、负载均衡  | 弹性强、架构简单 | 状态需外部化 |\n| 有状态应用 | 分片、复制、共享存储 | 一致性可控    | 扩容复杂   |\n| 热点治理  | 分散、限流、异步化  | 提升稳定性    | 调优成本高  |\n| 消息解耦  | 异步削峰、独立伸缩  | 减少耦合     | 延迟增加   |\n","metadata":"tags: ['架构', '分布式']","hasMoreCommit":false,"totalCommits":7,"commitList":[{"date":"2025-10-20T20:11:04+08:00","author":"MY","message":"docs(architecture): 完善伸缩性系统设计文档","hash":"709e405ddf2e81d574310e16b81f5c7540f46d58"},{"date":"2024-11-22T10:11:46+08:00","author":"MY","message":"📦伸缩性","hash":"200aa0a73291a296032cf358327b73c387f0662f"},{"date":"2022-01-16T16:18:31+08:00","author":"MY","message":"✏️更新 分布式相关","hash":"0c267fb25c7fd1f2a3536cab5c979b0c3bf90b6d"},{"date":"2021-10-27T21:54:12+08:00","author":"My","message":"✏️更新 扩展性&伸缩性","hash":"ba90a81dc35735a602d80e767fc470eef3444197"},{"date":"2021-10-24T23:23:23+08:00","author":"My","message":"✏️更新 伸缩性&缓存","hash":"0c1421f1f72a49b1d1f3eb95688cf267dae211ae"},{"date":"2021-10-19T23:08:41+08:00","author":"My","message":"✏️更新 热点数据","hash":"fed87c8bd27ae67948792b47b7f5b82d6ff8cb75"},{"date":"2021-09-28T22:48:48+08:00","author":"My","message":"➕新增 伸缩性","hash":"444a5e6387ea2e121bb328a8b887540a3926e42f"}],"createTime":"2021-09-28T22:48:48+08:00"}