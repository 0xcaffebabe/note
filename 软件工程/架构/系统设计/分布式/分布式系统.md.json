{"name":"分布式系统","id":"软件工程-架构-系统设计-分布式-分布式系统","content":"# 分布式系统（Distributed System）\n\n> 分布式系统是一种将多个独立计算节点通过网络协作组成统一整体的系统架构，它的核心目标是**资源共享、性能扩展与高可用性**。\n> 在现代互联网体系中，几乎所有大型系统（搜索引擎、电商、支付、云计算平台）都构建在分布式架构之上。\n\n---\n\n## 一、概览\n\n![分布式系统的逻辑分层](/assets/批注%202020-06-30%20114651.png)\n\n分布式系统通常由以下几个主要部分构成：\n\n* **存储系统**\n\n  * GFS、HDFS、Ceph\n* **计算系统**\n\n  * 批处理：MapReduce、Spark\n  * 流处理：Storm、Flink\n* **节点关系**\n\n  * 主从式（Master-Slave）\n  * 对等式（Peer-to-Peer）\n\n中间件作为通信与协调的核心层，连接了整个系统的各个节点：\n\n![中间件连接了分布式系统的各个节点](/assets/屏幕截图%202022-03-30%20142751.png)\n\n---\n\n## 二、网络与通信基础\n\n分布式系统运行在计算机网络之上。网络的可靠性与延迟直接影响系统的一致性、可用性与性能。\n\n### 1. 网络硬件\n\n* **以太网 (Ethernet)**：局域网通信的基础。\n* **互联网 (Internet)**：连接分布式节点的全球通信网络。\n\n### 2. 网络协议与服务\n\n* **面向连接（TCP）** vs **无连接（UDP）**\n* **数据流（Stream）** vs **数据包（Datagram）**\n* **远程调用（RPC）**：分布式系统通信的核心抽象，常见实现包括 gRPC、Thrift。\n\n---\n\n## 三、接入与负载均衡层\n\n前端层和接入层负责请求的分发与入口管理。\n\n### 1. 前端技术\n\n* MVC 框架（Spring MVC、Django）\n* WebSocket、RESTful API、GraphQL\n\n### 2. 反向代理\n\n* **Nginx**：HTTP 反向代理、负载均衡、缓存。\n* **Varnish**：高性能 Web 缓存。\n\n### 3. 负载均衡\n\n* **DNS 轮询**（L3 层）\n* **硬件负载均衡（F5）**\n* **软件负载均衡（LVS、HAProxy、Nginx）**\n\n负载均衡的核心目标是 **将请求均匀分发到后端节点**，避免单点瓶颈。\n\n---\n\n## 四、分布式中间件\n\n中间件是分布式系统的“胶水层”，承担节点间通信、数据一致性、任务协调、异步传递等关键职责。\n\n### 1. 分布式协调与同步\n\n* **一致性协议**\n\n  * Paxos、Raft、ZAB、ARK、NPC\n* **典型实现**\n\n  * Chubby（Google）\n  * Zookeeper（Apache）\n* **主要功能**\n\n  * 配置管理、分布式锁、服务注册发现、选主、心跳监测。\n\n### 2. 数据访问中间件\n\n* **客户端代理**\n\n  * Sharding-JDBC\n* **服务端代理**\n\n  * MyCat、Cobar\n* **目标**\n\n  * 数据分片、路由、负载均衡、读写分离。\n\n### 3. 分布式服务调用（RPC）中间件\n\n* Dubbo、Dubbox、gRPC、Thrift、Motan\n* **特征**\n\n  * 服务注册中心（Zookeeper、Nacos）\n  * 负载均衡与容错（Failover、Failfast）\n  * 序列化协议（Protobuf、JSON、Avro）\n\n### 4. 分布式消息中间件\n\n* Kafka、RabbitMQ、RocketMQ、Pulsar\n* **应用场景**\n\n  * 异步化、削峰填谷、系统解耦。\n\n### 5. 分布式链路追踪中间件\n\n* Dapper（Google）\n* Zipkin、SkyWalking、Pinpoint、鹰眼\n* **作用**\n\n  * 调用链监控、性能分析、全链路追踪。\n\n---\n\n## 五、分布式存储系统\n\n### 1. 分布式文件系统\n\n业界代表：\n\n* GFS（Google File System）\n* HDFS（Hadoop Distributed File System）\n* TFS（淘宝文件系统，适用于海量小文件）\n\n**设计要点：**\n\n* 传输模式（上传/下载/远程访问）\n* 命名与目录层次\n* **命名透明性**\n\n  * 位置透明：逻辑路径与物理位置解耦。\n  * 位置独立：文件迁移不影响访问路径。\n* **文件共享语义**\n\n  * 顺序一致性、写后读一致性。\n\n---\n\n### 2. NoSQL 数据库\n\nNoSQL 以 **高可用与扩展性** 为目标，通过牺牲部分 ACID 特性（尤其是 C）实现 CAP 平衡。\n\n| 类型    | 特征                   | 代表系统                      |\n| ----- | -------------------- | ------------------------- |\n| 键值型   | 高速缓存、简单查询            | Redis、LevelDB、Tair、Dynamo |\n| 列存型   | 按列存储、高效聚合            | Bigtable、HBase、Cassandra  |\n| 文档型   | 灵活的 schema-free 数据模型 | MongoDB、CouchDB、RethinkDB |\n| 搜索引擎型 | 全文索引与查询优化            | ElasticSearch、Solr        |\n| 图数据库  | 图结构关系与遍历             | Neo4j、JanusGraph          |\n| 时序数据库 | 时间序列数据采集与分析          | InfluxDB、Prometheus TSDB  |\n\n---\n\n### 3. NewSQL 数据库\n\nNewSQL 融合了传统关系型数据库与 NoSQL 的优点，兼顾 **一致性与可扩展性**。\n\n代表系统：\n\n* Google Spanner / F1\n* TiDB\n* OceanBase\n* CockroachDB\n\n关键特性：\n\n* 分布式事务（TrueTime、两阶段提交）\n* 全局一致性快照\n* 水平扩展与自动分片\n\n---\n\n## 六、分布式任务调度\n\n分布式任务调度系统是集群资源管理与作业分配的核心组件。\n\n### 1. 单体调度（Centralized Scheduler）\n\n一个主节点负责所有调度决策：\n\n* 统一资源视图\n* 调度器单点问题突出\n* 示例：早期 Hadoop YARN\n\n### 2. 两层调度（Two-Level Scheduler）\n\n将调度职责分为两层：\n\n* 第一层：集群资源管理（Mesos Master）\n* 第二层：框架级调度（Hadoop Scheduler、MPI Scheduler）\n\n```mermaid\nstateDiagram-v2\n  MPIScheduler --> MesosMaster: 注册任务\n  HadoopScheduler --> MesosMaster: 注册任务\n  MesosMaster --> MesosSlave1: 下发任务\n  MesosMaster --> MesosSlave2: 下发任务\n  MesosSlave1 --> MesosMaster: 上报资源\n  MesosSlave2 --> MesosMaster: 上报资源\n```\n\n### 3. 共享状态调度（Shared-State Scheduler）\n\n每个调度器维护全局状态视图，通过状态存储共享集群信息。\n\n* 可扩展性强\n* 更快的任务响应\n* 示例：Kubernetes 调度架构\n\n```mermaid\nflowchart TD\n    subgraph Scheduler1[Scheduler]\n        CellState1[Cell State]\n    end\n    subgraph Scheduler2[Scheduler]\n        CellState2[Cell State]\n    end\n    subgraph StateStorage[State Storage]\n        CellStateStorage[Cell State]\n    end\n    Scheduler1 --> |Tasks| StateStorage\n    Scheduler2 --> |Tasks| StateStorage\n```\n\n---\n\n## 七、分布式系统设计思想\n\n### 1. 云化与虚拟化\n\n* 虚拟机、容器（Docker）\n* 资源池化与弹性伸缩\n\n### 2. 一切皆可能失败\n\n* 容错设计：多节点、副本、心跳检测\n* 冗余与Failover机制\n\n### 3. 水平扩展（Scale Out）\n\n* 数据：分片（Sharding）\n* 服务：集群、负载均衡\n* 数据中心：异地多活、灾备\n\n### 4. 简化与解耦\n\n* 减少组件依赖\n* 异步化削峰填谷\n* 最终一致性（BASE模型）\n\n### 5. 微服务化与可观测性\n\n* 服务粒度拆分\n* 链路追踪、日志、指标、告警三位一体\n\n---\n\n## 八、大型互联网架构共性分析\n\n| 层级   | 特征                   | 实现                    |\n| ---- | -------------------- | --------------------- |\n| 分层设计 | 存储层、服务层、接口层、分析层      | 典型三层/四层架构             |\n| 集群管理 | 容器化、资源池化、独立调度系统      | Kubernetes、Mesos      |\n| 存储层  | 文件系统 + 数据库 + 缓存      | HDFS、MySQL、Redis      |\n| 服务层  | RPC 框架 + 注册中心 + 消息队列 | Dubbo、Kafka、Zookeeper |\n| 数据分析 | 实时 + 离线分离            | Hadoop、Spark、Flink    |\n| 可观测性 | 监控、日志、追踪、报警体系        | Prometheus、SkyWalking |\n\n---\n\n## 九、总结\n\n分布式系统是一门跨越 **计算机网络、操作系统、数据库、系统架构** 的综合学科。\n它的核心挑战包括：\n\n* **一致性**：CAP、Paxos、Raft\n* **可用性**：故障检测、容错、自动恢复\n* **扩展性**：水平扩展、负载均衡\n* **性能**：异步化、并行计算\n* **可观测性**：链路追踪与监控体系\n","metadata":"tags: ['分布式']","hasMoreCommit":false,"totalCommits":10,"commitList":[{"date":"2025-10-27T11:21:36+08:00","author":"MY","message":"docs(distributed-system): 重构分布式系统文档结构与内容","hash":"606694c89d2e5d7f3d263ee230895c0361e8accf"},{"date":"2024-07-25T20:04:30+08:00","author":"MY","message":"✏分布式","hash":"b36d276c7677e2e4247db981d5e0c81e3c282027"},{"date":"2023-01-10T17:57:35+08:00","author":"cjiping","message":"📦整理 全文检索","hash":"691f05595b3b54641c0ccd664a4f22d1e705da00"},{"date":"2022-05-05T21:27:28+08:00","author":"MY","message":"✏️更新 架构","hash":"71d10631ca3ab266514f747d12e434e26140bb30"},{"date":"2022-03-30T15:06:21+08:00","author":"MY","message":"📦整理 分布式系统","hash":"9e1f51e184d8307bec41c726199bea3d0b5775c6"},{"date":"2021-03-12T14:59:02+08:00","author":"cjiping","message":"📦整理 分布式相关内容","hash":"e7f0364d759d107f46a9a3dea8862adca48dddc3"},{"date":"2020-07-03T11:56:00+08:00","author":"MY","message":"更新 分布式系统","hash":"92aa8159d8cbbd249362c0386dc1f3e5fe619520"},{"date":"2020-07-02T13:25:38+08:00","author":"MY","message":"更新 分布式系统","hash":"fb2fd5d00b455c90e0970bce9554c0f8bdb937e0"},{"date":"2020-07-01T12:37:03+08:00","author":"MY","message":"更新 分布式系统","hash":"b4fd3dd2573c5dd8f92c6aa7f184079afafea472"},{"date":"2020-06-30T12:35:43+08:00","author":"MY","message":"增加 分布式系统","hash":"9d46e8b3226a4cedcb377aba8bb7ddb8db41f5da"}],"createTime":"2020-06-30T12:35:43+08:00"}