{"name":"可观测性","id":"软件工程-架构-系统设计-可观测性","content":"# 可观测性\n\n如果能够在不发布新代码（如增加一个用于调试的日志）的情况下理解任何奇怪或不确定性的状态，那么我们的系统就具备可观测性\n\n结构化的事件（Structured Events）就是可观测性的基础，通过高基数（指包含在一个集合中的唯一值的数量）、高维度（数据中键（key）的数量）的事件，将成为能够发现隐藏在复杂系统架构中的其他隐藏问题的关键组成部分\n\n可观测性与传统监控的区别：\n\n1. 需要事先预测问题可能发生在哪里，以及问题发生的模式\n2. 关注的维度不一样，监控更加关注基础设施的资源情况，可观测平台瞄准的恰恰是应用软件本身\n3. 数据收集的全面性（不仅仅是指标数据）和关联性上\n\n以下三种监控数据都只是结构化事件的一部分\n\n![监控的三种维度方式](/assets/20201125142726.png)\n![监控的三种维度方式](/assets/批注%202020-06-21%20084850.png)\n![各维度技术栈](/assets/批注%202020-04-13%20160526.png)\n\n- 日志：记录离散事件，通过这些记录事后分析出程序的行为\n- 追踪：单体的调用栈追踪或者服务调用之间的分布式追踪\n- 度量：度量是指对系统中某一类信息的统计聚合\n\n日志收集：与具体技术栈无关 ELK EFK\n\n度量：Prometheus\n\n链路追踪：Zipkin...\n\n## 链路追踪\n\n目标：排查故障 分析性能数据 监控服务间的行为\n\n- trace与span\n\n![2020112514590](/assets/2020112514590.png)\n\n链路追踪的挑战：\n\n1. 异构技术\n2. 对性能敏感\n3. 对应用透明\n4. 自动扩缩容\n5. 持续的监控\n\n### 数据收集\n\n- 基于日志信息的追踪：将Trace、Span等信息直接输出到应用日志中，然后随着所有节点的日志归集过程汇聚到一起，再从全局日志信息中反推出完整的调用链拓扑关系\n- 基于服务的追踪：通过代码注入的方式可以得到方法调用栈等信息 并且需要通过独立的网络调用上报信息 需要消耗更多的资源\n- 基于sidecar代理的方式：这种方式对应用透明 但它只能实现服务调用层面的追踪\n\n### 追踪规范化\n\nOpenTracing（链路追踪标准） -> OpenCensus（在前者的基础上，还包括度量） -> OpenTelemetry\n\n#### OpenTelemetry\n\n跨语言规范：\n\nAPI与SDK需要通过插桩的方式来收集数据\n\n1. API：定义用于生成和关联追踪、指标和日志的数据类型和操作\n2. SDK：定义 API 特定语言实现的要求，同时还定义配置、数据处理和导出等概念\n3. 数据：定义遥测后端可以提供支持的 OpenTelemetry 协议 （OTLP），OTLP 的数据模型定义是基于 ProtoBuf 完成的\n\nOpenTelemetry Collector：针对如何接收、处理和导出遥测数据提供了与供应商无关的实现\n\n![OpenTelemetry Collector 架构](/assets/2022112414129.webp)\n\n- Receiver：负责按照对应的协议格式监听和接收遥测数据，并把数据转给一个或者多个 Processor。\n- Processor：负责加工处理遥测数据，如丢弃数据、增加信息、转批处理等，并把数据传递给下一个 Processor 或者一个或多个 Exporter。\n- Exporter：负责把数据发送给下一个接收端（一般是指后端），比如将指标数据存储到 Prometheus 中\n\n部署模式：\n\n1. Agent模式 通过边车直接跟应用部署在一起\n2. Gatewaay模式，一个独立的中间件，\n\n## 聚合度量\n\n### 指标收集\n\n指标数据类型\n\n- 计数度量器（Counter）：对有相同量纲、可加减数值的合计量\n- 瞬态度量器（Gauge）：表示某个指标在某个时点的数值，通常关注的是当前值\n- 吞吐率度量器（Meter）：单位时间内某个事件的发生次数\n- 直方图度量器（Histogram）：用于描述数据分布，通过将数据分割成若干个区间，直方图度量器能够显示每个区间内的数据频数\n- 采样点分位图度量器（Quantile Summary）：在客户端计算分位值，然后把计算之后的结果推给服务端存储\n\n指标采集方式\n\n- push\n- pull\n\n指标传输协议：\n\n- OpenMetrics\n\n健康检查API模式：\n\n![屏幕截图 2021-01-29 094428](/assets/屏幕截图%202021-01-29%20094428.png)\n\n### Prometheus\n\n![架构](/assets/批注%202020-04-22%20150857.png)\n\n### 存储查询\n\n如果使用传统的关系型数据库存储度量数据 那每天监控数据的产生量将会非常的大\n\n大部分度量数据都可以使用专门的时序数据库来进行存储\n\n由于度量数据多写少读、几乎不删改、数据只顺序追加这些特点，时序数据库就可以使用某些策略来进行优化：\n\n1. 日志结构的合并树\n2. 对数据进行采样进行节省空间 比如几周前的数据就只保留一天 几年前的就保留一周\n3. 轮替数据存储 类似于环形缓冲区 输入可以无限 存储有限\n\n### 监控预警\n\n- Grafana\n- Alter Manager\n\n## 可观测性驱动开发\n\n在整个开发过程中考虑应用程序的可靠性和软件质量，利用工具或是插桩来观测系统的状态和行为\n\n### 文化\n\n- 拥抱失败\n- 允许犯错：事件后审查的目标应该是识别系统和流程中的弱点，并通过建立可观测性和工程化来避免这个错误再次发生\n- 拒绝个人英雄主义：依靠少数人甚至一个人的能力来理解和调试系统是不可信的\n- 早排查：代码部署到生产环境后，应及时通过可观测性来查看生产环境的状态\n\n## 可观测性文化\n\n1. 用真实数据确定工作优先级并做出决策\n2. 根据对业务来说真正重要的事情发出告警，找出真正的问题或是影响，而不仅仅根据基础架构的情况作出判断\n3. 不断消除告警\n4. 持续地对文档进行改进对于建立可观测性文化来说至关重要\n\n## 可观测性成熟度框架\n\n- 阶段1：感知到问题\n- 阶段2：快速了解问题的背景和影响，此时回滚是第一位的\n- 阶段3：问题被修复之后，此时工程师可以花时间定位和理解潜在问题\n","metadata":"","hasMoreCommit":false,"totalCommits":8,"commitList":[{"date":"2024-05-28T19:53:40+08:00","author":"MY","message":"✏监控","hash":"86620b7aeaf14cd9f9f392c4fc8ee5a3f9be003c"},{"date":"2023-09-18T17:03:32+08:00","author":"MY","message":"📦日志","hash":"e78cec26d3d3c8f6c8cfa91a61617966a1a32326"},{"date":"2022-11-25T14:57:32+08:00","author":"cjiping","message":"✏️可观测性","hash":"3b22d406a46507c4c1e658c44b223382a894b742"},{"date":"2022-11-24T15:08:54+08:00","author":"cjiping","message":"✏️可观测性","hash":"5a5ddf7570e4f994f1260e303222b9c22fac50b5"},{"date":"2022-11-23T15:05:28+08:00","author":"cjiping","message":"✏️可观测性","hash":"bcc578cee95e84d2c73cf198eb4705ef3f3b8278"},{"date":"2022-01-13T11:01:59+08:00","author":"cjiping","message":"📦整理 可观测性","hash":"1819ddeda05220176705ac83510cee29ad6d33c5"},{"date":"2021-01-29T09:47:59+08:00","author":"cjiping","message":"✏更新 可用性","hash":"fab9bf0f386db34ee59295478c8114b11c396068"},{"date":"2020-11-25T15:49:46+08:00","author":"cjiping","message":"➕增加 可观测性","hash":"2c84a142b408258670583d750c46c773e0898dd5"}],"createTime":"2020-11-25T15:49:46+08:00"}