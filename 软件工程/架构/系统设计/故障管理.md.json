{"name":"故障管理","id":"软件工程-架构-系统设计-故障管理","content":"# 故障管理\n\n故障发生 -> 故障发现 -> 故障处理 -> 故障复盘\n\n## 故障场景\n\n- 针对具体故障类型具体分析\n- 根据重要程度、影响程度、影响范围对场景分级\n\n场景关联：实际场景 -> 故障结果 -> 故障原因 -> 引发行为\n\n### 资损\n\n- 该收的钱没收到\n- 导致客户损失的赔偿\n\n解决：\n\n- 追回\n- 数据订正\n- 流程补偿\n\n### 设计缺陷\n\n- 没考虑到\n\n解决：\n\n- SOP引导，让用户绕开产品缺陷\n- 功能关闭，临时禁止用户使用\n- 重新发版\n\n### 流量故障\n\n- 服务承载、数据库、基础设施能力不足\n\n解决：\n\n- 限流熔断降级\n- 重启\n- 扩容\n\n### 环境故障\n\n- 基础环境中间件等出现运维变更、使用不当、压力过高导致的故障\n\n解决：\n\n- 替换基础环境\n- 重启\n- 限流\n- 针对使用不当的代码进行修复\n\n### 应用故障\n\n### 数据故障\n\n- 一般是伴随着其他故障产生导致数据的不正确\n\n发现：\n\n- 业务监控\n- 巡检对账\n- 用户反馈\n\n解决：\n\n- 数据订正 使用SQL批量更新等\n- 数据清洗 难以使用SQL订正 编写脚本清洗\n- 修改导致错误的代码\n\n### 发布故障\n\n解决：回滚\n\n### 安全故障\n\n- 安全漏洞被利用\n\n解决：\n\n- 升级依赖\n- 重新设计相关有漏洞功能\n- 下线止血\n\n### 研发故障\n\n- 设计缺陷、代码错误\n- 线上调整、数据变更\n\n解决：\n\n- 开关切换\n- 回滚\n- 发版解决\n\n### 历史遗留故障\n\n这种问题存在的比较久，所以容忍度一般比较高，先止血，然后慢慢修复\n\n### 小概率故障\n\n解决：\n\n- 做好设计，在故障时逃逸\n- 使用后备方案保证可用性\n\n## 研发操作管理\n\n### 风险定级\n\n- 查询类：大批量数据查询仍有一定风险，小数据量基本无风险\n- 变更类：根据影响范围不同风险不同\n\n风险降级：\n\n- 缩小范围\n- 灰度发布\n- 回滚预案\n- 限流止血\n\n### 发布监管\n\n- 线上自由变更危害很大\n\n通过系统记录相关操作，使用审批流程引入人来监控\n\n发布前要有发布卡点，如代码扫描，自动化测试来保证基础质量\n\n使用发布窗口限定时间，确保发布期间有人员值守\n\n#### 发布窗口\n\n- 避免散乱的发布\n- 确保发布受到监管\n- 避免临近节假日\n- 避免影响用户使用\n\n### [灰度发布](/运维/灰度发布.md)\n\n### 发布前测试\n\n发布提交（自动化测试） -> 发布流程（QA审批） -> 发布成功（QA验收）\n\n## 故障监控发现\n\n### 系统监控\n\n### 业务监控\n\n### 舆情监控\n\n## 故障分析定位\n\n### 系统诊断\n\n根据现场得到现象，从而描述问题\n\n根据输入输出定位分析是上游问题还是当前模块问题\n\n根据已有日志或者指标判断是否是被上游错误影响、还是本身问题，亦或者与发布有关联、是否跟历史问题有关联\n\n### 业务诊断\n\n- 无明显异常，整体业务存在问题（业务指标异常）\n\n确定是否真的有异常，确定业务是否有损失\n\n### 日志诊断\n\n- 被动诊断：发现问题查询日志\n- 主动诊断：根据日志发现已经出现的异常或者潜在的异常\n\n## 故障恢复\n\n- 重启限流扩容移除\n- 降级回滚切换\n\n### 预案设定与执行\n\n设定预案，发现线上问题自动报警并根据场景执行预警，以达到快速止血恢复的目的\n\n```mermaid\nstateDiagram-v2\n  预案维护 --> 指标沉淀\n  预案维护 --> 问题发现\n  指标沉淀 --> 预案执行\n  问题发现 --> 预案执行\n  预案执行 --> 风险预防\n  预案执行 --> 止血情况\n  止血情况 --> 效果评估\n  风险预防 --> 效果评估\n  效果评估 --> 预案维护\n```\n\n## 故障复盘\n\n### 过程\n\n- 发现是否及时，是否及时触达相关人员\n- 止血是否迅速有效，预案是否有用\n- 恢复的过程\n\n### 结果\n\n- 最终产生的影响\n- 故障的等级\n- 故障的责任\n- 发出故障完结报告：包括故障详细信息，如时间点、影响面、时间线、根因、责任团队、后续改进措施，以及通过本次故障总结出来的共性问题和建议\n\n### 故障分级\n\n根据场景、影响、持续的时间\n\n等级上升：随着故障危害加大，也要进行等级上升\n\n等级下降：故障产生的影响及时修复或者损失被追回\n\n### 故障定责\n\n主要目的是判定责任方，由责任方来落地或推进改进措施\n\n1. 变更执行：变更方没有及时通知到受影响方，或者事先没有进行充分的评估，出现问题，责任在变更方；如果通知到位，受影响方没有做好准备措施导致出现问题，责任在受影响方；变更操作的实际影响程度大大超出预期，导致受影响方准备不足出现故障，责任在变更方\n2. 服务依赖：私自调用接口，或者调用方式不符合约定规则，责任在调用方；如果是服务方没有明确示例或说明，导致调用方出现问题，责任在服务方\n3. 第三方责任：电力故障、服务器故障、运营商网络故障等不可抗力导致，责任在第三方，但因自身的冗余或故障预案问题导致故障，责任在应用方\n\n### 后续\n\n- 故障修复\n- 损失追回\n\n## 故障演练\n\n突袭演练，多样化每次触发的故障类型，整个过程严格按照真实流程处理\n\n### 面向处理时间提升的演练\n\n- 熟练度\n- 准确度\n\n","metadata":"tags: ['软件工程']","hasMoreCommit":false,"totalCommits":6,"commitList":[{"date":"2023-01-04T17:13:27+08:00","author":"cjiping","message":"✏️运维","hash":"4332445d967ca68db6674e5cbc766c2c6001c911"},{"date":"2022-03-04T15:56:33+08:00","author":"cjiping","message":"📦整理 灰度发布","hash":"57e56d09a983ea4c692619c2870d9ae1a1df084c"},{"date":"2022-02-23T21:12:51+08:00","author":"MY","message":"✏️更新 故障管理","hash":"4fafc892b7dc0523ffe259de9790fdca33ff6fa1"},{"date":"2022-02-22T21:33:58+08:00","author":"MY","message":"✏️更新 故障管理","hash":"05b94c1c0da88904019c66b5c0f34d45c900678f"},{"date":"2022-02-21T21:27:45+08:00","author":"MY","message":"✏️更新 故障管理","hash":"8fbd083418e1a09de6664669397e225109ea2e2a"},{"date":"2022-02-20T21:34:56+08:00","author":"MY","message":"➕新增 故障管理","hash":"6a3c1fa50df0cc1668e90f5ea46953f73dad90f8"}],"createTime":"2022-02-20T21:34:56+08:00"}