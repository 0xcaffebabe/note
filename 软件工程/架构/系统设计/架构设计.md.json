{"name":"架构设计","id":"软件工程-架构-系统设计-架构设计","content":"# 架构设计\n\n## 架构设计要素\n\n### 规划\n\n目标：做正确的事、适可而止\n\n输出：可落地的架构\n\n### 设计模式\n\n分而治之：将一个不存在系统分到可以被实现的单元为止\n\n迭代式设计\n\n### 输入\n\n功能性需求 + 限制 + 质量要求 + 资产和技术\n\n### 输出\n\n- 架构规划\n- 研发设计\n- 测试方案\n- 部署方案\n  - 物理架构\n  - 非功能的实现\n  - 发布流程\n- 采购目标\n  - RFP招标需求\n  - POC\n  - 招标和产品决策\n\n## 原则\n\n- 合适：合适的技术优于先进的技术\n- [简单](/软件工程/软件设计/设计原则.md#KISS%20keep%20it%20simple%20and%20stupid)：简单的实现优于复杂的实现\n- 演化：[演进的架构](/软件工程/架构/演进式架构.md)优于一步到位的架构\n\n## 设计流程\n\n### 识别复杂度\n\n- 将主要的复杂度问题列出来，然后根据业务、技术、团队等综合情况进行排序，优先解决当前面临的最主要的复杂度问题\n\n对于缺乏经验的新人，可以采取倒找法，就是通过已知的复杂性问题来对照本系统从而发现存在的复杂度\n\n### 设计后备方案\n\n单一方案设计很容易一条路走到黑，通过后备方案打开思路，避免陷入单一视角考虑问题\n\n- 3 ~ 5 个\n- 差异明显\n- 不只局限于熟悉的技术\n\n### 评估\n\n综合当前的业务发展情况、团队人员规模和技能、业务发展预测等因素，将质量属性按照优先级排序\n\n- 列出我们需要关注的质量属性点，然后分别从这些质量属性的维度去评估每个方案\n\n### 详细方案设计\n\n当进入了详细设计阶段后发现备选方案不可行，一般情况下主要的原因是备选方案设计时遗漏了某个关键技术点或者关键的质量属性\n\n这可以通过一些方式来避免：\n\n- 需要对方案的关键细节有深入的理解\n- 多考虑细节，一个细节可能就会推翻讨论许久才决定的整个方案\n- 集体智慧设计\n\n## 方法论与思维\n\n### 架构立方体\n\n将设计的视角归为六类\n\n![](/assets/2021916231555.png)\n\n- 应用：实现的总体功能\n- 技术：支撑业务的基础架构（中间件、数据库）\n- 功能：更为详细的功能\n- 运行：描述软件什么时候在哪里\n- 逻辑：技术已定型 产品未定型\n- 物理：产品已定型\n\n功能性需求 -> 功能性模型\n\n质量性需求、限制性需求 -> 运行性模型\n\n### 需求分析\n\n需求贯穿了系统的整个生命周期\n\n![202110212583](/assets/202110212583.jpg)\n\n#### 模块定义\n\n- 耦合与内聚\n- 粒度：粒度越细 成本越高\n\n#### 系统上下文\n\n- 标识外部系统 表明需要将哪些外部系统纳入整体解决方案的范畴内\n\n![屏幕截图 2021-10-03 145624](/assets/屏幕截图%202021-10-03%20145624.png)\n\n#### 功能性模型\n\n- 用例模型\n\n![2021102133612](/assets/2021102133612.jpg)\n\n- 整体架构草图：简单的流程与组成\n\n![2021103155635](/assets/2021103155635.jpg)\n\n- 鲁棒图\n\n![2021102143029](/assets/2021102143029.png)\n\n- 时序图\n\n![2021102143223](/assets/2021102143223.png)\n\n- ER图\n\n#### 运行性模型\n\n关注点：监控、容量、系统核心维度\n\n部署单元：安装单元、执行单元、展示单元、数据单元\n\n- 应用逻辑运行视图\n\n![屏幕截图 2021-10-03 133833](/assets/屏幕截图%202021-10-03%20133833.png)\n\n- 逻辑运行视图\n\n![2021103142736](/assets/2021103142736.jpg)\n\n- 物理运行视图\n\n![屏幕截图 2021-10-02 131037](/assets/屏幕截图%202021-10-02%20131037.png)\n\n### 资产复用\n\n- 方法资产：原则、策略、模式、方法论\n- 工件资产：库、工具、参考架构\n\n复用能加快项目、避坑、减少意见冲突\n\n### 架构验证\n\n- 架构流程：JAD ARB\n- 测试（**验收测试**）\n- RAID架构验证 <https://cloud.tencent.com/developer/article/1054290>\n  - 风险是否规避\n  - 假设是否正确\n  - 问题分析记录\n  - 依赖识别验证\n\n### 误区\n\n- 过于微观 没有宏观视角\n- 没有关注点分离 XYZ\n- 过度设计、过于精妙无法变更迭代、技术冷门\n- 专注于擅长的技术栈 忽略了更合适的选项\n\n## 企业架构设计\n\n- 企业架构：对企业事业信息管理系统中具有体系的、普遍性的问题而提供的通用解决方案\n\n### SCN策略能力网络\n\n- 价值观和策略：为赚钱\n- 能力：为实现价值观和策略\n- 资源：为实现能力\n\n### CBM基于模块的业务模型\n\n- 战略\n- 管理\n- 执行\n\n### 信息架构\n\n- 对某一特定内容里的信息进行统筹、规划、设计、安排等一系列有机处理的想法\n\n### 技术架构三角模型\n\n- 应用和外部对接\n- 内部数据落地\n- 底层基础架构支撑\n\n### 策略差距\n\n- 目标与能力的差距\n\n### 架构转型\n\n## 架构评估\n\n### ATAM评审\n\n关注产品本身\n\n表述：\n\n- PMO \n- 产品：描述目标 功能 上下文\n- 架构：描述架构业务 组件流程等 梳理上下游链路\n\n调查分析：\n\n产品与架构讨论进行优先级场景、实现难度发现 安全性、性能预估等\n\n场景讨论：\n\n相关人士进行技术方案确定、风险点事项确认 识别出架构师没发现的风险点\n\n报告生成：\n\n得到会议纪要 共识事项 跟进事项 风险点等书面文档\n\n### CBAM成本效益分析方法\n\n关注成本与效益\n\n优先级评估：\n\n选择前30%优先级的需求 在评估最好与最坏的业务场景下的性价比\n\nROI计算：\n\n通过一系列计算得到投资回报率\n\n### 系统容量评估\n\n- 达到最高可用性 扩容缩容需要准备多少资源\n\n流量预估：使用历史数据 模型预测 -> 系统容量评估：根据预估结果评估各业务方所需的资源 -> 业务预热 -> 全链路压测 -> 容量微调、生成报告 -> 限流降级方案（做误差兜底）\n\n#### 应用容量与水位\n\n根据当前QPS与单机QPS计算得到当前的集群负载情况 这个阈值可以用来被监控预警及做扩容缩容的一个基准线\n\n#### 容量精调\n\n- 模拟请求：jmeter loadrunner等 性能偏差大\n- 流量复制、重播 需要基础设施支持\n- 流量转发\n- 网关路由权重\n\n线上压测需要注意点到为止 达到性能阈值后要及时停止 防止影响线上业务\n\n### 线上应急预案\n\n- 预防问题 评估+数据+阈值规划\n- 发现问题 监控\n- 快速响应 人员响应 故障转移  容灾演练 复盘\n\n故障等级：\n\n- 核心主链路还是外围系统\n- 影响范围 资损情况\n\n故障预案：\n\n- 人工降级\n- \n\n线上异常回退：\n\n版本控制 + 金丝雀/灰度\n\n## 架构设计文档模板\n\n### 备选方案模板\n\n```text\n1. 需求介绍[描述需求的背景、目标、范围等]\n2. 需求分析[全方位地描述需求相关的信息]\n  5W\n  [5W 指 Who、When、What、Why、Where。\n  Who：需求利益干系人，包括开发者、使用者、购买者、决策者等。\n  When：需求使用时间，包括季节、时间、里程碑等。\n  What：需求的产出是什么，包括系统、数据、文件、开发库、平台等。Where：需求的应用场景，包括国家、地点、环境等，例如测试平台只会在测试环境使用。\n  Why：需求需要解决的问题，通常和需求背景相关]\n  1H\n  关键业务流程\n  8C\n  [8C 指的是 8 个约束和限制，即 Constraints，包括性能 Performance、成本 Cost、时间 Time、可靠性 Reliability、安全性 Security、合规性 Compliance、技术性 Technology、兼容性 Compatibility]\n3. 复杂度分析[分析需求的复杂度，复杂度常见的有高可用、高性能、可扩展等]\n4. 备选方案\n5. 备选方案评估\n```\n\n### 架构设计模板\n\n```text\n1. 总体方案[核心内容就是架构图，以及针对架构图的描述，包括模块或者子系统的职责描述、核心流程]\n2. 架构总览\n3. 核心流程\n4. 详细设计\n5. 架构演进规划\n```","metadata":"","hasMoreCommit":false,"totalCommits":10,"commitList":[{"date":"2022-05-11T15:01:31+08:00","author":"cjiping","message":"✏️更新 架构","hash":"afb18fe967347f815b204ee9dec1c48fcd250b35"},{"date":"2022-05-05T17:38:27+08:00","author":"cjiping","message":"✏️更新 架构设计","hash":"7c9964f93906147a0d6f1185e359b13d011499ce"},{"date":"2022-05-04T23:12:11+08:00","author":"MY","message":"✏️更新 架构设计","hash":"15b035e289fad871e88c9924cc8aa328ea17c27b"},{"date":"2021-10-21T23:31:38+08:00","author":"My","message":"✏️更新 监控与可用性","hash":"7f0a843cb3614c331efd4e850f8657f0b14880cd"},{"date":"2021-10-17T23:19:31+08:00","author":"My","message":"✏️更新 架构设计","hash":"b71ac55d132dbce81725cc8abc041718148d79dc"},{"date":"2021-10-12T22:11:00+08:00","author":"My","message":"✏️更新 架构设计","hash":"a70aa0f0c26d82819bd74a475dc228a8906f47f9"},{"date":"2021-10-04T16:03:48+08:00","author":"My","message":"✏️更新 架构设计","hash":"f790427c7c64de61ecbdbf09fb98de80080a8831"},{"date":"2021-10-03T16:32:17+08:00","author":"My","message":"✏️更新 架构设计","hash":"407a77b66ed3e5faffe109c480a2e489ce1b13b8"},{"date":"2021-10-02T15:57:15+08:00","author":"My","message":"✏️更新 架构设计","hash":"f555be13470f0a13b5f18c022dea648808c5b406"},{"date":"2021-09-29T21:31:19+08:00","author":"My","message":"➕新增 架构设计","hash":"f06d94cf9330487b3beaa449066b6906483826c7"}],"createTime":"2021-09-29T21:31:19+08:00"}