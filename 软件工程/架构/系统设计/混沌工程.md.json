{"name":"混沌工程","id":"软件工程-架构-系统设计-混沌工程","content":"# 混沌工程\n\n大型分布式系统跑在云上，一旦出错，错误难以预测，并且损失巨大，这就是引入混沌工程的原因\n\n故障演练是属于混沌工程的一环，目的还是借事修人\n\n混沌工程是在模块局部内确切的可控制的混乱\n\n```mermaid\nstateDiagram-v2\n  稳态假设 --> 真实事件注入\n  真实事件注入 --> 影响检测\n  影响检测 --> 恢复\n  恢复 --> 稳态假设\n```\n\n## 先决条件\n\n- 弹性的系统空间：为故障预留一定可控空间，避免因为混沌产生真实的大故障\n- 可集成的混沌工具：自动化、可干预、可恢复的故障生产与恢复\n- 完善的故障响应流程\n- 足够的团队应急能力\n\n## 稳态定义与测量\n\n- 先定义出系统的稳定状态，出了问题才可以对比\n\n可以从场景化、现象化、指标化来定义出系统的稳定状态\n\n根据现有的稳态，定义相关基线，明确系统正常状态的技术和业务指标，通过监控这些指标来判断系统是否正常运行\n\n系统稳态的维持：\n\n- 自治容灾，故障自愈\n- 快速的监控告警，应急止血\n\n## 事件\n\n混沌工程的事件定义：\n\n- 从真实故障中进行场景提炼，模拟真实世界中可能遇到的问题，以验证系统在极端情况下的表现\n\n[理解分布式系统的8个谬误](https://cloud.tencent.com/developer/article/1370391)\n\n### 基础设施事件\n\n- 存储：不可读 不可写 存储满\n- 系统：CPU满 内存满 延迟高\n- 虚拟机：断电 宕机 被宿主杀死\n- 网络：超时 丢包 断网\n- ...\n\n### 中间件事件\n\n- 数据库： 链接慢 满SQL 主备延迟\n- 缓存：热点 限流 丢失\n- 队列：延迟 堆积 断连\n- ...\n\n### 应用事件\n\n- 链路：依赖超时 依赖异常 重试风暴\n- 环境：线程池满 进程被杀 线程竞争\n- 应用：配置错误 包损毁 版本错乱\n- ...\n\n### 数据事件\n\n## 持续的自动化实验\n\n通过自动化工具定期执行实验，降低成本并确保实验的持续性\n\n## 最小化爆炸半径\n\n事件的注入要不在线下的系统尽情搞\n\n要不就在线上尽小的可控范围内进行注入，将实验的影响控制在较小范围，避免对用户体验产生大的影响，通常通过灰度实验等方式进行\n\n## 演练\n\n目标：\n\n- 故障发现能力考核\n- 应急能力考核\n- 恢复能力考核\n\n### 执行\n\n#### 场景\n\n- 有代表性的场景具化\n- 场景有价值\n- 场景中的架构要有可证明的稳定状态及故障状态\n\n#### 模式\n\n- 验证性演练\n- 突袭性演练\n\n#### 角色\n\n- 演练负责人：策划 通知\n- 研发：确认 实施\n- 测试：评估 复盘\n\n#### 范围\n\n- 红线场景\n- 历史故障场景\n- 可能的资损场景\n\n### 观察\n\n- 执行的进度、结果、时间观察及记录\n- 事件的注入效果、指标的变化以及监控的报警状态\n- 故障、指标、行为的恢复情况\n\n### 恢复\n\n- 事件移除：对植入的事件执行逆操作进行恢复\n- 重置基础状态\n\n### 过程结果分析\n\n#### 时间分析\n\n- 故障注入生效时间\n- 监控发现告警时间\n- 应急接手时间\n- 止血恢复时间\n\n#### 表现分析\n\n维度\\能力           | 容灾能力 | 发现能力 | 快速恢复能力\n--------------- | ---- | ---- | ------\n时间维度 是否快速及时     |      |\n定量维度 问题数量是否可控   |      |\n变化维度 变化幅度是否满足预期 |      |\n\n#### 异常分析\n\n演练过程中出现的异常和其特征分析\n\n- 出现了什么异常\n- 如何影响了系统\n- 是否可控且可恢复\n\n- 出现是否在预期之内\n- 是否有预期之外的异常\n- 异常的准确度与异常信息的完整度\n\n### 改进分析\n\n#### 稳定性提升\n\n- 问题发现：预警 巡检 异常日志\n- 异常控制：分级 清零 监控\n- 系统保护：容灾 限流\n- 系统治理：热点治理 漏洞治理 降级开关\n\n#### 预案体系能力\n\n- 场景覆盖能力\n- 触发管理能力：指标变化触发人员或者预案\n- 预案工具：预案开关 预案监控\n\n#### 定位止血能力\n\n```mermaid\nstateDiagram-v2\n  问题定位: 问题定位：问题表象 链路排查 日志分析\n  问题定位 --> 问题原因,止血方案\n  问题原因,止血方案 --> 经验沉淀,排查工具\n  经验沉淀,排查工具 --> 运维支撑\n  运维支撑 --> 问题原因,止血方案\n  运维支撑 --> 问题定位\n```\n\n- 问题定位能力：问题表象 链路排查 日志分析\n- 问题原因\n- 止血方案\n- 经验沉淀 \n\n#### 风险管控\n\n需要明确的风险：\n\n- 基础风险\n- 环境风险\n- 依赖风险\n- 安全风险\n- 流量风险\n\n对抗风险：\n\n- 研发流程把控\n- 高危场景治理\n- 热点瓶颈消除\n- 安全漏洞清零\n","metadata":"tags: ['软件工程', '架构', '可用性']","hasMoreCommit":false,"totalCommits":3,"commitList":[{"date":"2024-09-12T18:52:16+08:00","author":"MY","message":"文档更新：DevOps和架构相关文档内容修订","hash":"bd26e761df7822710c794e016d36945aaa944eeb"},{"date":"2022-02-28T21:41:29+08:00","author":"MY","message":"✏️更新 混沌工程","hash":"2521110a93eea4e00cb58a7403453c8f399f5d6d"},{"date":"2022-02-27T20:51:32+08:00","author":"MY","message":"➕新增 混沌工程","hash":"941ef07f08c6d72e756b5c670163dd463640baf0"}],"createTime":"2022-02-27T20:51:32+08:00"}