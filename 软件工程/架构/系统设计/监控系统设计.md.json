{"name":"监控系统设计","id":"软件工程-架构-系统设计-监控系统设计","content":"# 监控系统设计\n\n- 为了实现[可观测性](/软件工程/架构/系统设计/可观测性.md)\n\n```mermaid\nstateDiagram-v2\n  数据收集 --> 数据分析\n  数据分析 --> 风险预测\n  数据分析 --> 故障告警\n  风险预测 --> 问题解决\n  故障告警 --> 问题解决\n  问题解决 --> 归档复盘\n```\n\n## 目标\n\n- 监控指标\n- 数据聚合分析\n- 厉害的dashboard\n- 异常检测\n- 异常告警 模板与渠道\n- 可扩展 高可用\n\n## 典型架构\n\n```mermaid\nstateDiagram-v2\n  direction LR\n  采集器 --> 时序库\n  时序库 --> 告警引擎\n  时序库 --> 数据展示\n  告警引擎 --> 告警发送\n```\n\n## 监控维度\n\n- 微服务层\n- 机器层\n- 中间件层\n- 操作系统层\n\n### 单服务单主机\n\n主要监控主机的CPU、内存等数据以及服务所产生的日志\n\n### 单服务多主机\n\n如果所有主机都发生问题，那么可能是服务的问题\n\n否则如果只是某一主机出现异常，问题定位就比较简单\n\n同时，单一服务部署到多台主机，一般需要负载均衡器来分发请求，所以也要对负载均衡器进行监控\n\n### 多服务多主机\n\n此时问题定位就没那么容易了，必须收集到足够多的数据\n\n## 监控范围\n\n- 业务：指标成功率 红线 运行时异常\n- 基础设施\n- 流量：偏离 分布 攻击流量\n- 综合性：防资损、数据巡检...\n\n监控需要分层级，除了系统层级诸如 CPU 内存之类的数据，同时也要支持在需要时，能深入进程、线程级别的定向监控\n\n## 方法\n\n![嵌入式监控](/assets/屏幕截图%202022-01-03%20195647.png)\n\n![分离式监控](/assets/屏幕截图%202022-01-03%20195709.png)\n\n## 指标\n\n### 黄金指标\n\nUSE（Utilization Saturation and Errors）法\n\n- 使用率，表示资源用于服务的时间或容量百分比\n- 饱和度，表示资源的繁忙程度，通常与等待队列的长度相关\n- 错误数\n\n以及 RED 法\n\n- Rate（速率）：服务的请求速率\n- Errors（错误）：服务的错误率\n- Duration（延迟）：请求的持续时间，表示每个请求需要多长时间来完成\n\n#### 延迟\n\n- 服务请求所花费的时间\n\n#### 流量\n\n#### 错误\n\n- 系统在处理请求时出错的比例\n\n#### 饱和度\n\n- 最能影响服务性能的资源，描述应用程序有多“满”\n\n### 百分比指标\n\n#### 中位值\n\n#### 算数平均值\n\n#### 四分位数\n\n百分25 百分50 百分75\n\n### 系统指标\n\n#### 响应时间RT\n\n#### RPS\n\n#### TPS\n\n#### QPS\n\n#### 并发用户数\n\n### 业务指标\n\n## 监控述求\n\n### 告警治理\n\n#### 告警分级\n\n- 严重：影响收入的、影响客户的，必须立刻处理\n- 警告：无需立刻处理，但是如果不处理，时间久了就会演化为严重的问题，可以先放入TODO列表，手头上的紧急事务搞定之后就去处理\n- 提示：每天下班前稍微看一眼，偶尔一两天忘了看也无伤大雅\n\n#### 告警渠道\n\n- 严重：电话、短信、即时消息、邮件\n- 警告：短信、即时消息、邮件\n- 提示：邮件\n\n#### 告警规则\n\n- 支持生效时间：不同时间段对稳定性的要求不同，有些时间段可以不要告警\n- 告警规则支持分级和不同的触达渠道，避免告警等级与告警渠道强绑定\n- 重复告警支持最大次数和发送频率，避免告警爆炸\n- 告警聚合：根据接收人和时间两个维度做聚合，避免告警爆炸\n- 告警屏蔽：一般就是在做一个预期的维护动作之前，提前把相关告警屏蔽掉，免得在维护期间又收到告警\n\n#### 告警模板\n\n#### 告警升级\n\n在第一责任人收到告警之后没有及时响应，然后系统自动通知二线、三线人员的一种机制\n\n#### 告警收敛\n\n三级收敛，event -> alert -> incident\n\n重复的告警、相关联的告警进行收敛聚合，以方面协作及信息同步\n\n#### 故障协同\n\n多团队协作共享信息共同解决复杂告警与故障的系统化机制\n\n#### 告警自愈\n\n检测到系统异常或故障时，通过自动化脚本或工具，无需人工干预就能自动采取修复措施\n\n### 易用性\n\n## 综合监控\n\n通常可以对系统一些资源指标进行监控，判断实际值是否超出设定的阈值，但这些数据并不能直接说明服务是否能正常工作\n\n### 语义监控\n\n通过端到端的测试来监控服务的工作正常与否\n\n## 标准化\n\n无论是日志的格式，还是工具，都需要标准化\n\n## 考虑受众\n\n需要对日志的使用者，他们需要知道什么，想要什么以及如何消费数据等考虑清楚\n","metadata":"","hasMoreCommit":false,"totalCommits":6,"commitList":[{"date":"2024-05-29T19:45:02+08:00","author":"MY","message":"✏监控","hash":"998e44df48a0c1fddaf9ec9873968ad75567ec6f"},{"date":"2024-05-28T19:53:40+08:00","author":"MY","message":"✏监控","hash":"86620b7aeaf14cd9f9f392c4fc8ee5a3f9be003c"},{"date":"2023-07-09T16:51:17+08:00","author":"MY","message":"✏️性能优化","hash":"87ed149335b2d7690e401fbefbda8cb298681982"},{"date":"2022-01-13T11:01:59+08:00","author":"cjiping","message":"📦整理 可观测性","hash":"1819ddeda05220176705ac83510cee29ad6d33c5"},{"date":"2022-01-12T21:19:00+08:00","author":"MY","message":"✏️更新 安全生产","hash":"6c1a14d779b6bcc28b6943ede0dac50b063987bf"},{"date":"2022-01-03T20:54:42+08:00","author":"MY","message":"➕新增 监控系统设计","hash":"7a43f1c01a9f40e65da165e78dbcdec56ec859e5"}],"createTime":"2022-01-03T20:54:42+08:00"}