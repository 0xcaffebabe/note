{"name":"网关","id":"软件工程-架构-系统设计-网关","content":"\n# 网关（Gateway）\n\n## 一、网关的本质\n\n网关是系统的**边界层组件**，负责在**外部访问**与**内部服务**之间建立一条受控、可治理的通道。\n\n> 可以理解为：“流量的入口 + 策略的执行点 + 协议的转换层”。\n\n在本质上，网关承担了两类职能：\n\n| 职能        | 说明                            |\n| --------- | ----------------------------- |\n| **路由器职能** | 将外部请求按照规则转发至内部服务，决定“流量去向”     |\n| **过滤器职能** | 在流量经过时执行一系列策略，如鉴权、限流、日志、安全检测等 |\n\n当仅关注**转发性能**时，可在四层（TCP/IP）操作；\n当需要**识别请求内容、分析协议特征**时，则需在七层（HTTP/HTTPS、gRPC、MQTT 等）操作。\n\n---\n\n## 二、网关的设计原则\n\n1. **轻量化**：\n   网关不宜承担复杂的业务逻辑，应聚焦于流量治理、协议适配与安全控制。\n   过重的逻辑会导致可用性与可维护性下降。\n\n2. **可扩展性**：\n   网关应可水平扩展，支持负载均衡与动态注册。\n   在高并发环境下，通过多实例或集群模式扩容。\n\n3. **高可用性**：\n   通过健康检查、限流熔断、超时重试等机制，保证网关本身的稳定。\n\n4. **可观测性**：\n   网关作为流量的第一个落点，应提供监控指标、日志与追踪能力，支持全链路可视化。\n\n5. **策略统一性**：\n   所有接入策略（认证、路由、过滤、限流）应可配置、集中管理，形成“策略中心”。\n\n---\n\n## 三、核心功能\n\n| 分类         | 说明                                |\n| ---------- | --------------------------------- |\n| **流量接入**   | 统一入口，接收来自客户端或外部系统的请求              |\n| **API 管理** | 统一定义、注册、发布、下线接口；实现 API 生命周期治理     |\n| **流量控制**   | 限流、负载均衡、重试、熔断、降级等治理策略             |\n| **安全防护**   | 认证授权、防攻击、防扫描、协议校验、黑白名单            |\n| **监控与统计**  | 日志记录、请求统计、延迟分析、可视化仪表盘             |\n| **协议适配**   | 实现不同协议（HTTP、MQTT、WebSocket 等）间的转化 |\n| **缓存与聚合**  | 支持响应缓存与多后端结果聚合，提升性能               |\n\n---\n\n## 四、类型划分\n\n### 1. 流量网关（Traffic Gateway）\n\n面向网络层与安全层，关注“请求的安全性与健康性”。\n\n* 全局限流与流量调度\n* 请求日志与统计分析\n* SQL 注入与 XSS 防护\n* Web 攻击防御与扫描屏蔽\n* 黑白名单、IP 与地域过滤\n* 协议与版本适配（HTTP ↔ HTTPS、HTTP ↔ MQTT）\n\n> 通常与防火墙、WAF、CDN 协同工作。\n\n---\n\n### 2. 业务网关（Business Gateway）\n\n面向应用层与服务层，关注“请求的语义与业务聚合”。\n\n* 请求接入：所有 API 请求的统一入口\n* 业务聚合：多个服务结果的合并、转化与裁剪\n* 策略中介：认证、鉴权、过滤、流控、缓存\n* 生命周期管理：统一配置与灰度策略\n\n```mermaid\nflowchart TD\n    A[客户端请求] --> B[业务网关]\n    B --> C[鉴权校验]\n    B --> D[限流与流控]\n    B --> E[业务聚合]\n    E --> F[后端服务集群]\n    F --> E\n    E --> B\n    B --> G[统一响应输出]\n```\n\n---\n\n### 3. 探测与数据型网关（Monitoring/Data Gateway）\n\n> 常见于 IoT、视频监控、工业控制等场景。\n\n```mermaid\nsequenceDiagram\n  监控探头 ->> 网关: 推送数据\n  网关 ->> 监控探头: 拉取数据\n  网关 ->> 网关: 过滤 / 业务处理\n  网关 ->> OSS: 存储图像/视频\n  网关 ->> 消息队列: 推送结构化数据\n```\n\n---\n\n## 五、网关部署架构\n\n```mermaid\nflowchart LR\n    subgraph Internet[\"互联网\"]\n        client1[💻 电脑]\n        client2[📱 手机]\n        client3[🖥️ 平板]\n    end\n\n    subgraph LAN[\"局域网\"]\n        LB[负载均衡器]\n        GW1[网关实例 A]\n        GW2[网关实例 B]\n        SVC1[服务 A]\n        SVC2[服务 B]\n        SVC3[服务 C]\n    end\n\n    client1 --> LB\n    client2 --> LB\n    client3 --> LB\n\n    LB --> GW1\n    LB --> GW2\n\n    GW1 --> SVC1\n    GW1 --> SVC2\n    GW1 --> SVC3\n\n    GW2 --> SVC1\n    GW2 --> SVC2\n    GW2 --> SVC3\n\n    classDef internet fill:#EAF4FE,stroke:#5B9BD5,stroke-width:1px;\n    classDef lan fill:#E9F7EF,stroke:#58A05B,stroke-width:1px;\n    class Internet internet;\n    class LAN lan;\n```\n\n> 区别：\n>\n> * **反向代理（如 Nginx）** 面向服务器，处理静态资源、负载均衡。\n> * **应用网关** 面向服务，处理请求解析、鉴权与业务策略。\n\n---\n\n## 六、BFF（Backend for Frontend）模式\n\nBFF 是一种**面向前端体验的网关模式**，在前后端之间增加一个专属层，用于聚合后端服务，裁剪数据结构，简化前端接口。\n\n```mermaid\ngraph TD;\n    A[用户界面] -->|请求| B[BFF 网关]\n    B -->|调用| C[服务 A]\n    B -->|调用| D[服务 B]\n    B -->|调用| E[服务 C]\n    C -->|返回数据| B\n    D -->|返回数据| B\n    E -->|返回数据| B\n    B -->|返回聚合数据| A\n```\n\n优势：\n\n* 降低前端与后端的耦合；\n* 提供针对不同终端（Web、App、小程序）的定制化 API；\n* 可作为流量隔离层。\n\n---\n\n## 七、架构演进与选型趋势\n\n| 阶段          | 特点          | 代表组件                           |\n| ----------- | ----------- | ------------------------------ |\n| **单体时代**    | 静态路由、简单反向代理 | Apache、Nginx、HAProxy           |\n| **微服务时代**   | 动态路由、流量治理   | Nginx、Kong、Traefik             |\n| **云原生时代**   | 动态发现、统一治理   | Kubernetes Ingress、Envoy、Istio |\n| **前后端分离时代** | 定制化聚合层      | BFF Gateway、GraphQL Gateway    |\n\n---\n\n## 八、网关的观察与治理维度\n\n| 维度       | 关注点            | 典型手段                         |\n| -------- | -------------- | ---------------------------- |\n| **流量治理** | 限流、熔断、降级、重试    | Token Bucket、Circuit Breaker |\n| **安全治理** | 身份认证、权限控制、攻击防御 | JWT、OAuth2、WAF               |\n| **服务治理** | 动态发现、负载均衡      | 注册中心、健康检查                    |\n| **可观测性** | 指标、日志、追踪       | Metrics、Tracing、ELK          |\n| **配置治理** | 动态配置、灰度发布      | Config Center、Feature Toggle |\n\n---\n\n## 九、总结\n\n网关不仅是**流量的中转点**，更是**系统稳定性治理的重要边界**。\n一个优秀的网关体系，应同时具备：\n\n* **安全性**（防御外部威胁）\n* **稳定性**（应对高并发流量）\n* **扩展性**（支持新协议与多租户）\n* **治理性**（统一策略、统一观测）\n\n> 网关是系统的“咽喉”，但不应成为“瓶颈”。\n","metadata":"","hasMoreCommit":false,"totalCommits":7,"commitList":[{"date":"2025-10-20T10:26:06+08:00","author":"MY","message":"docs(gateway): 重构网关设计文档内容与结构","hash":"ca1e3eb89579d7a9ce28a5c25a06db6c9c8f1edc"},{"date":"2024-11-22T10:28:56+08:00","author":"MY","message":"📦网关","hash":"c73adf1561b5dc9412f163b8b546d08fba8cd07b"},{"date":"2024-11-01T16:02:53+08:00","author":"MY","message":"✏网关","hash":"76c604c05aba160eddcb9dd5345c257b2ecf07e7"},{"date":"2022-06-14T17:39:12+08:00","author":"cjiping","message":"📦整理 网关","hash":"15fefb641d041567d5abbb51209147d58b39b1a6"},{"date":"2022-01-27T11:38:09+08:00","author":"cjiping","message":"📦整理随手","hash":"f5ec44c039a7d8dec55ca7b4885582d06c059e22"},{"date":"2020-11-19T15:29:14+08:00","author":"MY","message":"✏更新 网关","hash":"73984906001daad12fbacafc182744c271cfc403"},{"date":"2020-07-21T09:30:25+08:00","author":"MY","message":"➕增加 网关","hash":"d7f15dc987559f642a925ea5cc1d2d26ede0d471"}],"createTime":"2020-07-21T09:30:25+08:00"}