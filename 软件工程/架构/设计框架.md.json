{"name":"设计框架","id":"软件工程-架构-设计框架","content":"\n# 架构设计框架\n\n软件架构设计是连接**业务愿景**与**技术实现**的桥梁。一个合理的架构不仅要满足业务目标，更要具备足够的灵活性和演化能力，以应对未来的变化。\n\n---\n\n## 一、什么驱动着架构设计\n\n架构设计并非单纯的技术活动，而是由多种力量共同驱动的系统性工程。\n\n* **业务需求**\n  架构存在的首要目的，是支持业务目标的达成。业务流程、产品功能、用户体验等都将决定架构形态。\n\n* **非功能需求**\n  包括性能、可靠性、安全性、可扩展性、可维护性、成本约束等。这些隐性需求往往是架构设计成败的关键。\n\n* **设计与实现限制**\n  例如组织架构、团队能力、预算周期、既有技术栈、法律合规要求等。限制条件决定了架构设计的可行边界。\n\n---\n\n## 二、ABSD（基于架构的软件开发）\n\n**ABSD（Architecture-Based Software Development）**\n是一种以架构为核心驱动的软件开发模式。\n它强调自顶向下的分解、架构风格选择、构件化实现与持续演化，通过架构模型来指导整个软件生命周期。\n\n### 1. 功能分解\n\n* **自顶向下分解**：从系统整体目标出发，逐层细化功能模块。\n* **核心目标**：将需求转换为逻辑模块，实现**高内聚、低耦合**的系统结构。\n* **分解过程**：\n\n  1. 分析系统用例或业务场景；\n  2. 提取核心功能域；\n  3. 明确模块边界与接口；\n  4. 识别共性服务与独立职责。\n\n### 2. 架构风格\n\n选择合适的架构风格是架构设计的关键环节。\n常见风格包括：\n\n* 分层架构（Layered Architecture）\n* 微服务架构（Microservices Architecture）\n* 事件驱动架构（EDA）\n* 面向服务架构（SOA）\n* 客户端-服务器（C/S）\n* 管道与过滤器（Pipe & Filter）\n\n架构风格体现的是系统**“整体形态”**与**“交互模式”**的选择，是从设计原则到系统结构的第一次映射。\n\n### 3. 软件模板\n\n软件模板用于描述系统中各个软件元素如何协作。\n它定义了：\n\n* 各构件的职责；\n* 它们如何通信；\n* 在基础设施（存储、消息中间件、认证系统等）上的依赖关系。\n\n模板的目标是建立一套可重用、可扩展的“软件装配蓝图”。\n\n### 4. 递归与迭代\n\n架构设计不是一次性活动，而是**递归式的演进过程**：\n\n* 每一层次的设计结果，都会反馈到更高层次；\n* 新需求、技术演变或业务变化都会触发架构再设计；\n* 每次迭代都在验证和强化架构的适应性。\n\n---\n\n## 三、ABSD 实施流程\n\n### （1）架构需求阶段\n\n1. 从需求库中提取“**小而多**”的功能项；\n2. 将这些需求映射为概念类或组件；\n3. 绘制初步的类图和构件图；\n4. 对需求进行评审，确保其明确、独立、可验证。\n\n> **目标**：将需求具体化为可设计的构件单元。\n\n---\n\n### （2）架构设计阶段\n\n1. 选择合适的架构模型与风格；\n2. 将需求阶段划分的构件映射到架构模型；\n3. 分析构件之间的依赖与交互；\n4. 明确系统的通信机制、部署拓扑；\n5. 输出可视化架构文档；\n6. 进行设计评审。\n\n> **目标**：建立可实现、可演化、可验证的架构蓝图。\n\n---\n\n### （3）架构实现阶段\n\n1. 根据复审后的架构文档执行详细设计；\n2. 开发并组装构件；\n3. 进行集成测试与系统验证；\n4. 建立自动化构建、监控与部署机制；\n5. 为架构演化留出技术扩展点。\n\n> **目标**：让架构从设计模型转化为可运行系统。\n\n---\n\n### （4）架构演化阶段\n\n1. 监控需求变化并进行分类（功能性、非功能性、外部限制等）；\n2. 制定架构演化计划；\n3. 确定需要调整的构件；\n4. 重组架构、执行回归测试；\n5. 组织技术评审与经验回溯。\n\n> **目标**：确保架构能持续支持业务变化和技术更新。\n\n---\n\n## 四、DSSA（特定领域的软件架构开发）\n\n**DSSA（Domain-Specific Software Architecture）**\n是一种面向领域的架构开发方法，强调在**特定业务领域内的知识沉淀与架构复用**。\n与 ABSD 不同，它关注的是跨系统、跨项目的长期积累。\n\n---\n\n### 1. 领域分析\n\n领域分析的目标是：\n\n> 对业务领域知识进行抽象、拆解与结构化，以提炼可复用的模型和构件。\n\n关键参与者：\n\n* **领域专家**：掌握业务知识；\n* **领域分析人员（业务架构师）**：负责业务结构建模；\n* **领域设计人员（技术架构师）**：将业务模型转化为技术架构；\n* **领域实现人员（开发者）**：开发并验证领域组件。\n\n过程特点：\n\n* 强调多角色协作；\n* 通过持续迭代实现知识传承；\n* 构建“老带新”的知识沉淀体系。\n\n---\n\n### 2. 领域设计\n\n领域设计阶段将分析成果转化为**领域架构模型**。\n\n关键任务：\n\n1. 定义领域范围与边界；\n2. 识别领域特定的核心元素与约束；\n3. 制定通用设计原则；\n4. 定义领域模型的整体架构；\n5. 建立领域资产（组件、模式、接口等）。\n\n#### 三层模型（概念验证框架）\n\n| 层级         | 说明                   |\n| ---------- | -------------------- |\n| **领域开发环境** | 聚焦知识建模与概念验证，形成领域模型原型 |\n| **应用开发环境** | 将领域模型转化为可用框架与组件库     |\n| **应用执行环境** | 在真实系统中验证领域架构的可行性与性能  |\n\n这种分层有助于快速验证设计理念与复用策略。\n\n---\n\n### 3. 领域实现\n\n* 优先使用现有可复用构件；\n* 新开发的构件应沉淀回领域元件库；\n* 采用**螺旋式开发模型**进行持续演进与发布；\n* 定期审查领域模型的有效性与扩展性。\n\n> **目标**：构建一个能够“越用越强”的领域架构生态系统。\n\n---\n\n## 五、总结与对比\n\n| 维度   | ABSD              | DSSA              |\n| ---- | ----------------- | ----------------- |\n| 目标   | 从需求出发设计系统架构       | 从领域出发建立复用架构       |\n| 关注点  | 单个系统生命周期          | 多系统间的领域复用         |\n| 方法论  | 功能分解 + 架构风格 + 构件化 | 领域建模 + 元件库 + 迭代复用 |\n| 输出物  | 架构模型、设计文档、构件集     | 领域模型、元件库、开发框架     |\n| 适用场景 | 新系统开发             | 平台化、产品线开发         |\n\n---\n\n## 六、结语\n\n架构设计框架并不是一种固定模式，而是一种**思维方式**。\nABSD 帮助我们从需求走向系统；\nDSSA 帮助我们从系统走向复用。\n\n两者结合，形成了现代软件工程中“**架构驱动开发（Architecture-Driven Development）**”的完整闭环：\n\n> 从需求 → 架构 → 实现 → 复用 → 再演化。\n","metadata":"","hasMoreCommit":false,"totalCommits":4,"commitList":[{"date":"2025-10-27T16:38:39+08:00","author":"MY","message":"docs(architecture): 更新架构设计框架文档内容","hash":"9f0462c95311c16a873555f64da07acdc9aea147"},{"date":"2021-09-16T22:12:19+08:00","author":"My","message":"✏️更新 架构设计框架","hash":"2a130299e661dbfae6901937051a4e85f1bea027"},{"date":"2021-09-15T23:56:02+08:00","author":"My","message":"✏️更新 架构设计框架","hash":"a88d913805a132ee30eec2943530999d2bf0268a"},{"date":"2021-09-14T23:44:38+08:00","author":"My","message":"➕新增 架构设计框架","hash":"08ca735fff1cf9c9b873c596f6e316d503741c27"}],"createTime":"2021-09-14T23:44:38+08:00"}