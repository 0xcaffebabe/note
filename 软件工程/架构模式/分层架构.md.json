{"name":"分层架构","id":"软件工程-架构模式-分层架构","content":"\n# 分层架构\n\n```mermaid\ngraph TD\n    subgraph \"传统结构\"\n        展现层1[展现层]\n        业务逻辑层[业务逻辑层]\n        数据访问层[数据访问层]\n        数据库[(数据库)]\n        展现层1 --> 业务逻辑层 --> 数据访问层 --> 数据库\n    end\n\n    subgraph \"现代结构\"\n        展现层2[展现层]\n        应用层[应用层]\n        领域层[领域层]\n        基础设施层[基础设施层]\n        \n        展现层2 --> 应用层 --> 领域层\n        领域层 --> 基础设施层\n        基础设施层 --> 数据访问[数据访问]\n        基础设施层 --> Config[Config]\n        基础设施层 --> Common[Common]\n        \n        数据访问 --> DB[DB]\n        数据访问 --> HSF[HSF]\n        数据访问 --> Search[Search]\n        \n        Config --> Spring[Spring]\n        Config --> Diamond[Diamond]\n        \n        Common --> Notify[Notify]\n        Common --> MetaQ[MetaQ]\n    end\n\n```\n\n[软件架构设计分层模型和构图思考](https://juejin.cn/post/6945261185344208933)\n\n将系统按照职责拆分和组织，上层依赖于下层定义的各种服务，下层对上层隐藏下下层的细节，最核心的一点就是需要保证各层之间的差异足够清晰，边界足够明显\n\n层次并不能封装所有东西，有时会带来级联修改，过多的层次也会影响性能\n\n- OSI七层模型\n- CS/BS架构\n- 企业应用分层\n  - 表现层\n  - 领域层\n  - 数据源层\n\n## 为何分层\n\n### 关注点分离（降低复杂度）\n\n- 每个层中的组件只会处理本层的逻辑，在扩展某层时，其他层是不受影响的，通过这种方式可以支撑系统在某层上快速扩展\n\n### 隔离变化/错误\n\n- 提炼变化层与稳定层隔离变化\n\n```mermaid\nstateDiagram-v2\n  state 数据接入层 {\n    外部预警1 --> [*]\n    外部预警2 --> [*]\n    外部预警3 --> [*]\n  }\n  数据接入层 --> 落库业务层\n```\n\n- 提炼抽象层与实现层\n\n```mermaid\nclassDiagram\n  class 地址查询策略\n  地址查询策略: +查询(手机号)\n\n  class 外部接口查询策略1\n  外部接口查询策略1: +查询(手机号)\n\n  class 外部接口查询策略2\n  外部接口查询策略2: +查询(手机号)\n\n  class 外部接口查询策略3\n  外部接口查询策略3: +查询(手机号)\n\n  地址查询策略 <|-- 外部接口查询策略1\n  地址查询策略 <|-- 外部接口查询策略2\n  地址查询策略 <|-- 外部接口查询策略3\n```\n\n### 扩展性伸缩性\n### 可测试性\n\n## 分层的问题\n\n- 性能开销：通信、数据转化\n- 开发成本\n\n## 分层架构设计\n\n- [依赖原则](/软件工程/架构/架构.md#依赖关系规则)\n- 定义职责：职责分离 高层抽象\n- 层技术栈选择：每层需求自定 参考成功架构 适合自己组织\n- 集成：单层内部的单元测试 -> 层之间的集成测试\n\n## 分层架构模型\n\n### MVC\n\n随着前后端分离以及后端微服务化的不断发展，传统的MVC已不适合现在的纯后端系统，Controller其实也是API，它代表了服务对外提供的接口，是一种合约\n\n- model:模型代表一个存取数据的对象或 JAVA POJO。它也可以带有逻辑，在数据变化时更新控制器\n- view:视图代表模型包含的数据的可视化\n- controller:控制器作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开\n\n```mermaid\n---\ntitle: Model1模型\n---\nsequenceDiagram\n  客户端 ->> JSP: 请求\n  JSP ->> JavaBean: 请求\n  JavaBean ->> DAO: 数据库操作\n  DAO ->> JavaBean: 数据库操作\n  JavaBean ->> JSP: 返回\n  JSP ->> 客户端 : 返回\n```\n\n```mermaid\n---\ntitle: Model2模型\n---\nsequenceDiagram\n  participant 客户端\n  participant 控制器 as Controller(Filter/Servlet)\n  participant 模型 as Model(JavaBean)\n  participant 视图 as View(JSP)\n\n  客户端 ->> 控制器: 请求\n  控制器 ->> 模型: 请求\n  控制器 ->> 视图: 请求\n  视图 ->> 模型: 请求\n  模型 ->> 数据库: 请求\n```\n\n- 视图与模型关注点不同，视图侧重于可视化界面，而模型侧重于业务逻辑\n- 同样的模型可以有不同的视图\n- 模型更容易测试\n\n当系统有了一些不可见的逻辑时，就需要注意模型与视图分离\n\n**优势**\n\n- 清晰的职责划分\n- 组件独立，代码重用\n- 后期维护方便\n- 适合任何项目\n\n**弊端**\n\n- 展示数据慢（针对jsp）\n- 对开发者架构设计能力要求高\n- 异步交互不方便\n\n#### 控制器类型\n\n1. 页面控制器，为特定页面或动作处理请求的对象。控制器通过绑定请求来实现与用户的交互。其从请求中提取参数，对输入进行处理，执行业务逻辑，选择适当的视图以呈现结果。\n2. 前端控制器：处理所有请求的控制器，执行一些通用的行为，如身份验证和日志记录，并且这些行为可以在运行时动态修改\n3. 应用控制器：一个处理程序流的集中控制点，负责协调页面控制器与前端控制器之间的交互，确保请求在应用中的流转符合预期\n\n#### Model\n\n业务数据模型，Model层是高层策略，是技术无关逻辑的封装\n\n#### View\n\n当有用户的行为触发操作时，由控制器更新模型，并通知视图进行更新\n\n#### Controller\n\n主要是接收用户请求，并负责协调Model与View\n\n### MVP\n\n```mermaid\nstateDiagram-v2\n  View --> Presenter: User events\n  Presenter --> Model: Model update\n  Model --> Presenter: State changes\n  Presenter --> View: View update\n```\n\n- Presenter较为复杂 可以脱离view进行测试\n\n### [MVVM](/编程语言/JavaScript/Vue/nav.md#MVVM)\n\n### BFF\n\n- 为前端而生的后端服务\n\n```mermaid\ngraph TB\n    subgraph \"Applications\"\n        WebApp[Web APP]\n        MobileApp[Mobile APP]\n        DesktopApp[Desktop APP]\n    end\n\n    subgraph \"Gateways\"\n        WebGateway[Web APP Gateway]\n        MobileGateway[Mobile APP Gateway]\n        DesktopGateway[Desktop APP Gateway]\n    end\n\n    subgraph \"Services\"\n        AccountService[Account Service]\n        PaymentService[Payment Service]\n        SecurityService[Security Service]\n        WarehouseService[Warehouse Service]\n    end\n\n    WebApp -- REST --> WebGateway\n    MobileApp -- RMI --> MobileGateway\n    DesktopApp -- gRPC --> DesktopGateway\n\n    WebGateway --> AccountService\n    WebGateway --> PaymentService\n    MobileGateway --> PaymentService\n    MobileGateway --> SecurityService\n    DesktopGateway --> SecurityService\n    DesktopGateway --> WarehouseService\n\n```\n","metadata":"","hasMoreCommit":false,"totalCommits":1,"commitList":[{"date":"2024-10-25T11:43:52+08:00","author":"MY","message":"📦架构模式","hash":"7a4552433037b568c78fb856bbb5268f027deae4"}],"createTime":"2024-10-25T11:43:52+08:00"}