{"name":"响应式架构","id":"软件工程-架构模式-响应式架构","content":"# 响应式架构\n\n对请求、事件、失败、用户进行响应\n\n- 实时：及时给用户响应\n- 高效：充分利用多核\n- 弹性：隔离故障、解耦参与方\n\n在[响应式编程](/编程语言/编程范式/响应式编程.md)的基础上\n\n## 原则\n\n### Responsive\n\n- 确保及时对用户做出一致快速的响应\n\n### Elastic\n\n- 在工作负载变化的情况下也能及时响应\n- 避免出现中央瓶颈，使得可以分片复制动态伸缩 不仅可以抗住高负载 也能节省资源\n\n### Message Driven\n\n通过异步消息驱动不仅可以在组件之间隔离边界，松耦合，弹性也得到一定提升\n\n### Resilient\n\n- 回弹性\n\n使用复制、隔离、委派等来保证系统在出现故障时的响应能力\n\n## 本质\n\n### 事件与消息\n\n- 事件关注于源\n- 消息关注于终点\n\n### 消息传递\n\n事件的触发，导致了消息的传递\n\n### 异步\n\n### 消息流程\n\n- 传递路径要短\n- 消息流尽可能单向\n- 回执消息保持精简\n- 使用[DDD](/软件工程/领域驱动设计.md)来设计消息流程\n\n### 背压\n\n- 本质上是[流控](/软件工程/架构/系统设计/流量控制.md)\n- 当消费速度跟不上生产速度时 消费者会反过来压制生产速度\n\n### 目标透明\n\n[原始分布式时代](/软件工程/架构/演进式架构.md#原始分布式时代)的RPC：\n\n- 位置透明：生产者消费者不关心对方的位置\n- 远程与本地调用都使用统一的抽象\n\n但是这种统一的抽象往往会带来额外的问题，需要付出更大的成本\n\n### 定界一致性\n\n通过保证小一级模块的强一致性从而来使系统达成最终一致性\n\n使用[DDD](/软件工程/领域驱动设计.md)来将相应的行为与数据划分在一起，形成事务边界\n\n## 模式\n\n### 单一组件\n\n将复杂组件拆解为不同的组件，每个组件遵循[SRP原则](/软件工程/软件设计/设计原则.md#SRP:单一职责原则)\n\n### 错误内核\n\n将状态保留在高层 当进行错误恢复时 状态得以保留从而恢复到当时状态 避免出现错误时当前组件崩溃状态丢失\n\n### 任其崩溃\n\n对于恢复成本极高的组件出现故障时，不进行修复，直接重启\n\n为了发现故障，需要通过某种心跳监控来发现\n\n### [断路器](/软件工程/微服务/服务治理/服务容错.md#断路器模式)\n\n### 消息流模式\n\n#### 请求响应\n\n#### 自包含消息\n\n消息本身包含了处理所需的上下文 状态保存在消息里 处理者保持无状态\n\n#### 前进流\n\n使用第三方组件是有代价的 如非必要 勿增实体\n\n#### 聚合器\n\n聚合多方服务的数据 若无依赖 使用并发请求再汇总\n\n#### 商务握手\n\n- 保证消息的可靠传递\n\n### 流控模式\n\n#### 推拉\n\n由消费者根据自身处理能力进行批量拉取数据 可以解决背压问题 \n\n推模式则时效性高 主动推送\n\n#### 托管队列\n\n由于速度差异或者瞬时流量 使用一个FIFO队列来进行流量整形 使系统可以平滑度过\n\n#### 丢弃\n\n#### 限流","metadata":"tags: ['架构', '架构模式', '响应式']","hasMoreCommit":false,"totalCommits":5,"commitList":[{"date":"2023-04-04T16:51:17+08:00","author":"MY","message":"📦演进式架构","hash":"29f4cd861cbe2d13f4b5cafa72dc73c4e2979ccb"},{"date":"2022-06-15T17:47:32+08:00","author":"cjiping","message":"📦整理 服务容错","hash":"72f94da3b44306fd7768d1716420231dcda7b6b1"},{"date":"2021-11-25T22:25:56+08:00","author":"MY","message":"✏️更新 响应式架构","hash":"d35463c60590c62d1d1b8f66f279249c56a50b2c"},{"date":"2021-11-24T22:23:46+08:00","author":"MY","message":"✏️更新 响应式架构","hash":"297e22765037e9011371c35453440fd40e5e6aec"},{"date":"2021-11-23T21:57:58+08:00","author":"MY","message":"➕新增 响应式架构","hash":"f9211a85b15e462629f45f35a457e35fc80afd95"}],"createTime":"2021-11-23T21:57:58+08:00"}