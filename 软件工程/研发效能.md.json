{"name":"研发效能","id":"软件工程-研发效能","content":"# 研发效能\n\n> 团队能够持续地为用户产生有效价值的效率，包括有效性（Effectiveness）、效率（Efficiency）和可持续性（Sustainability），就是能否长期、高效地开发出有价值的产品\n\n## 效能度量\n\n> 从应用程序开发的生命周期中获取数据，并使用这些数据来衡量软件开发人员的工作效率\n\n- 研发效能难以真正地被度量\n\n原则：效能度量不要与绩效挂钩，提供度量作参考和工具\n\n指标分类：\n\n- 速度：交付的速率\n- 准确度：是否跟计划吻合，跟用户需求吻合，能否提供较大的用户价值\n- 质量：包括产品的性能、功能、可靠性、安全等方面\n- 个人效能：开发过程中的效率指标\n\n如何度量：\n\n1. 目标驱动，关注什么，度量什么\n2. 先从全局上找瓶颈，再深入细节\n3. 收集主观的评价，作为度量数据\n4. 关注个人维度的指标提高效能\n\n## 流程\n\n对于优化的方法，做法是逐步优化已有的开发流程和框架，甚至只给出原则，让团队成员逐步摸索并最终找到合适的方法\n\n### 入库前\n\n- 规范化、自动化核心步骤\n- 快速反馈，增量开发\n\n### 信息流通\n\n- 战略目标相关信息：只有当团队成员清楚公司以及团队目标时，才能更容易把自己的目标与之对齐\n- 代码相关信息：尽量公开。代码是最直接的参考，是最实时的文档\n- 研发过程的各种文档：通过统一的工具，方便大家添加、修改、查询这些文档\n- 各种标识信息：各种工具之间流动着多种标识信息，包括任务工单、代码提交号、版本号、代码审查 ID、测试用例 ID、Bug ID 等，管理这一类信息的有效方法是，各种工具通过提供 API，做到服务化，形成工具之间的网状连接\n\n## 研发环境\n\n- 舍得投入资源，用资源换取开发人员时间\n- 对环境的获取进行服务化、自助化\n- 注重环境的一体化、一致性，固化最佳实践\n\n## 代码审查\n\n引入阶段：\n\n- 统一思想，代码审查也是工作量\n- 选择合适的试点团队\n- 机器审查和人工审查结合，使得人工审查更聚焦\n\n实施阶段：\n\n- 保证提交原子性，重视提交说明\n- 审查时互相尊重和基于讨论\n\n## 技术债\n\n- 利用技术债的好处，必要时要大胆“举债前行”\n- 控制技术债，在适当的时候偿还适当部分的技术债\n\n## 目标\n\n- 技术目标：偿还技术债 或 前瞻性的技术准备\n- 业务目标\n\n技术常常在短期被高估，在长期被低估，不要因为短期的业务目标而忽略长期的技术目标\n","metadata":"","hasMoreCommit":false,"totalCommits":5,"commitList":[{"date":"2023-06-11T14:37:21+08:00","author":"MY","message":"✏️研发效能","hash":"d4d41ed3748b1fdc74585dd2bf2bdd24a9dc1991"},{"date":"2023-06-05T21:18:49+08:00","author":"MY","message":"✏️研发效能","hash":"c5e96dcfe3d8fe47d9d0a2dafb5d28ab7a7a83e1"},{"date":"2023-06-04T15:17:49+08:00","author":"MY","message":"✏️研发效能","hash":"0cd86ab5ece40dad749d24993578a17c1ffe2c6c"},{"date":"2023-05-29T21:16:57+08:00","author":"MY","message":"✏️研发效能","hash":"22012b571805b7215a93e2e7f4ea9d015b39b15a"},{"date":"2023-05-28T15:36:54+08:00","author":"MY","message":"➕研发效能","hash":"17adc93a3a37bda11259d943fe2287f407fe4a9e"}],"createTime":"2023-05-28T15:36:54+08:00"}