{"name":"结构型模式","id":"软件工程-设计模式-结构型模式","content":"# 结构型模式\n\n- 如何组合类和对象以获得更大的结构\n\n## 适配器\n\n> 将一个接口转换成另一个接口，通过使用适配器模式，不兼容的类可以一起工作\n\n1. 解决接口不兼容问题：当现有的类接口与预期接口不匹配时，适配器模式可以通过转换接口，解决不兼容问题，让不同接口的类能够协同工作。\n2. 提高代码复用性：适配器模式通过封装现有类的接口，使其符合预期接口，从而避免了对现有代码的修改和重写，大大提高了代码的复用性。\n3. 系统扩展性：通过适配器模式，可以在不修改已有代码的情况下扩展系统功能，增强系统的灵活性\n\n```mermaid\nclassDiagram\n    class Target {\n        +ops()\n    }\n    class Adapter {\n        +ops()\n    }\n    class Adaptee {\n        +run()\n    }\n    class ConcreteTarget {\n        +ops()\n    }\n    Target <|-- Adapter: 实现\n    Adaptee <--* Adapter: 组合\n    Target <|-- ConcreteTarget\n    Client --> Target\n```\n\n- 双向适配器\n\n```java\ninterface Target{\n    void ops();\n}\n\nclass Adaptee{\n    public void run() { }\n}\n\nclass Adapter implements Target{\n    private Adaptee adaptee;\n    public Adapter(Adaptee adaptee) {\n        this.adaptee = adaptee;\n    }\n\n    @Override\n    public void ops() {\n        // do something\n        adaptee.run();\n    }\n}\n// 使用\nTarget target = new Adapter(new Adaptee());\ntarget.ops();\n```\n\n分类：\n\n- 类适配器：适配器类继承自一个已有的类（即要适配的类），并实现一个目标接口（即客户端期望的接口）\n- 对象适配：适配器类中持有一个对要适配对象的引用，通过组合的方式将不兼容的接口转换为兼容的接口。适配器类实现了目标接口，并在内部通过调用适配对象的方法来完成所需的功能\n- 接口适配方式\n\n## 桥接\n\n> 将抽象部分与实现部分分离,使它们都可以独立地变化\n\n1. 解决多维度变化的问题：当一个类存在多个独立变化的维度时，直接使用继承会导致类的数量呈指数级增长。例如，如果一个图形类既需要支持不同的形状（如圆形、方形）又需要支持不同的颜色（如红色、蓝色），使用继承会导致类的组合数量急剧增加。\n2. 提高系统的灵活性和可维护性：通过桥接模式，抽象部分和实现部分可以独立演化，减少了它们之间的耦合。这使得系统更易于扩展和维护，因为修改一个部分不会直接影响到另一个部分。\n3. 支持动态变化：桥接模式通过组合关系替代继承关系，使得在运行时可以动态地改变实现部分，而不需要修改抽象部分的代码。这为系统带来了更大的灵活性\n\n```java\nabstract class Window {\n    //...\n    abstract setMenu(Menu menu)\n}\ninterface Menu{}\n\nclass LinuxWindow extends Window{...}\nclass MacWindow extends Window{...}\n\nclass PlainMenu implements Menu{...}\nclass RichMenu implements Menu{...}\n```\n\n## 组合\n\n>将对象组合成树形结构的部分-整体层次结构，使得客户使用单个对象或组合对象都有一致性\n\n```mermaid\nclassDiagram\n    class Component {\n        -string _name\n        +Add(Component) void\n        +Remove(Component) void\n        +Display(int) void\n    }\n\n    class Leaf {\n        +Add(Component) void\n        +Remove(Component) void\n        +Display(int) void\n    }\n\n    class Composite {\n        -List~Component~ children\n        +Add(Component) void\n        +Remove(Component) void\n        +Display(int) void\n    }\n\n    class Client\n\n    Component <|-- Leaf : 继承\n    Component <|-- Composite : 继承\n    Client --> Component : 依赖\n\n    note for Leaf \"叶子节点，没有子节点\\n叶子节点不能包含子对象，因此其Add和Remove没有实际意义\"\n    note for Composite \"有叶节点行为，用来存储子对象\\n并实现Component的操作，比如Add和Remove\\nchildren用来保存子对象\"\n    note for Component \"组合中的对象需要声明在\\n父类中的操作在所有子类中都\\n定义了公共操作的行为接口\\n是构成Component的原始部件\"\n\n```\n\n```java\ninterface Route {\n    Route segement1, segement2;\n} // 路线\nclass NationalHighway implements Route{} // 国道\nclass CountryRoad implements Route {} // 乡道\n```\n\n组合模式很重要的一点就是客户端使用所有节点的方式都相同，同时这些节点内部又以组合的方式组合其他节点。组合模式特别适合那些能够用树形结构表示的数据，例如文件系统、组织架构等\n\n## 装饰器\n\n> 给一个对象添加额外的职责\n\n为了应对继承关系过于复杂的问题。通过装饰器模式，可以通过组合替代继承，从而简化代码结构，并为原始类添加增强功能。如果仅使用继承的方式来扩展功能，可能会导致类的数量爆炸，继承层次变得复杂且难以维护\n\n```mermaid\nclassDiagram\n    class Component {\n        +ops()\n    }\n    class ConcreteComponent {\n        +ops()\n    }\n    class Decorator {\n        +ops()\n    }\n    class ConcreteDecorator {\n        +ops()\n        -component Compoment\n    }\n    Component <|-- Decorator\n    Decorator <|-- ConcreteDecorator\n    Component <|-- ConcreteComponent\n```\n\n装饰器与被装饰的对象都拥有同一个接口，所以说，装饰器对客户来说是透明的\n\n```java\nabstract class InputStream{...}\nclass FileInputStream extends InpurStream{...}\n```\n\n## 外观\n\n> 为子系统中的一组接口提供一个统一的高层接口，使子系统更容易使用\n\n```mermaid\nclassDiagram\n    class Facade {\n        +ops()\n    }\n    class SystemA {\n        +opsA()\n    }\n    class SystemB {\n        +opsB()\n    }\n    Facade <-- SystemA\n    Facade <-- SystemB\n    Client --> Facade\n```\n\n\n```java\nclass Facade{\n    private SubSystem1 subSystem1;\n    private SubSystem2 subSystem2;\n\n    void ops(){\n        subSystem1.ops1();\n        subSystem2.ops2();\n    }\n}\n// 使用\nFacade facade = new Facade();\nfacade.ops();\n```\n\n外观模式解决的是接口易用性问题，通过封装减少使用者需要了解的信息\n\n## 享元\n\n> 共享系统中大量的细粒度对象\n\n- 提高性能\n\n```mermaid\nclassDiagram\n    Flyweight <|-- ConcreteFlyweight\n    Flyweight <|-- UnsharedConcreteFlyweight\n    FlyweightFactory *--> Flyweight\n    class FlyweightFactory {\n        +getFlyweight(type)\n    }\n    Client --> FlyweightFactory\n    Client --> ConcreteFlyweight\n    Client --> UnsharedConcreteFlyweight\n```\n\n- FlyweightFactory：主要是用来确保合理地共享Flyweight,当用户请求一个Flyweight时，FlyweightFactory 会返回一个已有或者创建享元对象\n- UnsharedConcreteFlyweight：不需要共享的Flyweight子类。因为Flyweight\n接口共享成为可能，但它并不强制共享\n\n```java\nclass MessageFactory{\n    Message getHeartBeatMeessage();\n}\ninterface Message{...}\nclass HeartBeatMessage implements Message{...}\n```\n\n## 代理\n\n>为其他对象提供一个代理访问控制\n\n代理模式的主要作用是通过引入代理类，在不改变原始类代码的情况下，为原始类添加附加功能。代理模式可以帮助将非业务功能（如监控、日志、缓存等）与核心业务逻辑解耦，简化代码维护和开发。动态代理则进一步解决了静态代理中需要为每个类单独创建代理类的问题，动态地在运行时生成代理类，大大减少了重复代码和开发成本\n\n- 又称为委托模式\n\n```mermaid\nclassDiagram\n    class Subject {\n        +action()\n    }\n    class SubjectProxy {\n        -target: ConcreteSubject\n        +action()\n    }\n    Subject <|-- ConcreteSubject\n    SubjectProxy o--> ConcreteSubject\n    Client --> Subject\n```\n\n### 静态代理\n\n- 结构简单，代码繁琐\n\n```java\ninterface Subject{\n    void run();\n}\nclass Proxy implements Subject{\n    private Subject realObject = new RealSubject();\n    void run(){\n        //before\n        realObject.run();\n        //after\n    }\n}\n\n// 使用\nSubject subject = new Proxy();\nsubject.run();\n```\n\n### 动态代理\n\n- JDK动态代理\n\n```java\nSubjectImpl impl = new SubjectImpl();\nSubject proxy = (Subject) Proxy.newProxyInstance(impl.getClass().getClassLoader(), \n                impl.getClass().getInterfaces(), (proxy1, method, args1) -> {\n    System.out.println(\"pre invoke\");\n    return method.invoke(impl, args1);\n});\nproxy.request();\n```\n\n如果多个接口重名，则调用接口方法以第一个接口为主\n\n- cglib动态代理\n\n```java\nEnhancer enhancer = new Enhancer();\nObject target = new Object();\nenhancer.setSuperclass(Object.class);\nenhancer.setCallback((MethodInterceptor) (obj, method, args1, proxy) -> {\n    System.out.println(method+\" invoke\");\n    return method.invoke(target, args1);\n});\nObject o = enhancer.create();\nSystem.out.println(o.hashCode());\n```\n\n## generation gap（生成模式）\n\n该模式会生成代码导出行为 再通过编程来丰富程序行为 只修改或扩展一次 而可以生成代码多次 win下的GUI设计好像就这么做的\n\n```mermaid\nclassDiagram\n    class Client {\n    }\n\n    class CoreClass {\n        +state\n        +operation()\n    }\n    \n    class ExtensionClass {\n        +addedState\n        +operation()\n        +newOperation()\n    }\n    \n    Client --> ExtensionClass\n    CoreClass <|-- ExtensionClass\n    CoreClass : operation() -- generated and/or default implementation\n    ExtensionClass : operation() -- modified and/or extended implementation\n\n```\n\n问题：\n\n需求变化导致生成代码的变化\n\n解决方式一是警告禁止修改 二是计算代码差异重新生成 三则是隐藏生成的代码的细节 隔离变与不变\n","metadata":"","hasMoreCommit":true,"totalCommits":11,"commitList":[{"date":"2024-09-03T20:07:11+08:00","author":"MY","message":"✏设计模式","hash":"3d86449a875acd8fc0644eb1edcf0fe13c648f50"},{"date":"2023-03-09T02:59:03Z","author":"My","message":"✏设计模式","hash":"59189b4c38ed20fc71e63bf7a64d14f88a943543"},{"date":"2021-05-27T16:41:09+08:00","author":"cjiping","message":"✏更新 组合模式","hash":"ed6e667cf6decf12642836b7883eccc1acc3380f"},{"date":"2020-12-23T16:42:55+08:00","author":"cjiping","message":"✏更新 设计模式","hash":"6224f1379c2121ce7860a981235f1b17f0794a02"},{"date":"2020-08-06T13:23:17+08:00","author":"MY","message":"✏更新 结构型设计模式","hash":"898da3130d616928492adca150faed922dafda9a"},{"date":"2020-01-05T16:16:36+08:00","author":"MY","message":"更新外观模式","hash":"4d7a23a2dbcceda568f985da43eb347f0fa40d6d"},{"date":"2020-01-05T16:06:52+08:00","author":"MY","message":"更新适配器模式","hash":"98a85b3e3a31ea921ea8c75c286de56020b4d84c"},{"date":"2020-01-04T14:14:27+08:00","author":"MY","message":"更新动态代理","hash":"6dd4b48ed12b251aff7397e8615509636e058e89"},{"date":"2020-01-03T22:01:51+08:00","author":"MY","message":"更新了静态代理","hash":"b7d7c73b8ea79dd093a44fa93cf25d16822d364f"},{"date":"2019-12-29T20:11:43+08:00","author":"MY","message":"更新享元模式类图","hash":"b54a5c6a1f3e9b66f5680d8b99fbdcc53c932712"}],"createTime":"2019-11-25T09:27:14+08:00"}