{"name":"质量工程","id":"软件工程-质量工程","content":"\n# 软件质量工程（Quality Engineering）\n\n> **符合需求即质量，预防产生质量，检验不能产生质量。**\n> 质量工程是一种系统性地在软件生命周期中规划、实施、度量和改进质量的工程活动，目标是让软件在复杂环境下持续稳定地满足用户与业务需求。\n\n---\n\n## 一、质量工程的理念\n\n### 质量的本质\n\n* **质量的定义**：质量是软件满足明确需求的程度。\n* **预防优于检验**：测试只能发现缺陷，预防才能产生质量。\n* **相对性原则**：质量是相对的，不能脱离用户、场景、成本与时间谈质量。\n* **质量是系统性产物**：它不是单点的测试结果，而是架构、流程、文化、反馈共同作用的结果。\n\n---\n\n## 二、为什么需要质量工程\n\n* **世界变化快**：业务迭代频繁，需求变化迅速。\n* **软件复杂度高**：多模块、分布式、依赖多，问题传播快。\n* **团队规模扩大**：人员流动快、经验断层明显。\n* **风险成本上升**：线上事故、口碑、合规、资金损失。\n\n---\n\n## 三、质量属性模型（非功能性质量）\n\n依据 ISO/IEC 25010 模型，可将软件质量拆解为以下八大维度：\n\n| 分类        | 子属性            | 说明          |\n| --------- | -------------- | ----------- |\n| **功能适用性** | 完整性、正确性        | 是否实现预期功能    |\n| **性能效率**  | 吞吐、响应、资源利用     | 系统性能与资源消耗   |\n| **兼容性**   | 互操作性、共存性       | 能否与外部系统共存协作 |\n| **可用性**   | 易用性、可学习性       | 使用与理解的便捷程度  |\n| **可靠性**   | 可恢复性、可容错性      | 故障后的可用与自愈   |\n| **安全性**   | 机密性、完整性、可追责    | 系统抵御风险的能力   |\n| **可维护性**  | 可分析性、可修改性、可测试性 | 代码质量、扩展性    |\n| **可移植性**  | 可适应性、可安装性      | 环境迁移与部署便利性  |\n\n- 软件质量并非单一指标，而是以上多维属性的综合平衡。\n\n---\n\n## 四、质量工程做什么\n\n* **高质量架构**：在SLA约束下设计系统架构。\n* **小步快跑、持续交付**：通过小步试错建立正反馈闭环。\n* **全链路质量管理**：覆盖开发、测试、发布、运维全过程。\n* **故障管理与止损**：快速识别、分析、修正、复盘。\n* **质量规范与流程建设**：标准化执行，降低人为差异。\n* **知识沉淀与传承**：建立共享知识体系与经验库。\n\n---\n\n## 五、质量思维与反馈机制\n\n### 架构师立场\n\n架构师决定系统的基因，质量工程是架构设计的重要目标。\n\n#### 质量经济学\n\n* **要与不要，是个问题**：每个新增功能都伴随质量风险与维护成本。\n* **成本与收益平衡**：控制质量成本，使其小于潜在损失。\n\n| 成本类型       | 示例              |\n| ---------- | --------------- |\n| **预防成本**   | 测试自动化、代码审查、架构评审 |\n| **鉴定成本**   | 测试执行、静态分析、审计    |\n| **内部损失成本** | 缺陷返工、延期         |\n| **外部损失成本** | 线上事故、客户投诉、品牌损害  |\n\n#### 质量满意度\n\n衡量客户与业务方对交付结果的整体满意度。\n\n#### 正负反馈与熵控制\n\n* 项目新增输入导致系统熵增。\n* 建立**反馈机制**，通过数据与度量实现自我修正。\n* 小步试错、快速反馈，持续推动正循环。\n\n### 止损策略\n\n* 理清现状 → 盘点数据 → 分析价值。\n* 根据损害程度选择：\n\n  * **保守治疗**：局部修复。\n  * **刮骨疗伤**：结构性重构。\n  * **断臂求生 / 告别**：淘汰无价值模块。\n\n---\n\n## 六、质量保障活动全景\n\n| 阶段       | 质量活动            | 目标        |\n| -------- | --------------- | --------- |\n| **需求分析** | 需求评审、验收标准、优先级管理 | 减少需求偏差    |\n| **设计阶段** | 架构评审、风险建模、接口定义  | 控制结构性风险   |\n| **开发阶段** | 编码规范、单测、代码审查    | 保证实现质量    |\n| **测试阶段** | 自动化测试、集成测试、性能测试 | 验证功能正确性   |\n| **发布阶段** | 灰度发布、回滚验证、变更准入  | 控制上线风险    |\n| **运维阶段** | 监控告警、故障复盘、SLA跟踪 | 保障系统稳定    |\n| **改进阶段** | 数据度量、流程优化       | 持续改进与反馈闭环 |\n\n---\n\n## 七、度量体系\n\n> 用数据证明质量的进步，用度量驱动改进。\n\n### 度量体系结构\n\n```mermaid\nstateDiagram-v2\n  度量诉求 --> 度量场景\n  度量场景 --> 指标体系\n  指标体系 --> 研发质量\n  指标体系 --> 人员成长\n  研发质量 --> 项目管理\n  项目管理 --> 人员成长\n```\n\n---\n\n### 1. 需求管理度量\n\n```mermaid\nstateDiagram-v2\n  需求数量 --> 需求到人\n  需求数量 --> 需求完成周期\n  需求完成周期 --> 对事评估\n  需求到人 --> 人员需求周期\n  人员需求周期 --> 对人评估\n  需求到人 --> 需求大盘\n  需求大盘 --> 需求完成情况\n  需求完成情况 --> 综合评估\n```\n\n* 关注指标：需求周期、延期率、资源利用率、价值回报比。\n* **复盘维度**：\n\n  * 合理性（设计、优先级）\n  * 完成度（周期、延期）\n  * 价值（投入产出比）\n\n---\n\n### 2. 缺陷管理\n\n```mermaid\nstateDiagram-v2\n  state 缺陷管理 {\n    改进开发过程 --> 提高产品质量\n    提高产品质量 --> 改进开发过程\n  }\n  缺陷度量 --> 缺陷分布\n  缺陷度量 --> 缺陷密度\n  缺陷度量 --> 缺陷趋势\n  缺陷度量 --> 漏测率\n```\n\n| 指标       | 说明                 |\n| -------- | ------------------ |\n| **缺陷分布** | 各模块缺陷数量            |\n| **缺陷密度** | 缺陷数 / 产品规模（千行代码）   |\n| **缺陷趋势** | 各状态缺陷变化曲线          |\n| **漏测率**  | 非QA发现缺陷数 / QA发现缺陷数 |\n\n```mermaid\nstateDiagram-v2\n  [*] --> 当前版本密度≤上一版本密度\n  当前版本密度≤上一版本密度 --> 增加测试投入: 否\n  当前版本密度≤上一版本密度 --> 质量在进步: 是\n```\n\n---\n\n### 3. 代码质量跟踪\n\n| 维度    | 指标              |\n| ----- | --------------- |\n| **人** | 提交人、评审人、代码活跃度   |\n| **量** | 提交量、注释量         |\n| **质** | 复杂度、不合规范数、单测覆盖率 |\n\n---\n\n### 4. 发布与变更度量\n\n| 类别       | 指标                        |\n| -------- | ------------------------- |\n| **发布度量** | 发布次数、成功率、回滚次数、灰度接入率、紧急发布率 |\n| **准入度量** | 卡点数、跳过数、风险阻断数             |\n\n> 发布度量可以反馈研发质量波动；准入度量限制风险扩散。\n\n---\n\n## 八、质量管理与治理体系\n\n```mermaid\nstateDiagram-v2\n  工程效率 --> 质量控制\n  质量控制 --> 工程规范\n  工程规范 --> 工程效率\n```\n\n### 质量控制\n\n* **执行维度**：过程管理、阶段性检查。\n* **人员维度**：培训与知识共享。\n* **规范维度**：制定、优化开发与测试标准。\n\n### 质量升级路径\n\n| 阶段   | 目标        |\n| ---- | --------- |\n| 代码质量 | 代码规范、单测完善 |\n| 服务质量 | 稳定性、性能    |\n| 功能测试 | 快速恢复能力    |\n| 线下质量 | 线上质量保障    |\n| 模块质量 | 全链路质量     |\n\n### 质量具化\n\n定义质量场景，细化质量控制维度：\n\n* 场景主体\n* 场景任务\n* 场景环境\n* 变化管理\n\n---\n\n## 九、自动化与平台化实践\n\n* **持续集成（CI）**：自动构建、单测、静态扫描。\n* **[持续交付（CD）](/运维/持续交付.md)**：[灰度](/运维/灰度发布.md)、蓝绿部署、回滚策略。\n* **质量门禁**：在流水线中建立质量阈值。\n* **度量平台**：采集数据、可视化展示、自动预警。\n\n---\n\n## 十、质量文化与治理机制\n\n* **左移质量**：问题提前暴露，开发阶段即发现。\n* **右移质量**：线上监控、压测、混沌工程。\n* **全员质量责任制**：质量不是QA的责任，而是团队共同的结果。\n* **治理机制**：\n\n  * 质量红线指标（错误率、回滚率、事故响应时间）\n  * 定期质量评审与复盘\n  * 质量指标纳入团队绩效与OKR\n\n---\n\n## 十一、全链路质量体系\n\n```mermaid\nstateDiagram-v2\n  需求实现 --> 变更\n  问题修复 --> 变更\n  变更 --> 准入\n  准入 --> 发布\n  发布 --> 灰度\n  灰度 --> 生产\n```\n\n* **全链路压测**：从入口到核心链路，验证容量与稳定性。\n* **安全生产体系**：从设计到运维确保系统持续健康运行。\n\n---\n\n## 十二、总结\n\n质量工程不是测试，而是：\n\n> **一套以“系统性预防 + 数据化度量 + 持续反馈改进”为核心的工程体系。**\n\n它贯穿需求、设计、开发、测试、运维的全生命周期，\n通过**规范化流程、自动化工具、文化共识与经济思维**，\n让软件系统在复杂环境中持续稳定地交付价值。\n\n","metadata":"","hasMoreCommit":false,"totalCommits":9,"commitList":[{"date":"2025-10-14T19:27:58+08:00","author":"MY","message":"docs(software-quality): 重构质量工程文档内容与结构","hash":"f5ba86aff97fdc58bbbb947c737522e5b27ce46d"},{"date":"2022-11-28T17:46:55+08:00","author":"cjiping","message":"📦持续交付","hash":"3c342c5ee8d14964c4c733189c7361a0e2d66845"},{"date":"2022-03-04T15:56:33+08:00","author":"cjiping","message":"📦整理 灰度发布","hash":"57e56d09a983ea4c692619c2870d9ae1a1df084c"},{"date":"2022-03-02T16:23:26+08:00","author":"cjiping","message":"📦整理 持续集成","hash":"1d45946d6cb278285464a28c5d4b61fa2193c736"},{"date":"2022-02-17T20:07:55+08:00","author":"cjiping","message":"✏️更新 质量工程","hash":"917d2409c6110489bfa4ace2eab47a7ae01ebd30"},{"date":"2022-02-14T21:48:34+08:00","author":"MY","message":"✏️更新 质量工程","hash":"ec635bec8f49e244a2039630a8739d595aaab840"},{"date":"2022-02-13T22:22:53+08:00","author":"MY","message":"✏️更新 质量工程","hash":"a1096441892993bcd1bcecbc14b3cb214daa6334"},{"date":"2022-01-04T23:39:34+08:00","author":"MY","message":"✏️更新 质量工程","hash":"2750ea73928be9e9d22e3ba1dc502c81e7de3183"},{"date":"2022-01-03T23:48:09+08:00","author":"MY","message":"➕新增 质量工程","hash":"d8d74e8042ac9c47a63f3fa57dd1a5ef175789ce"}],"createTime":"2022-01-03T23:48:09+08:00"}