{"name":"代码审查","id":"软件工程-软件设计-代码质量-代码审查","content":"\n# 代码审查（Code Review）\n\n代码审查（Code Review，又称代码复查）是通过**阅读和评估源代码**的方式，确保代码在设计、实现、性能、安全和可维护性等方面满足团队标准与业务需求。\n\n参考资料：\n\n* 谷歌工程实践（代码审查指南）：[https://jimmysong.io/eng-practices/docs/review/](https://jimmysong.io/eng-practices/docs/review/)\n\n> **核心理念：**\n> 代码审查的目标是“**帮助别人变得更好**”，而不是“替别人写代码”。\n\n---\n\n## 一、为何要进行代码审查\n\n代码审查的目的不仅是发现缺陷，更是**持续提升团队整体工程质量和能力**的过程：\n\n* **提升质量：** 早期发现设计或实现问题，减少生产缺陷。\n* **促进学习：** 审查过程即知识共享过程，促进团队成员成长。\n* **规范一致性：** 推动统一的编码风格和最佳实践。\n* **增强可维护性：** 审查确保代码清晰、结构合理、易于理解和修改。\n* **提升团队信任与协作：** 审查促进沟通，减少技术孤岛。\n* **数据驱动改进：** 通过量化指标（如审查时长、缺陷发现率）反向优化研发流程。\n\n---\n\n## 二、谁来审查\n\n| 角色                  | 职责                     |\n| ------------------- | ---------------------- |\n| **作者（Author）**      | 提交改动的人，应在提交前自检并准备好说明。  |\n| **审查者（Reviewer）**   | 负责从设计、规范、性能、安全等维度提出反馈。 |\n| **维护者（Maintainer）** | 对核心模块或仓库质量负责，有最终合并权。   |\n| **新成员（Observer）**   | 可旁听或参与小型审查，学习代码质量标准。   |\n\n> 原则上：**代码由作者外的至少一名高级开发人员审查。**\n> 对于核心或高风险变更，应由两人以上共同审查。\n\n---\n\n## 三、审查什么\n\n代码审查的关注点包括但不限于以下方面：\n\n1. **设计合理性**：是否符合系统架构与设计约束。\n2. **可读性与可维护性**：命名、结构、注释是否清晰。\n3. **功能正确性**：是否满足需求，无逻辑或边界错误。\n4. **测试质量**：是否覆盖主要场景，测试是否健壮。\n5. **性能影响**：是否引入明显性能回退。\n6. **安全性**：是否存在潜在安全漏洞。\n7. **兼容性**：是否考虑上下游系统的接口影响。\n\n---\n\n## 四、审查策略\n\n### 4.1 必备检查项\n\n* 符合团队编码规范（格式化、命名、日志、异常处理等）\n* 无敏感信息（密码、token、个人数据）\n* 变更说明完整，commit 信息规范\n* 单元测试或集成测试通过\n\n### 4.2 业务高压线\n\n* 资金流、计费逻辑、权限校验等核心路径必须二次审查\n* 不得绕过统一安全框架或认证逻辑\n\n### 4.3 历史故障点\n\n* 曾出现过线上事故的模块，必须增加交叉审查\n* 参考历史缺陷记录重点关注薄弱点\n\n### 4.4 变更分级\n\n| 级别      | 示例               | 审查要求  |\n| ------- | ---------------- | ----- |\n| **高风险** | 核心逻辑、数据库结构、跨模块接口 | ≥2人审查 |\n| **中风险** | 新功能、业务逻辑调整       | 1人审查  |\n| **低风险** | 文档更新、UI微调、注释优化   | 可快速审查 |\n\n### 4.5 内容分级\n\n* **设计级**：评估架构与实现思路\n* **实现级**：关注代码实现细节\n* **部署级**：审查配置、脚本、环境影响\n\n---\n\n## 五、审查标准\n\n* **以质量为首要目标。**\n* **务实优先于完美。**\n  若存在更优但非关键性方案，不应阻塞交付。\n* **积极反馈，鼓励改进。**\n  提出问题时应附带改进建议。\n* **记录结论。**\n  对争议和重大决策应记录，便于后续回溯。\n\n---\n\n## 六、审查原则\n\n* **遵循规范，不主观臆断。**\n* **尊重作者设计，不带情绪化批评。**\n* **注重沟通，而非对抗。**\n* **小步快跑，频繁审查。**\n* **关注问题根因，而非表象。**\n\n---\n\n## 七、审查形式\n\n### 7.1 同步评审（CR讲解）\n\n开发者现场讲解代码思路与变更内容，审查者同步提问、讨论。\n适用于核心模块、复杂逻辑、跨模块变更。\n\n**特点：**\n\n* 实时沟通效率高\n* 能快速达成共识\n* 但耗费精力较大，不宜频繁使用\n\n### 7.2 异步评审（CR Review）\n\n开发者通过工具（如 GitLab MR、Gerrit、GitHub PR）提交代码，由审查者异步评审。\n\n**特点：**\n\n* 异步沟通灵活\n* 适合常规开发流程\n* 对团队自律和代码表达要求较高\n\n> 原则：**小而多。**\n> 每次提交的变更量应尽量小，以提高审查效率。\n\n---\n\n## 八、审查工具\n\n| 工具                        | 特点                    |\n| ------------------------- | --------------------- |\n| **Git / GitLab / GitHub** | 最常用，支持 MR/PR 工作流      |\n| **Gerrit**                | 适合大型企业级项目，支持严格权限控制    |\n| **Upsource**              | JetBrains 提供的专业代码审查平台 |\n| **SonarQube**             | 静态扫描结合人工审查，提升整体质量     |\n| **Lint 工具**               | 自动化格式和规范检查，减少低级问题     |\n\n---\n\n## 九、代码飞检（Code Spot Check）\n\n代码飞检是由质量负责人或架构师对**随机模块或高风险变更**进行独立审查。\n目标是发现系统性问题、违规实践或潜在技术债。\n\n* 可按周或按版本节点评估\n* 飞检结果应沉淀为改进清单与团队培训材料\n\n---\n\n## 十、万物评审（Review Everything）\n\n代码审查只是质量体系中的一个环节。\n真正的工程文化应做到“**万物可评审**”，包括：\n\n* 需求评审\n* 设计/架构评审\n* 测试计划评审\n* 运维/发布计划评审\n* 事故复盘评审\n\n> 通过**多人参与、视角多样**的方式，提升决策的完整性与前瞻性。\n\n### 10.1 评审流程五问\n\n1. **为什么要做？**（目标与价值）\n2. **怎么做？**（设计与实现）\n3. **哪里做？**（影响范围）\n4. **何时做？**（时机与节奏）\n5. **谁来做？**（责任与角色）\n\n### 10.2 成本与收益分析\n\n* 明确目标产出\n* 控制审查成本\n* 量化改进效果（如缺陷率下降、交付周期缩短）\n\n### 10.3 评审形式\n\n* **会议评审：** 集中讨论重大方案\n* **桌面评审：** 小范围快速确认实现细节\n\n### 10.4 参与人员\n\n| 角色     | 职责           |\n| ------ | ------------ |\n| 发起者    | 发起评审，提供材料与背景 |\n| 主持人    | 控制节奏，保持讨论聚焦  |\n| 作者     | 讲解内容，接受反馈    |\n| 评审员    | 提出意见与建议      |\n| 记录员    | 记录结论与改进项     |\n| 团队关键成员 | 负责最终决策或签核    |\n\n---\n\n## 十一、度量与改进（可选）\n\n建立代码审查指标体系，用数据反哺流程优化：\n\n| 指标    | 含义           |\n| ----- | ------------ |\n| 审查覆盖率 | 被审查提交占比      |\n| 审查时长  | 平均从提交到通过时间   |\n| 缺陷发现率 | 每次审查发现的有效问题数 |\n| 审查参与度 | 团队成员参与情况     |\n| 审查满意度 | 审查过程反馈       |\n\n---\n\n## 十二、总结\n\n> 代码审查不是形式，而是一种**工程文化**。\n> 它让“代码质量”从个人责任变为**团队共识**。\n>\n> 审查的目标是更好的产品、更强的团队和更健康的技术生态。\n","metadata":"","hasMoreCommit":false,"totalCommits":9,"commitList":[{"date":"2025-10-17T15:09:34+08:00","author":"MY","message":"docs(code review): 更新代码审查文档内容与结构","hash":"adf22317771153040a427d5684e50a401ca8fa71"},{"date":"2022-08-09T21:04:09+08:00","author":"MY","message":"✏️代码审查","hash":"0e12e200752dbc0d904947e6fee7964ce45b215e"},{"date":"2022-01-06T21:52:20+08:00","author":"MY","message":"✏️更新 评审","hash":"70de8b3b1456cccd49f4e4931d86b7b1d478af49"},{"date":"2022-01-05T23:41:27+08:00","author":"MY","message":"✏️更新 编码规范 & 代码审查","hash":"59e5ccc62a0ce584fa5db06b98069dad4025d978"},{"date":"2022-01-03T14:20:34+08:00","author":"MY","message":"✏️更新 代码审查","hash":"58380da8efe1ba758677aa1ade67bd4cce43530c"},{"date":"2021-08-20T17:34:07+08:00","author":"cjiping","message":"✏更新 代码审查","hash":"23b340ce44bb15df366cbee5c574afd560f41725"},{"date":"2021-08-18T17:43:55+08:00","author":"cjiping","message":"📦整理 代码质量","hash":"72ef903971f583db2157da6eecbd0dee910787c9"},{"date":"2020-06-27T09:02:45+08:00","author":"MY","message":"重构 编码部分知识体系","hash":"a532ada3f43959c95c8542d869234b02db3abc68"},{"date":"2020-02-21T14:03:23+08:00","author":"MY","message":"增加代码审查","hash":"359adf1d63033676c16bb43fe0e2d4490be55e63"}],"createTime":"2020-02-21T14:03:23+08:00"}