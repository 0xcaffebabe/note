{"name":"接口测试","id":"软件工程-软件设计-代码质量-软件测试-接口测试","content":"# 接口测试\n\n还是通过设计输出来对契约完成验证\n\n黑盒接口测试：\n\n```mermaid\nstateDiagram-v2\n  工具辅助 --> 分析问题\n  分析问题 --> 工具辅助\n  工具辅助 --> 询问解惑\n  询问解惑 --> 工具辅助\n  询问解惑 --> 分析问题\n  分析问题 --> 询问解惑\n```\n\n从单个接口的测试开始，保障单个接口的正确性和健壮性，然后通过单个接口的测试完成多个接口的业务逻辑串联，站在业务逻辑的角度完成业务逻辑的正确性检测\n\n在接口测试中，可以通过单个接口测试完成了全部异常状态的覆盖；而在业务流程中，更需要关心业务流和数据流的关系，所以接口测试并不需要再过度关心如何用业务流的方法覆盖更多的代码逻辑异常\n\n## 测试框架\n\n测试框架的形成是在撰写大量测试脚本的过程中不断抽象封装出来的，然后，再用这个不断完善的框架，改写原有的测试脚本\n\n## 测试数据\n\n统一抽象，建立一个公共处理数据的方式以适配后期可能的存储方式扩展\n\n## mock服务设计\n\n- 简单\n- 处理速度\n- 轻量\n\n## 服务测试\n\n对于微服务来说，服务的拥有者应该负责测试代码的编写。测试运行的缓慢会影响修复错误的效率，从而影响开发\n\n只对单个服务进行测试可以提高测试的隔离性，针对服务所需要的外部合作者，一般都是mock或者打桩\n\n**契约测试**\n\n侧重于验证服务提供者的参数定义是否符合消费者的期望\n\n```groovy\norg.springframework.cloud.contract.spec.Contract.make {\n    request { // (1)\n        method 'PUT' // (2)\n        url '/fraudcheck' // (3)\n        body([ // (4)\n               \"client.id\": $(regex('[0-9]{10}')),\n               loanAmount : 99999\n        ])\n        headers { // (5)\n            contentType('application/json')\n        }\n    }\n    response { // (6)\n        status OK() // (7)\n        body([ // (8)\n               fraudCheckStatus  : \"FRAUD\",\n               \"rejection.reason\": \"Amount too high\"\n        ])\n        headers { // (9)\n            contentType('application/json')\n        }\n    }\n}\n```\n\n**打桩**：为被测服务的一些请求创建一些预设的响应\n\n**mock**：mock会验证请求是否被正确调用\n\n引入mock可能会更加复杂，所以可以创建一个智能的打桩服务","metadata":"","hasMoreCommit":false,"totalCommits":3,"commitList":[{"date":"2024-11-22T15:53:28+08:00","author":"MY","message":"📦微服务测试","hash":"79be8db296f67ce74a4a59bfad4f9cbf3e2e6b59"},{"date":"2023-01-29T17:40:18+08:00","author":"cjiping","message":"✏️接口测试","hash":"07a165d7d2cf024169d32599370c5eb9890af71a"},{"date":"2023-01-28T18:05:12+08:00","author":"cjiping","message":"➕接口测试","hash":"50288ef5369e6295fd180ed510dbaab37bbd5825"}],"createTime":"2023-01-28T18:05:12+08:00"}