{"name":"领域驱动设计","id":"软件工程-领域驱动设计","content":"# 领域驱动设计\n\n- 架构设计的本质是解决问题，我们可以随意地剪裁方法论，用其中20%-30%的套路来简化我们的沟通和设计成本即可\n\n三种类型导向的设计：\n\n- UI导向\n- 业务导向(DDD)\n- 数据导向\n\nDDD能解决的：\n\n- 代码冗余降低\n- 需求响应提升\n- 故障缺陷降低\n- 部分性能提升\n\n不能解决的：\n\n- 大部分性能优化的问题\n- 需求理解偏差的问题\n- 人员开发技术差的问题\n\n## 核心概念\n\n![三者关系](/assets/屏幕截图%202021-11-14%20211012.png)\n\n### 领域\n\n领域就是这个边界内要解决的业务问题域\n\n### 子域\n\n每个子域对应一个更小的问题域或更小的业务范围\n\n- 核心域：重点关注的子域\n- 支撑子域服务于核心子域\n- 通用子域被多个子域共同使用 具有通用性\n\n## 模型\n\n模型：对知识进行了选择性的简化和有意的结构化\n\n- 模型与设计相互影响\n- 模型是团队的通用语言\n  - 通用语言是连接技术人员与业务人员的桥梁\n- 模型是浓缩的知识\n\n### 有效建模的要素\n\n- 模型与实现绑定\n  - 如果模型不能帮助开发可运行的软件 那就毫无意义\n  - 寻找一种可以绑定模型与程序设计的设计\n- 建立了基于模型的语言\n- 模型蕴含丰富的知识\n- 提炼模型\n  - 不断对模型精简或者增加元素\n- 讨论\n\n```mermaid\nstateDiagram-v2\n  知识 --> 模型: 消化\n  模型 --> 实现\n  模型 --> 深层模型: 持续精进\n  深层模型 --> 模型\n  实现 --> 模型: 理解深入\n  实现 --> 深层模型\n```\n\n### 通用语言\n\n领域模型可以作为一种语言，语言就是模型的一种表现，模型与语言是一致的\n\n修改代码就是修改模型，修改模型就是修改通用语言\n\n![通用语言的内容](/assets/屏幕截图%202022-05-22%20211010.png)\n\n使用文档与图作为面的面沟通的辅助手段，文档不应重复表示代码已经明确表达的内容，并且要与模型保持同步\n\n### 模型驱动设计\n\n在设计模型时需要考虑如何让代码更加自然地表达模型\n\n### 亲自编码的建模师\n\n如果参与建模的人最终没有参与到实现的工作中，那么模型与实现二者之间便会割裂开来\n\n### 建模范式\n\n模型驱动的设计并非一定只能使用OO设计，混用其他的一些设计范式能使设计更加自然\n\n像现在我正在尝试系统整体使用OO，局部使用函数式\n\n## 领域\n\n### 分层架构\n\n![DDD中的四层](/assets/批注%202020-07-21%20125205.png)\n\n![DD分层与六边形架构与整洁架构](/assets/2022524203432.webp)\n\n层名          | 含义\n----------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------\n用户界面层（或表示层） | 负责向用户显示信息和解释用户指令。这里指的用户可以是另一个计算机系统，不一定是使用用户界面的人\n应用层         | 定义软件要完成的任务，并且指挥表达领域概念的对象来解决问题。这一层所负责的工作对业务来说意义重大，也是与其他系统的应用层进行交互的必要渠道。应用层要尽量简单，不包含业务规则或者知识，而只为下一层中的领域对象协调任务，分配工作，使它们互相协作。它没有反映业务情况的状态，但是却可以具有另外一种状态，为用户或程序显示某个任务的进度\n领域层（或模型层）   | 负责表达业务概念，业务状态信息以及业务规则。尽管保存业务状态的技术细节是由基础设施层实现的，但是反映业务情况的状态是由本层控制并且使用的。领域层是业务软件的核心，这层理论上不应该直接依赖基础设施层，而是通过依赖倒置实现领域层对基础资源的解耦\n基础设施层       | 为上面各层提供通用的技术能力：为应用层传递消息，为领域层提供持久化机制，为用户界面层绘制屏幕组件，等等。基础设施层还能够通过架构框架来支持4个层次间的交互模式\n\n- DO (Data Object): 此对象与数据库表结构一一对应，通过 DAO 层向上传输数据源对象。\n- DTO (Data Transfer Object): 数据传输对象，Service 或 Manager 向外传输的对象，不提倡在 DTO 中写逻辑，强制不要在 RPC 返回对象的 DTO 中封装逻辑\n- BO (Business Object): 业务对象，由 Service 层输出的封装业务逻辑的对象。\n- AO (Application Object): 应用对象，在 Web 层与 Service 层之间抽象的复用对象模型，极为贴 近展示层，复用度不高。\n- VO (View Object): 显示层对象，通常是 Web 向模板渲染引擎层传输的对象。Query: 数据查询对象，各层接收上层的查询请求。\n\n查询视图：\n\n```mermaid\nstateDiagram-v2\n  state \"Service(BIZ)(BO)\" as Service(BIZ)\n\n  %% 查询视图\n  Manager/Client --> 三方、中间件等\n  Service(BIZ) --> Manager/Client: DTO/Param\n  Service(RPC) --> Service(BIZ): DTO/Param\n  Manager/Client --> DAO: Query/DO\n  Service(BIZ) --> DAO: Query/DO/Param\n  Controller --> Service(BIZ): Param/AO\n  WEB/APP/其他服务 --> Controller: Param/AO\n  WEB/APP/其他服务 --> Service(RPC): Param\n  DAO --> DB\n\n  %% 返回视图\n  三方、中间件等 --> Manager/Client\n  Manager/Client --> Service(BIZ): DTO\n  Service(BIZ) --> Controller: DTO/AO\n  Controller --> WEB/APP/其他服务: VO/DTO/AO\n  Service(BIZ) --> Service(RPC): DTO\n  Service(RPC) --> WEB/APP/其他服务: DTO\n  DB --> DAO\n  DAO --> Service(BIZ): DO\n```\n\n常用的一些领域模型之间的转换工具类库：\n\n- org.apache.commons.beanutils.BeanUtils#copyProperties\n- org.springframework.beans.BeanUtils#copyProperties(java.lang.Object, java.lang.Object)\n- `org.dozer.Mapper#map(java.lang.Object, java.lang.Class<T>)`\n- net.sf.cglib.beans.BeanCopier#copy\n- ma.glasnost.orika.MapperFacade#map(S, D)\n- mapstruct\n\n### 领域模型\n\n建模范式：\n\n- 对象范式\n- 非对象范式\n- 混合范式\n\n贫血模型：指领域对象里只有get和set方法（POJO），所有的业务逻辑都不包含在内而是放在Business Logic层\n\n充血模型：拥有业务逻辑行为、数据封装\n\n#### 关联\n\n代表领域中两个实体的关联 以及技术里的关联\n\n为了使关联更易于控制：\n\n1. 使用单向关联\n2. 对关联进行限定，缩小范围\n3. 消除不必要的关联\n\n#### 实体\n\n由标志所定义的对象，数据可变，拥有着自己的生命周期\n\n这个标识是什么？是一个ID\n\n实体类通常采用充血模型，与这个实体相关的所有业务逻辑都在实体类的方法中实现，跨多个实体的领域逻辑则在领域服务中实现\n\n#### 值对象\n\n没有概念标识的对象\n\n作为一个临时对象，应该是不可变的，通常用来传递消息\n\n#### Service\n\n有些操作是无法归类到某个值对象或者实体上面\n\n需要使用Service来封装这些行为，由于上层的用户都可以使用Service, Service应用保持无状态\n\n粒度更粗的Service更容易被服用，较粗粒度的Service也不容易把领域层的知识泄露到应用层上面去\n\n#### 模块\n\n对一些职责类似的对象进行封装\n\n### 领域对象的生命周期\n\n```mermaid\nstateDiagram-v2\n  [*] --> 活动状态: 创建\n  活动状态 --> 活动状态: 修改\n  活动状态 --> 数据库表示: 存储\n  数据库表示 --> 活动状态: 重建\n  活动状态 --> 数据库或文件表示:存档\n  活动状态 --> [*]: 删除\n  数据库或文件表示 --> [*]:删除\n```\n\n#### 聚合\n\n> 聚合就是一组相关对象的集合，我们把它作为数据修改的单元。每个聚合都有一个根（root）和一个边界（boundary）。边界定义了聚合的内部都有什么。根则是聚合所包含的一个特定实体。对聚合而言，外部对象只可以引用根，而边界内部的对象之间则可以互相引用，聚合根的主要目的是为了避免由于复杂数据模型缺少统一的业务规则控制，而导致聚合、实体之间数据不一致性的问题\n\n![聚合实例 Car是一个聚合根](/assets/批注%202020-07-22%20161748.png)\n\n聚合以及聚合根的构建：\n\n```mermaid\nstateDiagram-v2\n  事件风暴 --> 找出实体和值对象\n  找出实体和值对象 --> 找出聚合根\n  找出聚合根 --> 将其他实体或者值对象归到某个聚合根\n  将其他实体或者值对象归到某个聚合根 --> 定义聚合根之间的关系\n```\n\n设计原则：\n\n1. 聚合内的对象、实体具备自洽、不变性\n2. 聚合保持小而美\n3. 使用聚合根ID引用别的聚合根，而非直接的对象引用\n4. 聚合内数据强一致性，而聚合之间数据最终一致性\n5. 跨聚合的服务调用应有应用层来完成\n\n#### [工厂](/软件工程/设计模式/创建型模式.md#工厂模式)\n\n> 当创建一个对象或创建整个聚合时，如果创建工作很复杂，或者暴露了过多的内部结构，则可以使用工厂进行封装。\n\n创建方法要是原子的\n\n工厂应该创建抽象类型 而不是具体类\n\n#### Repository\n\n> 客户需要一种有效的方式来获取对已存在的领域对象的引用\n> Repository是一个简单的概念框架，它可用来封装对聚合在数据库的检索技术\n\n\n- 查询：Specification\n\n对类型进行抽象\n\n充分利用与客户端解耦的优点\n\n将事务的控制权交给客户\n\n工厂与Repository的区别在于工厂聚焦于对象的创建，Repository的中间及结束生命周期，也就是查询已有对象\n\n### 领域建模方法论\n\n#### [CBM](/软件工程/架构/系统设计/架构设计.md#CBM基于模块的业务模型)\n#### [SOA](/软件工程/服务计算.md)\n#### [UML建模](/软件工程/理论/UML.md)\n#### 事件风暴\n\n> 围绕系统事件，定义事件，从而完成对系统的整体建模\n\n参与者：项目干系人\n\n材料：描述命令、实体、领域事件、补充信息的不同颜色贴纸\n\n关注点：某些业务动作或行为（事件）是否会触发下一个业务动作，这个动作（事件）的输入和输出是什么？是谁（实体）发出的什么动作（命令），触发了这个动作（事件）\n\n### 领域事件\n\n一个领域事件将导致进一步的业务操作，在实现业务解耦的同时，还有助于形成完整的业务闭环\n\n![领域事件全流程](/assets/屏幕截图%202021-11-16%20213841.png)\n\n领域事件是实现 [CQRS](/软件工程/微服务/查询.md#CQRS模式)的一种方式\n\n## 重构\n\n为改进蹩脚的模型、实现更深层次模型而进行重构\n\n所以DDD的重构不仅是为了干净的代码，也是为了一个更为一致的模型\n\n重构的时机：\n\n- 设计没有表达出对领域的最新理解\n- 重要的概念被隐含分散在设计中了，但是已经有让它变成显式概念的方法了\n- 发现一个能让设计更灵活的设计\n\n### 突破\n\n持续重构能不断精进，当达到一定量促成质变，对模型的理解会产生一个突破，从而使模型更加自洽\n\n当然这种突破也意味着大改，对项目来说是一种风险\n\n### 提炼概念\n\n> 将隐式概念转为显式概念\n\n- 有没有一些术语能够简洁地表达出复杂的概念\n- 借助领域专家 书籍\n- 不断尝试\n\n#### 隐式概念\n\n- 注意约束：使用对象来描述施加在某个对象上的约束\n  - Specification 模式就可以用来约束对象状态\n\n```java\nQueryWrapper qw = new QueryWrapper()\nwq.equals(\"name\", \"cxk\")\nwq.like(\"address\", \"%翻斗大街%\")\n```\n\nSpecification 可以用来在验证、查询、创建用来描述必须满足什么规则\n\n- 将过程提炼为领域对象的行为\n\n### 柔性设计\n\n乐于使用 易于修改\n\n使代码更加清晰可以表达领域模型，需要切分多个子域，从小开始，还要尽可能利用已有的形式来使现在与过去自洽\n\n- 模式：Intention-Revealing Interfaces\n  - 使用接口来解释代码的意图\n- 模式：Side-Effect-Free Function\n  - 将操作粗略分为有副作用的命令以及无副作用的查询\n- 模式：[Assertion](/软件工程/软件设计/代码质量/防御式编程.md#断言)\n  - 声明前置条件与后置条件\n- 模式：Conceptual Contour\n  - 概念轮廓 将设计元素组织成内聚的单元\n- 模式：Standalong Class\n  - 类尽可能保持与其他类的低耦合 以此降低依赖带来的复杂度\n- 模式：Closure Of Operation 闭合操作\n  - 入参类型与出参类型相同 减少了与其他概念的依赖\n\n#### 声明式设计*\n\n把代码写成一种可执行的规则\n\n也就说必须遵守某种预先定义好的规则\n\n基于规则的编程\n\nDSL是一种可以通过声明的方式完成业务的设计\n\n### 使用分析模式\n\n所谓分析模式，就是业务建模中的常见结构，可以理解是业务的设计模式\n\n在重构精进时如果发现合适的分析模式，可以尝试使用，但重要的一点就是对于分析模式中的术语，应该忠于其原来的意义，不要赋予其不同的含义，因为分析模式的术语也是一种通用语言\n\n### 使用[设计模式](/软件工程/设计模式/设计模式.md)\n\n## 战略设计\n\n### 保持模型的完整性\n\n看似相同的概念其实并不是同一个东西，混用了不一致的模型导致软件的不正确性\n\n#### 模式：Bounded Context\n\n限定模型的工作范围，通过封装通用语言和领域对象，提供上下文环境，保证在领域之内的一些术语、业务相关对象等（通用语言）有一个确切的含义\n\n- 子域提出问题 在界限上下文内解决问题\n\n#### 模式：Continuous Integration\n\n- 使用CI快速发现模型的错误\n\n#### 模式：Context Map\n\n![使用该模式描述两个边界上下文之间的关系](/assets/批注%202020-07-26%20152329.png)\n\n![不同模式对相关系统的控制能力](/assets/屏幕截图%202022-05-26%20214451.png)\n\n##### 合并上下文模式\n\n单个界限上下文，两团队如一家人，紧密到无法分开。一切模型要素都是共享的。\n\n##### 模式：Shared Kernel\n\n![两团队之间紧密合作，代码模型可以提取成通用组件共享](/assets/批注%202020-07-26%20152535.png)\n\n##### 模式：Customer/SupplierDevelopment Team\n\n强依赖，上下游系统开发合作顺利，上游团队做出变更要对下游团队负责，使用自动化测试来验证来实现对模型逻辑修改反应迅速，能快速判断是否遵守契约\n\n##### 模式：Conformist\n\n- 使用承诺维护上下游系统关系\n\n一定要跟某上游系统绑定，但别人是主，本系统是从。\n\n##### 模式：Anticorruption Layer\n\n- 封装遗留/外部系统\n\n集成遗留系统，又不能强制老系统更新。新系统要做个适配器层来转换模型.\n\n![防腐层防止别人的模型影响到自身](/assets/批注%202020-07-26%20153136.png)\n\n##### 模式：Separate Way\n\n- 子系统分道扬镳 独立演化\n- 集成总是代价高昂 而且又是获益却很小\n\n##### 模式：Open Host Service\n\n- 定义一套Service 暴露给其他系统\n\n##### 模式：Published Language\n\n- 使用一种可文档化的、通用的共享语言作为通信媒介\n\n### 精炼\n\n拆分组件，以便从某种形式提取出最重要的内容\n\n#### 模式：Core Domain\n\n针对核心领域模型进行优化、开发，让高手们都集中在复杂的核心业务，打造领域知识沉淀的闭环\n\n#### 逐步精炼\n\n##### 模式：Gneric Subdomain\n\n降低非核心领域模型的优先级，降低优先级意味着这些模块可以购买，可以被外包，反正不比核心领域受重视，资源也不会向这些模块倾斜太多\n\n##### 模式：Domain Vision Statement\n\n简短描述领域模型及其它所带来的价值\n\n##### 模式：Highlighted Core\n\n标记核心领域模型相关元素\n\n##### 模式：Cohesive Mechanism\n\n当模型的某些行为变得复杂时 将这些行为抽离到一个独立的框架里\n\n##### 模式：Segregated Core\n\n增强Core的内聚性\n\n##### 模式：Abstract Core\n\n对核心领域进一步抽象 降低复杂度\n\n### 大型结构\n\n大型结构使得人们可以从宏观角度讨论及理解整个系统，使用这种结构可以使系统变得更清晰，通过重构来得到这些结构\n\n#### 模式：Evolving Order\n\n让结构随着代码一起演变\n\n##### 模式：System Metaphor\n\n一种促进系统一致性的隐喻，如防火墙之于网络领域，如建筑设计、城市规划之于架构领域\n\n##### 模式：Responsibility Layer\n\n注意系统中的依赖 根据依赖可能会形成自然的层次结构 进而进行抽象成完整的层次结构\n\n##### 模式：Knowledge Level\n\n利用约束来定制系统的行为，使得用户可以通过定义约束的形式来改变系统的行为\n\n##### 模式：Pluggable Component Framework\n\n设计一个可插拔的灵活框架\n\n## 使用误区\n\n- 所有业务都使用DDD\n- 照搬全部战术设计方法 忽略战略设计\n","metadata":"tags: ['架构']\nstandardName: 'Domain Driven Design'\nalias: ['ddd', '领域驱动设计']\nlevel: 1\nbooks: [\n  {name: '领域驱动设计:软件核心复杂性应对之道'}\n]","hasMoreCommit":true,"totalCommits":26,"commitList":[{"date":"2024-11-15T15:13:06+08:00","author":"MY","message":"📦软件设计","hash":"72559316d91a8efb68055aa4f2a0af774fc2d724"},{"date":"2023-12-20T15:49:16+08:00","author":"MY","message":"✏领域驱动设计","hash":"1f4a490b70ad5d0bc865d409c39d2568616c60f5"},{"date":"2023-04-02T13:46:18+08:00","author":"MY","message":"⚒️知识金字塔","hash":"5227586de5c794724e2571f2abfca0dd0f1fff7f"},{"date":"2022-08-22T16:53:15+08:00","author":"cjiping","message":"✏️业务建模","hash":"a4b1b02ab7abdea168104f8a036d94e9ad24e12a"},{"date":"2022-06-09T21:51:44+08:00","author":"MY","message":"📦整理 Java","hash":"34c01b44e7566fa54773149765e3dd8420235279"},{"date":"2022-05-29T20:38:33+08:00","author":"MY","message":"✏️更新 DDD","hash":"df955b49861c512f800f78b3adc1f5e7e30ab399"},{"date":"2022-05-26T21:50:12+08:00","author":"MY","message":"✏️更新 DDD","hash":"590016e3ac1b9e2f8a276d80deb68ea315c0f0d6"},{"date":"2022-05-25T21:30:51+08:00","author":"MY","message":"✏️更新 DDD","hash":"54c3d228b9fc02235c11f30990e767bea5614759"},{"date":"2022-05-24T21:49:06+08:00","author":"MY","message":"✏️更新 DDD","hash":"82d10c2e27784c43c4420cde856fb0c994e7a86a"},{"date":"2022-05-24T16:49:31+08:00","author":"cjiping","message":"✏️更新 DDD","hash":"6c8ac0e6f4de14279d2060f5dcfa3d081e3146e3"}],"createTime":"2020-07-15T16:40:26+08:00"}