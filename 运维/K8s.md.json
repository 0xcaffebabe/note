{"name":"K8s","id":"运维-K8s","content":"# Kubernetes\n\n>Kubernetes（常简称为K8s）是用于自动部署、扩展和管理容器化（containerized）应用程序的开源系统\n\n![屏幕截图 2020-09-07 145646](/assets/屏幕截图%202020-09-07%20145646.png)\n\n## 架构\n\n```mermaid\nstateDiagram-v2\n  state control-plane(master) {\n    API服务器 --> etcd\n    Scheduler --> API服务器\n    ControllerManager --> API服务器\n  }\n  kubelet --> API服务器\n  kubeproxy --> API服务器\n  state worker1 {\n    kubelet --> 容器运行时\n    kubeproxy\n  }\n  worker2  --> API服务器\n```\n\n```mermaid\nstateDiagram-v2\n  Ingress --> Service: I want to expose my Services\n  Service --> Deployment: I want to proxy my Pod replicas\n  Pod --> Deployment: I have many Pod replicas\n  Container --> Pod: I need co-scheduling\n  Pod --> CronJob: I run periodically\n  HorizontalPodAutoscaler --> Pod: I need auto-scaling\n  Pod --> Job: I only run for once\n  ConfigMap --> Pod: I read configure file\n  Secret --> Pod: I need confidential data\n  Pod --> StatefulSet: I am stateful\n  Pod --> DaemonSet: I run as daemon\n```\n\nmaster：用于控制集群\n\n- API服务器：外部访问入口\n- Scheduler：调度应用（为应用分配工作节点）\n- Controller Manager：执行集群级别的功能\n- etcd：存储集群配置的分布式数据存储\n\n工作节点：运行用户部署应用的节点\n\n- 容器运行时：Docker 或者其他容器\n- Kubelet：与API服务器通信 管理当前节点的容器\n- kube-proxy:负责组件之间的负载均衡\n\n### 分布式\n\n- Kubenetes系统组件间只能通过API服务器通信\n- 为了保证高可用性， master的每个组件可以有多个实例\n\n### etcd\n\n只有API服务器才能直接与etcd通信\n\n数据在etcd中存储的是一个层次级目录结构 末端节点存储的json数据\n\n集群一致性保证：raft算法\n\n### API 服务器\n\n- 认证授权\n\n![屏幕截图 2020-09-15 143004](/assets/屏幕截图%202020-09-15%20143004.png)\n\n- 通知客户端资源变更\n\n![屏幕截图 2020-09-15 143259](/assets/屏幕截图%202020-09-15%20143259.png)\n\n#### 安全防护\n\n- pod 使用 service accounts机制进行认证\n\n![屏幕截图 2020-09-16 135815](/assets/屏幕截图%202020-09-16%20135815.png)\n\n```sh\nkubectl get sa # 获取服务账户\nkubectl create serviceaccount foo # 创建\n```\n\n![屏幕截图 2020-09-16 140540](/assets/屏幕截图%202020-09-16%20140540.png)\n\n- 使用sa:\n\n```yaml\nspec:\n  serviceAccountName: foo\n```\n\nRBAC控制：使用插件\n\n### 调度器\n\n利用 API 服务器的监听机制等待新创建的 pod, 然后给每个新的、 没有节点集的 pod 分配节点\n\n![屏幕截图 2020-09-15 143719](/assets/屏幕截图%202020-09-15%20143719.png)\n\n调度过程是很复杂的：\n\n- 选择可用节点\n- 选择最佳节点\n- 高级调度\n  - 如何保证节点副本分布尽可能均匀\n\n调度的过程是一个生产者消费者模型，由 informer 监听 service、pod 等对象的变化，加入优先级队列，再由调度器消费队列中的 pod 信息，结合 cache 中的节点信息，过滤并选择节点，将 pod 绑定到指定节点上\n\n### 控制管理器\n\n确保系统真实状态朝 API 服务器定义的期望的状态收敛\n\n```go\nfor {\n  实际状态 := 获取集群中对象X的实际状态（Actual State）\n  期望状态 := 获取集群中对象X的期望状态（Desired State）\n  if 实际状态 == 期望状态{\n    什么都不做\n  } else {\n    执行编排动作，将实际状态调整为期望状态\n  }\n}\n```\n\n- rc rs控制器 deployment控制器...\n\n### Kubelet\n\nkubelet 是 Node 节点上负责 Pod 生命周期管理的核心守护进程，负责把 Master 节点（主要是 API Server）的“调度意图”真正落地到本地容器运行时（如 containerd 或 Docker）\n\n```\n+-----------------------------+\n|         API Server         |\n+-------------+--------------+\n              |\n       Watch/Report Pod\n              |\n        +-----v------+\n        |   kubelet  | <------------------+\n        +------------+                    |\n        | Pod 管理   |                    |\n        | 健康探针   |                    |\n        | Volume 挂载|                    |\n        +-----+------+                    |\n              |CRI                        |\n       +------v------+                   |\n       | containerd   | --- 调用 ---> Docker 或其他 runtime\n       +-------------+                   |\n                                        本地文件读取 (静态Pod)\n```\n\n### kube-proxy\n\nkube-proxy 是一个“编程内核规则的控制器”。真正转发流量的是 Linux 内核（通过 iptables/ipvs）\n\n```lua\n+----------------------+\n|   Kubernetes API     |\n|     (Service 信息)   |\n+----------+-----------+\n           |\n     watch service/ep\n           |\n     +-----v------+\n     | kube-proxy |  <===> 维护 iptables/ipvs 规则（实际流量不会经过这里）\n     +------------+\n           |\n   +-------+--------+\n   | Linux 网络栈    |\n   | iptables / ipvs |\n   +-------+--------+\n           |\n   +-------v--------+\n   | 请求被转发到 Pod |\n   +----------------+\n```\n\n服务暴露的外部ip与端口通过每个节点上的kube-proxy实现\n\n暴露的这个ip是虚拟的 主要是用来做映射用的 当kube-proxy接收到这个ip的请求 就会查找映射 转发请求\n\n![屏幕截图 2020-09-15 154607](/assets/屏幕截图%202020-09-15%20154607.png)\n\n### 容器运行时\n\nkubelet 会监听 pod 对象的变化，根据变化并调用 CRI 来创建或者更新容器。CRI 由不同的容器技术实现，对 kubelet 暴露出 gRPC 服务\n\n![](/assets/2024313164224.webp)\n\nCRI 的接口分为两组：\n\n1. 第一组，是 RuntimeService。它提供的接口，主要是跟容器相关的操作\n2. 第二组，则是 ImageService。它提供的接口，主要是容器镜像相关的操作\n\n### 控制器协作\n\n![屏幕截图 2020-09-15 151627](/assets/屏幕截图%202020-09-15%20151627.png)\n\n### 高可用集群\n\n应用高可用：\n\n- 水平扩展\n- 主从架构\n\nmaster高可用：\n\n![屏幕截图 2020-09-15 154955](/assets/屏幕截图%202020-09-15%20154955.png)\n\n- etcd自身会进行数据同步\n- API 服务器是无状态的\n- 控制器与调度器会进行主从选举 只有leader才会进行调度控制工作\n\n## 优点\n\n- 简化部署\n- 充分利用硬件\n- 健康检查 自修复\n- 自动扩容\n\n## 在K8S中运行应用\n\n根据描述信息生成对应的pod 在pod中运行容器\n\nK8S会保证集群中的容器数量实例 在容器死亡时 会启动新容器替补\n\nK8S 在运行时可根据需求动态调整副本数量\n\n通过kube-proxy能进行服务连接动态切换\n\n### 部署第一个应用\n\n```sh\nkubectl  run  kubia  --image=luksa/kubia  --port=8080  # 创建容器运行\nkubectl get pods # 获取pod\nkubectl get rc\nkubectl port-forward kubia 8080:8080 # 开启端口转发\nkubectl get pods -o wide # 查看应用在哪个节点\nkubectl scale rc kubia --replicas=3 # 水平扩容\n```\n\n![屏幕截图 2020-09-08 140428](/assets/屏幕截图%202020-09-08%20140428.png)\n\n逻辑架构：\n\n![屏幕截图 2020-09-08 142015](/assets/屏幕截图%202020-09-08%20142015.png)\n\n- RC用来确保始终有pod运行\n- 使用http服务来完成外部请求到pod的映射\n\n## pod\n\n![pod 到底是什么](/assets/屏幕截图%202020-09-15%20152859.png)\n\n一组紧密相关的容器 独立的逻辑机器\n\n```mermaid\nstateDiagram-v2\n  state 工作节点1 {\n    state pod1(10.1.0.1) {\n      容器1\n    }\n    state pod2(10.1.0.2) {\n      容器3\n      容器4\n    }\n    state pod3(10.1.0.3) {\n      容器5\n      容器6\n    }\n  }\n  state 工作节点2 {\n    state pod4(10.1.1.1) {\n      容器7\n      容器8\n    }\n    state pod5(10.1.1.2) {\n      容器9\n      容器10\n    }\n  }\n```\n\n一 个 pod 中的所有容器都在相同的 network 和 UTS 命名空间下运行\n\n每个 pod 都有自己的 IP 地址， 并且可以通过这个专门的网络实现 pod。为了实现这个效果，在 k8s 中，其会通过先启动一个 infra 容器，由这个容器创建出一个 namespace，用户定义的容器再加入该 namespace 中，之间同个 pod 的容器就能互相访问\n\npod 扮演的是机器这个角色，容器扮演的机器中的进程。所以，关于 pod 对象的设计，凡是调度、网络、存储，以及安全相关的属性，基本上是 pod 级别的，跟容器 namespace 相关的，也是 pod 级别的。\n\npod的使用：\n\n- 倾向于单个pod单个容器\n\n### 使用yml创建pod\n\n```yml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: kubia-manual\n  labels:\n    env: test # 指定一个标签\nspec:\n  nodeSelector: # 选择特定标签的节点\n    super: \"true\"\n  containers:\n  - image: luksa/kubia\n    name: kubia\n    ports:\n    - containerPort: 8080\n      protocol: TCP\n```\n\n```sh\nkubectl create -f kubia-manual.yaml\nkubectl logs kubia-manual # 查看日志\n```\n\n### 存活探针\n\n存活探针判断容器是否存活，当存活探针失败，容器就会重启\n\n### 就绪探针\n\n判断 Pod 是否准备好接收流量，如果失败，Pod 会被从 Service 的 Endpoint 列表中移除，不会接收流量\n\n### 标签\n\n```sh\nkubectl get po --show-labels\nkubectl label po kubia-manual createtion_method=manual # 修改标签\nkubectl label node minikube super=true\nkubectl get po -l createtion_method=manual # 根据标签筛选\n```\n\n### 注解\n\n注解也是键值对\n\n```sh\nkubectl annotate pod kubia-manual wang.ismy/name=\"cxk\"\n```\n\n### 命名空间\n\n命名空间简单为对象划分了一个作用域\n\n```sh\nkubectl get ns\nkubectl get po -n kube-system # 获取命名空间下的pod\n\nkubectl create namespace custom-namespace # 创建命名空间\nkubectl create -f kubia-manual.yaml -n custom-namespace # 指定命名空间\n```\n\n### 停止与移除\n\n```sh\nkubectl delete po kubia-manual # 根据名字删除\n```\n\n### pod 的生命周期\n\npod 的状态：\n\n- Pending：这个状态意味着，Pod 的 YAML 文件已经提交给了 Kubernetes，API 对象已经被创建并保存在 Etcd 当中。但是，这个 Pod 里有些容器因为某种原因而不能被顺利创建。比如，调度不成功\n- Running：这个状态下，Pod 已经调度成功，跟一个具体的节点绑定。它包含的容器都已经创建成功，并且至少有一个正在运行中\n- Succeeded：这个状态意味着，Pod 里的所有容器都正常运行完毕，并且已经退出了。这种情况在运行一次性任务时最为常见。\n- Failed：这个状态下，Pod 里至少有一个容器以不正常的状态（非 0 的返回码）退出。- Unknown：这是一个异常状态，意味着 Pod 的状态不能持续地被 kubelet 汇报给 kube-apiserver，这很有可能是主从节点（Master 和 Kubelet）间的通信出现了问题\n\n1. 应用必须意识到会被杀死或者重新调度\n    - ip与主机名会发生变化\n    - 使用卷解决数据写入问题\n2. 不断重启的pod不会被重新调度\n3. 固定顺序启动pod\n    - 使用init容器\n    - 应用要处理好其他依赖没有准备好的情况\n4. 生命周期钩子\n    - postStart\n    - preStop\n5. pod的关闭\n\n![屏幕截图 2020-09-19 145717](/assets/屏幕截图%202020-09-19%20145717.png)\n\n### pause 容器\n\n创建每个 Pod 时自动启动的第一个容器，它为其他容器提供共享的 Linux 命名空间\n\n## 副本机制\n\nk8s 会保证 pod 以及 容器的健康运行\n\n### ReplicaSet\n\nReplicaSet 取代了 ReplicationController\n\nrs 的pod 选择器的表达能力更强\n\n- 创建\n\n```yml\napiVersion: apps/v1\nkind: ReplicaSet\nmetadata:\n  name: kubia\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: kubia\n  template:\n    metadata:\n      labels:\n        app: kubia\n    spec:\n      containers:\n      - name: kubia\n        image: luksa/kubia\n```\n\n### DaemonSet\n\n由DaemonSet 创建的 pod 会绕过调度程序 会在所有集群节点上运行（或者也可以通过指定`nodeSelector`在其他节点运行）, 当集群有新的节点加入或离开，pod 会被自动添加及删除\n\n![屏幕截图 2020-09-09 191240](/assets/屏幕截图%202020-09-09%20191240.png)\n\n- 创建\n\n```yml\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: ssd-monitor\nspec:\n  selector:\n    matchLabels:\n      app: ssd-monitor\n  template:\n    metadata:\n      labels:\n        app: ssd-monitor\n    spec:\n      nodeSelector:\n        disk: ssd\n      containers:\n      - name: main\n        image: luksa/ssd-monitor\n```\n\n### Job\n\n允许运行一种 pod, 该 pod 在内部进程成功结束时， 不重启容器。\n\n- 创建\n\n```yml\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: batch-job\nspec:\n  completions: 5 # 运行pod数\n  parallelism: 2 # 并行运行数\n  template:\n    metadata:\n      labels:\n        app: batch-job\n    spec:\n      restartPolicy: OnFailure\n      containers:\n      - name: main\n        image: luksa/batch-job\n```\n\n### CronJob\n\n- 创建\n\n```yml\napiVersion: batch/v1beta1\nkind: CronJob\nmetadata:\n  name: cron-job\nspec:\n  schedule: \"0,15,30,45 * * * *\"\n  jobTemplate:\n    spec:\n      template:\n        metadata:\n          labels:\n            app: batch-job\n        spec:\n          restartPolicy: OnFailure\n          containers:\n          - name: main\n            image: luksa/batch-job\n```\n\n## 服务\n\n是一种为一组功能相同的 pod 提供单一不变的接入点的资源\n\n![屏幕截图 2020-09-10 190129](/assets/屏幕截图%202020-09-10%20190129.png)\n\n- 创建\n\n```yml\napiVersion: v1\nkind: Service\nmetadata:\n  name: kubia\nspec:\n  ports:\n  - port: 80\n    targetPort: 8080\n  selector:\n    app: kubia\n```\n\nService 是由 kube-proxy 组件，加上 iptables 来共同实现的。当一个 Service 对象被提交给 k8s，kube-proxy 感知到，就会创建一条 iptables 规则\n\n当 iptables 规则过多时，会占据较多的资源。\n\n所以引入了 IPVS 模式，使用哈希表作为基础数据结构，并且在内核空间中工作。 这意味着，与 iptables 模式下的 kube-proxy 相比，IPVS 模式下的 kube-proxy 重定向通信的延迟要短，并且在同步代理规则时具有更好的性能\n\n### 服务间的发现\n\n- 通过环境变量\n\n```sh\nkubectl exec kubia-9knkg -- env\n```\n\n#### DNS\n\nk8s 会为 service 以及 pod 自动创建 dns 记录\n\n除了无头 Service 之外的 “普通” Service 会被赋予一个形如 my-svc.my-namespace.svc.cluster-domain.example 的 DNS A 和/或 AAAA 记录\n\n每个 Service 的名字是 `<name> + <namespace>` 唯一决定的，如果通过了服务名进行 dns 解析，pod 中 /etc/resolv.conf 配置的搜索域列表会生效，会自动补全全称\n\n### 暴露服务给外部\n\n#### Service\n\nNodePort：每个集群节点都会在节点上打开一个端口 将在该端口上接收到的流量重定向到基础服务\n\n```yml\napiVersion: v1\nkind: Service\nmetadata:\n  name: kubia-nodeport\nspec:\n  type: NodePort\n  ports:\n  - port: 80\n    targetPort: 8080\n    nodePort: 30123\n  selector:\n    app: kubia\n```\n\n通过nodeip:30123 访问\n\n其也是通过添加 iptables 规则来实现的\n\nClusterIP：暴露出一个虚拟的 IP 加到 iptables，在集群内部访问这个 IP 时，会转发到指定的服务上\n\n#### Endpoint Slice\n\nService 是一个逻辑抽象资源，定义了一组后端 Pod 的选择规则（selector），但它本身并不包含实际的 Pod IP 或端口。为了让网络组件（如 kube-proxy）知道该把访问 Service 的请求转发到哪些 Pod 上，就必须有一种方式记录这些实际地址\n\n#### LoadBalancer\n\n- 负载均衡器将流量重定向到跨所有节点的节点端口。客户端通过负载均衡器的 IP 连接到服务\n\n```yml\napiVersion: v1\nkind: Service\nmetadata:\n  name: kubia-loadbalancer\nspec:\n  type: LoadBalancer\n  ports:\n  - port: 80\n    targetPort: 8080\n  selector:\n    app: kubia\n```\n\n部署了一个 LoadBalancer 类型的 Service\n\nKubernetes 调用云平台 API（如 AWS、阿里云）创建一个 LB 实例\n\nLB 的监听端口 → 转发到集群内的 NodePort → Pod\n\n通过externalip:一个随机端口访问\n\n#### Ingress\n\n```lua\n外部用户浏览器\n      │\n      ▼\n[Ingress Controller]（如 nginx-ingress）\n      │\n      ▼\n[Ingress 规则]\n      │\n      ▼\n[Service]（ClusterIP 类型）\n      │\n      ▼\n[Pod]\n```\n\n#### Gateway API\n\n是 Ingress 的下一代入口流量管理标准\n\n```yaml\n[ Client ]\n    │\n    ▼\n[ Gateway Service (LoadBalancer / NodePort) ]  ←←←←←←←←←←←←←←←←←←←←←\n    │                                             ⬆ 网关 Service 类型决定如何暴露\n    ▼\n[ Gateway Pod (Ingress Controller 实现，如 nginx/istio) ]\n    │\n    ▼\n[ Gateway Object (定义监听 port、协议) ]\n    │\n    ▼\n[ HTTPRoute / TCPRoute / TLSRoute / UDPRoute ]\n    │\n    ▼\n[ Target Service (ClusterIP) ]\n    │\n    ▼\n[ Pod (app container) ]\n```\n\n### 服务故障排除\n\n- 确保从集群内连接到服务的集群IP\n- 服务的集群IP 是虚拟IP, 是无法ping通的\n- 如果已经定义了就绪探针， 请确保 它返回成功；否则该pod不会成为服务的一部分\n- 确认某个容器是服务的 一 部分\n- 检查是否连接到服务公开的端口，而不是目标端口\n- 尝试直接连接到podIP以确认pod正在接收正确端口上的 连接\n- 法通过pod的IP 访问应用， 请确保应用不是仅绑定 到本地主机\n\n## 卷\n\n卷是 pod 的一个组成部分， 因此像容器 一 样在 pod 的规范中定义\n\n![屏幕截图 2020-09-12 112125](/assets/屏幕截图%202020-09-12%20112125.png)\n![屏幕截图 2020-09-12 112142](/assets/屏幕截图%202020-09-12%20112142.png)\n\n### 在容器之间共享数据\n\nemptyDir：pod被删除时 卷的内容就会丢失\n\n- 创建\n\n```yml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: fortune\nspec:\n  containers:\n  - image: luksa/fortune\n    name: html-genrator\n    volumeMounts:\n    - name: html\n      mountPath: /var/htdocs\n  - image: nginx:alpine\n    name: web-server\n    volumeMounts:\n    - name: html # 使用html卷\n      mountPath: /usr/share/nginx/html # 挂载到容器的位置\n      readOnly: true\n    ports:\n    - containerPort: 80\n      protocol: TCP\n  volumes: # 创建一个卷\n  - name: html\n    emptyDir: {}\n```\n\ngitRepo：以git仓库文件填充目录文件\n\n```yml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: gitrepo-volume-pod\nspec:\n  containers:\n  - image: nginx:alpine\n    name: web-server\n    volumeMounts:\n    - name: html\n      mountPath: /usr/share/nginx/html\n      readOnly: true\n    ports:\n    - containerPort: 80\n      protocol: TCP\n  volumes:\n  - name: html\n    gitRepo:\n      repository: https://github.com/luksa/kubia-website-example.git\n      revision: master\n      directory: .\n```\n\n### 访问工作节点文件\n\nhostPath 卷指向节点文件系统上的特定文件或目录\n\n### 持久化存储\n\n- gce持久盘\n- aws弹性块存储\n- nfs卷\n\n### 持久卷\n\n![屏幕截图 2020-09-12 140458](/assets/屏幕截图%202020-09-12%20140458.png)\n![屏幕截图 2020-09-12 144057](/assets/屏幕截图%202020-09-12%20144057.png)\n\n- 创建持久卷\n\n```yml\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: mongodb-pv\nspec:\n  capacity:\n    storage: 1Gi\n  accessModes:\n    - ReadWriteOnce\n    - ReadOnlyMany\n  persistentVolumeReclaimPolicy: Retain\n  hostPath:\n    path: /tmp/mongodb\n```\n\n- 创建持久卷声明\n\n```yml\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: mongodb-pvc\nspec:\n  resources:\n    requests:\n      storage: 1Gi\n  accessModes:\n  - ReadWriteOnce\n  storageClassName: \"\" # 动态持久卷\n```\n\n- 容器使用持久卷\n\n```yml\n# ...\n  volumes:\n  - name: mongodb-data\n    persistentVolumeClaim:\n      claimName: mongodb-pvc\n```\n\n### 动态持久卷\n\n- 创建StorageClass\n\n```yml\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: fast\nprovisioner: k8s.io/minikube-hostpath\nparameters:\n  type: pd-ssd\n```\n\n声明是通过名称引用它的 方便之处主要是在不同集群之间移植\n\n![屏幕截图 2020-09-12 150052](/assets/屏幕截图%202020-09-12%20150052.png)\n\n## 参数配置\n\n通过定义传递参数：\n\n```yml\n  - image: luksa/fortune:args\n    args: [\"2\"]\n```\n\n使用环境变量：\n\n```yml\n- image: luksa/fortune:env\n  env:\n  - name: INTERVAL\n    value: \"30\"\n```\n\n### ConfigMap\n\n类似于配置中心：\n\n![屏幕截图 2020-09-13 142528](/assets/屏幕截图%202020-09-13%20142528.png)\n\n- 创建\n\n```sh\nkubectl create configmap fortunes-config --from-literal=sleep-interval=25\n```\n\n- 单个环境变量使用\n\n```yml\n  - image: luksa/fortune:env\n    env:\n    - name: INTERVAL\n      valueFrom:\n        configMapKeyRef:\n          name: fortunes-config\n          key: sleep-interval\n```\n\n- 一次传递所有环境变量\n\n```yml\n  - image: luksa/fortune:env\n    env:\n    envFrom:\n    - prefix: CONFIG_\n    configMapRef:\n      name: fortunes-config\n    args: [\"${CONFIG_xxx}\"] # 传递到命令行\n```\n\n- 挂载到卷\n\n```yml\nvolumes:\n- name: config\n  configMap:\n    name: configmap\n```\n\n- 更新配置\n\n```sh\nkubectl edit configmap xxx\n```\n\n### Secret\n\n存储与分发敏感信息\n\n- 创建\n\n```sh\n kubectl create secret generic fortune-https --from-file=https.key\n```\n\n- 挂载卷使用\n\n```yml\n- image: xxx\n  volumeMounts:\n  - name: keys\n    mountPath: /etc/nginx/keys/\nvolumes:\n- name: keys\n  secret:\n    secretName: fortune-https\n```\n\n- 环境变量使用\n\n```yml\nenv:\n- name: FOO_SECRET\n  valueFrom:\n    secretKeyRef:\n      name: fortune-https\n      key: name\n```\n\n## pod 元数据访问\n\n### Downward API\n\n![屏幕截图 2020-09-13 152325](/assets/屏幕截图%202020-09-13%20152325.png)\n\n通过环境变量：\n\n```yml\nenv:\n- name: POD IP\n  valueFrom:\n    fieldRef:\n      fieldPath: status.podIP\n- name: CONTAINER CPU REQUEST MILLICORES\n  valueFrom:\n    resourceFieldRef:\n      resource: requests.cpu\n      divisor: lm\n```\n\n通过卷：\n\n```yml\nvolumes:\n- name: downward\n  downwardAPI:\n    items:\n    - path: \"podName\"\n      fieldRef:\n        fieldPath: metadata.name\n```\n\n![屏幕截图 2020-09-13 153906](/assets/屏幕截图%202020-09-13%20153906.png)\n\n### 使用 K8S API 服务器\n\nREST API：\n\n- 启动kubectl proxy\n\n```sh\ncurl http://localhost:8001/apis/batch/v1/jobs\n```\n\n在 pod 内部使用\n\n客户端API\n\n## Deployment\n\n实际上是一个两层控制器。首先，它通过 ReplicaSet 的个数来描述应用的版本；然后，它再通过 ReplicaSet 的属性（比如 replicas 的值），来保证 Pod 的副本数量\n\n```mermaid\nstateDiagram-v2\n  Deployment --> ReplicaSet(V1)\n  Deployment --> ReplicaSet(V2)\n  ReplicaSet(V1) --> pod1\n  ReplicaSet(V1) --> pod2\n  ReplicaSet(V2) --> pod3\n```\n\n更新应用：\n\n- 删除旧版本pod 启动新版本pod\n  - 会造成短暂的服务不可用\n- 启动新版本pod 删除旧版本pod\n\n![屏幕截图 2020-09-14 135712](/assets/屏幕截图%202020-09-14%20135712.png)\n\n### 使用 Deployment 声明式升级\n\n- 创建\n\n```yml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: kubia\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: kubia\n  template:\n    metadata:\n      name: kubia\n      labels:\n        app: kubia\n    spec:\n      containers:\n      - image: luksa/kubia:v1\n        name: nodejs\n```\n```sh\nkubectl create -f kubia-dep-v1.yaml --record # 加上该参数会记录历史版本号\n```\n\n- 更新版本\n\n```sh\nkubectl set image deployment kubia nodejs=luksa/kubia:v2\n```\n\n- 回滚\n\n```sh\nkubectl rollout undo deployment kubia\n```\n\n使用 - -to-revision=xxx 回滚到特定版本\n\n- 升级速率控制\n\n```yml\nrollingUpdate :\n  maxSurge: 1 # 最多允许超过的副本数\n  maxunavailable: 0 # 最多允许多少百分比pod不可用\n```\n\n- 使用rollout pause 暂停滚动升级 部分软件版本就不一样 金丝雀发布\n\n- minReadySeconds属性指定新创建的pod至少要成功运行多久之后 ， 才能 将其视为可用\n\n如果 一 个新的pod 运行出错， 并且在minReadySeconds时间内它的就绪探针出现了失败， 那么新版本的滚动升级将被阻止\n\n- 使用kubectl apply升级Deployment\n\n## StatefulSet\n\n如何复制有状态的pod？\n\nStatefulSet 把应用的状态抽象为了：\n\n1. 拓扑状态：应用的多个实例之间不是完全对等的关系。这些应用实例，必须按照某些顺序启动，再次被创建出来时也必须严格按照相同的顺序，k8是是通过 pod 的名字+编号固定拓扑状态的\n2. 存储状态：Statefulset 保证了pod在重新调度后保留它们的标识和状态\n\nStatefulSet 的控制器直接管理的是 Pod，每个 Pod 的 hostname、名字等都是不同的、携带了编号的。k8s 通过 Headless Service，为这些有编号的 Pod，在 DNS 服务器中生成带有同样编号的 DNS 记录。StatefulSet 会为每个 Pod 分配一个同样编号的 pvc ，这样 k8s 通过持久化卷机制为 pvc 绑定 pv，每个pod都有专属于它的持久卷\n\n### 使用\n\n- 创建持久卷\n- 创建控制 Service\n\n```yml\napiVersion: v1\nkind: Service\nmetadata:\n  name: kubia\nspec:\n  clusterIP: None\n  selector:\n    app: kubia\n  ports:\n  - name: http\n    port: 80\n```\n\n- 创建StatefulSet\n\n```yml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: kubia\nspec:\n  serviceName: kubia # 在执行控制循环（Control Loop）的时候，使用这个 Headless Service 来保证 Pod 的“可解析身份”\n  replicas: 2\n  selector:\n    matchLabels:\n      app: kubia # has to match .spec.template.metadata.labels\n  template:\n    metadata:\n      labels:\n        app: kubia\n    spec:\n      containers:\n      - name: kubia\n        image: luksa/kubia-pet\n        ports:\n        - name: http\n          containerPort: 8080\n        volumeMounts:\n        - name: data\n          mountPath: /var/data\n  volumeClaimTemplates:\n  - metadata:\n      name: data\n    spec:\n      resources:\n        requests:\n          storage: 1Mi\n      accessModes:\n      - ReadWriteOnce\n```\n\n- 使用一个 Service 来访问 Pod\n\n```yml\napiVersion: v1\nkind: Service\nmetadata:\n  name: kubia-public\nspec:\n  selector:\n    app: kubia\n  ports:\n  -  port: 80\n     targetPort: 8080\n```\n\n### 发现伙伴节点\n\n- 容器内部通过DNS SRV 记录\n\n## 安全\n\n### pod 使用宿主节点的Linux命名空间\n\n- 使用宿主节点的网络命名空间\n\n```yaml\nspec:\n  hostNetwork: true\n```\n\n- 使用宿主节点的端口而不使用宿主节点的网络命名空间\n\n![屏幕截图 2020-09-16 142921](/assets/屏幕截图%202020-09-16%20142921.png)\n\n如果使用hostport 一个节点只能有一个相同的pod\n\n- 使用宿主的PID与IPC空间\n\n```yml\nspec:\n  hostPID: true\n  hostIPC: true\n```\n\n开启后 相同节点的pod的进程之间就是可见的 可通信的\n\n### 安全上下文\n\n```yml\nspec:\n  securityContext:\n    # ... pod 级别的\n  containers:\n    securityContext:\n      runAsUser: 405 # 以指定用户运行\n      runAsNonRoot: true # 禁止以root运行\n      privileged: true # 在特权模式下允许\n      capabilities:\n        add:\n        - SYS_TIME # 开放硬件时间修改权限\n        drop:\n        - CHOWN # 禁用文件所有者修改权限\n      readOnlyRootFilesystem: true # 禁止在根目录写文件\n```\n\n### pod 网络隔离\n\n- 网络策略\n\n```yml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: postgres-netpolicy\nspec:\n  podSelector:\n    matchLabels:\n      app: database # 对该标签的pod生效\n  ingress: # 只允许来自匹配下面标签的pod请求\n  - from:\n    - podSelector:\n        matchLabels:\n          app: webserver\n    ports:\n    - port: 5432\n```\n\n## 计算资源管理\n\n### 申请资源\n\n```yaml\nspec:\n  containers:\n  - image: busybox\n    command: [\"dd\", \"if=/dev/zero\", \"of=/dev/null\"]\n    name: main\n    resources:\n     requests:\n       cpu: 200m # 申请200毫核 也就说20%CPU\n       memory: 10Mi # 申请10M内存\n```\n\n添加了requests对调度的影响：\n\n通过设置资源requests我们指定了pod对资源需求的最小值。\n\n调度器不关心资源的实际使用了 而是关心各pod所定义的requests资源量 \n\n![屏幕截图 2020-09-17 134722](/assets/屏幕截图%202020-09-17%20134722.png)\n\n如果将 Pod 的 CPU 资源的 requests 和 limits 设置为同一个相等的整数值，那么该 Pod 就会被绑定在 2 个独占的 CPU 核上\n\n### 限制资源\n\n```yml\nresources:\n  limits:\n    cpu: 1 # 允许最大使用1核\n    memory: 20Mi # 内存允许最大 20M\n```\n\n超过limits的情况：\n\n- cpu：进程分配到的CPU不会超过指定的\n- 内存：如果内存超过limit 则容器会被杀掉\n\n### QoS 等级\n\n通过定义优先级决定资源不足时杀谁\n\n![屏幕截图 2020-09-17 142031](/assets/屏幕截图%202020-09-17%20142031.png)\n\n- BestEffort 优先级最低\n  - 没有设置requess和limits都属于这个级别\n- Guaranteed 优先级最高\n  - cpu和内存都要设置requests 和 limits\n  - 所有容器都要设置资源量\n  - requests 与 limits必须相等\n- Burstable 其他的pod都属于这个等级\n\n### 限制命名空间中的pod\n\n- LimitRange插件\n- ResourceQuota\n\n### 监控 pod\n\n- Heapster\n\n![屏幕截图 2020-09-17 143016](/assets/屏幕截图%202020-09-17%20143016.png)\n\n## 自动伸缩与集群\n\n- 基于CPU使用率的自动伸缩\n\n```sh\nkubectl autoscale deployment kubia --cpu-percent=30 --min=1 --max=5\n```\n\n- 纵向扩容\n\n自动修改CPU与内存大小\n\n### 集群节点扩容\n\n新节点启动后，其上运行的Kubelet会联系API服务器，创建 一 个Node资源以注册该节点\n\n当一 个节点被选中下线，它首先会被标记为不可调度， 随后运行其上的pod 将被疏散至其他节点\n\n## 高级调度\n\n### 污点和容忍度\n\n限制哪些pod可以被调度到某一个节点\n\n```sh\nkubectl describe node minikube | grep Taints # 查看节点污点\n```\n\n![屏幕截图 2020-09-19 134744](/assets/屏幕截图%202020-09-19%20134744.png)\n\n- NoSchedule 表示如果 pod 没有容忍这些污点， pod 则不能被调度到包含这些污点的节点上\n- PreferNoSchedule 是 NoSchedule 的 一 个宽松的版本， 表示尽量阻止pod 被调度到这个节点上， 但是如果没有其他节点可以调度， pod 依然会被调度到这个节点上\n- NoExecute会影响正在节点上运行着的 pod 。 如果在 一 个节点上添加了 NoExecute 污点， 那些在该节点上运行着的pod, 如果没有容忍这个 NoExecute 污点， 将会从这个节点去除\n\n- 添加污点\n\n```sh\nkubectl taint node minikube node-type=production:NoSchedule\n```\n\n- pod添加容忍度\n\n```yml\nspec:\n  replicas: 5\n  template:\n    spec:\n      ...\n      tolerations:\n      - key: node-type\n        operator: Equal\n        value: production\n        effect: NoSchedule\n```\n\n### 节点亲缘性\n\n这种机制允许你通知 Kubemetes将 pod 只调度到某个几点子集上面\n\n```yml\nspec:\n  affinity:\n    nodeAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        nodeSelectorTerms:\n        - matchExpressions:\n          - key: gpu\n            operator: In\n            values:\n            - \"true\"\n```\n\n![屏幕截图 2020-09-19 142905](/assets/屏幕截图%202020-09-19%20142905.png)\n\n## 最佳实践\n\n![屏幕截图 2020-09-19 143453](/assets/屏幕截图%202020-09-19%20143453.png)\n\n### 客户端请求处理\n\n1. pod启动时避免客户端连接断开\n    - 使用一个就绪探针来探测pod是否准备好接受请求了\n2. pod关闭时避免请求断开\n    - 停止接受新连接\n    - 等待所有请求完成\n    - 关闭应用\n\n### 让应用方便运行与管理\n\n1. 可管理的容器镜像\n    - 镜像太大难以传输 镜像太小会缺失很多工具\n2. 合理给镜像打标签\n    - 不要使用latest 使用具体版本号\n3. 使用多维度的标签\n4. 使用注解描述额外信息\n5. 使用/dev/termination-log 写入失败信息\n6. 日志\n    - 将日志打印到标准输出方便查看\n    - 集中式日志系统\n\n## 应用扩展\n\n### CRD对象\n\n- 创建\n\n```yml\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: websites.extensions.example.com\nspec:\n  scope: Namespaced\n  group: extensions.example.com\n  version: v1\n  names:\n    kind: Website\n    singular: website\n    plural: websites\n```\n\n- 创建CRD实例\n\n```yml\napiVersion: extensions.example.com/v1\nkind: Website\nmetadata:\n  name: kubia\nspec:\n gitRepo: https://github.com/luksa/kubia-website-example.git\n```\n\n### 服务目录\n\n服务目录就是列出所有服务的目录。 用户可以浏览目录并自行设置目录中列出的服务实例\n\n## 网络\n\n![屏幕截图 2020-09-15 153101](/assets/屏幕截图%202020-09-15%20153101.png)\n\n相同节点的pod通信：\n\n![屏幕截图 2020-09-15 153836](/assets/屏幕截图%202020-09-15%20153836.png)\n\n不同节点的pod通信：\n\n![屏幕截图 2020-09-15 153900](/assets/屏幕截图%202020-09-15%20153900.png)\n\n只有当所有节点连接到相同网关的时候 上述方案才有效\n\n### CNI\n\nCNI 的设计思想是 Kubernetes 在启动 Infra 容器之后，就可以直接调用 CNI 网络插件，为这个 Infra 容器的 Network Namespace，配置符合预期的网络栈\n\n## 监控\n\n![](/assets/2024314135248.webp)\n\n1. 宿主机的监控数据通过以 DaemonSet 的方式运行在宿主机的 Node Exporter 提供\n2. API Server 也会在 /metrics API 里，暴露出各个 Controller 的工作队列（Work Queue）的长度、请求的 QPS 和延迟数据等等\n3. Kubernetes 相关的监控数据。容器相关的 Metrics 主要来自于 kubelet 内置的 cAdvisor 服务。其他数据则是由 Metrics Server 提供\n\n```mermaid\nstateDiagram-v2\n  aggregator --> apiserver\n  aggregator --> metricsserver\n  aggregator --> 其他server\n```\n\n### 日志\n\n第一种方式：logging agent 以 DaemonSet 的方式运行在节点上，然后将宿主机上的容器日志目录挂载进去，最后由 logging-agent 把日志转发到后端存储，这种方式要求应用输出的日志，都必须是直接输出到容器的 stdout 和 stderr 里\n\n第二种方式：当容器的日志只能输出到某些文件里的时候，可以通过一个 sidecar 容器把这些日志文件重新输出到 sidecar 的 stdout 和 stderr 上，这样就能够继续使用第一种方案了。但这会存两份日志文件，占用磁盘。\n\n第三种方式：通过一个 sidecar 容器，直接把应用的日志文件发送到远程存储里面去。这个 sidecar 会对日志文件进行解析，这可能需要消耗较多资源，从而导致拖垮应用容器。\n\n","metadata":"tags: ['Linux', '云原生']","hasMoreCommit":true,"totalCommits":24,"commitList":[{"date":"2025-07-12T15:49:09+08:00","author":"my","message":"📦K8S","hash":"433152c13bf25b0afb9f2da5a6d4cc3cb2124b36"},{"date":"2024-03-14T14:59:51+08:00","author":"MY","message":"✏k8s","hash":"ae3461309852c8bf76e2db070586ed92dfa72281"},{"date":"2024-03-13T21:31:48+08:00","author":"MY","message":"✏k8s","hash":"42232c8d5a5a7747fac2482872b948ba448ee2ea"},{"date":"2024-03-12T20:03:27+08:00","author":"MY","message":"✏k8s & 容器网络","hash":"a4f9529e07f942f438aa6875d64a7bfc453afb84"},{"date":"2024-03-11T19:44:53+08:00","author":"MY","message":"✏k8s","hash":"1210ea8a06dc8a66c57206993d7763a5cfcc6984"},{"date":"2024-03-09T15:55:32+08:00","author":"MY","message":"✏k8s","hash":"1908b97a3d7d04ddb1c5d9499ec77b9fcc2e462d"},{"date":"2024-03-08T20:14:02+08:00","author":"MY","message":"✏k8s","hash":"231481cb2b425bc06ad170361a01ac20c4319da2"},{"date":"2024-03-07T20:07:34+08:00","author":"MY","message":"✏容器化 & k8s","hash":"dccd2fb3946bf2797a63da6f122854483ebb779d"},{"date":"2020-09-19T15:47:46+08:00","author":"MY","message":"✏更新 k8s","hash":"d1fe5fb352fd4f857b200cbe0c31f7c264afdf95"},{"date":"2020-09-17T15:20:45+08:00","author":"MY","message":"✏更新 K8S","hash":"bf6215196d4e90e1e424492eb00b2fd524e06186"}],"createTime":"2019-11-04T23:11:04+08:00"}